
namespace telegramium {
  namespace bots(snake circe http4s) {

    enum Emoji {
      item EmojiDice        = "üé≤"
      item EmojiDarts       = "üéØ"
      item EmojiBasketball  = "üèÄ"
      item EmojiFootball    = "‚öΩ"
      item EmojiSlotMachine = "üé∞"
      item EmojiBowling     = "üé≥"
    }

    enum ParseMode {
      item Markdown  = "Markdown"
      item Markdown2 = "MarkdownV2"
      item Html      = "HTML"
    }

    /* Chat ID. */
    enum ChatId {
      /* Integer chat ID */
      wrap ChatIntId (id) = Long
      /* Chat ID starting with @. */
      wrap ChatStrId (id) = String
    }

    enum KeyboardMarkup {
          
      /* This object represents an inline keyboard that appears right next to the 
        message it belongs to.  */
      InlineKeyboardMarkup {
        /* Array of button rows, each represented by an Array of 
        InlineKeyboardButton objects */
        inlineKeyboard : List[List[InlineKeyboardButton]]
      }
             
    
      /* Upon receiving a message with this object, Telegram clients will display a 
        reply interface to the user (act as if the user has selected the bot's message 
        and tapped 'Reply'). This can be extremely useful if you want to create 
        user-friendly step-by-step interfaces without having to sacrifice privacy mode. 
        Not supported in channels and for messages sent on behalf of a Telegram Business 
        account.  */
      ForceReply {
        /* Shows reply interface to the user, as if they manually 
        selected the bot's message and tapped 'Reply' */
        forceReply            : Boolean
        /* Optional. The placeholder to be shown in the input field 
        when the reply is active; 1-64 characters */
        inputFieldPlaceholder : Option[String]
        /* Optional. Use this parameter if you want to force reply 
        from specific users only. Targets: 1) users that are 
        &#064;mentioned in the text of the Message object; 2) if the 
        bot's message is a reply to a message in the same chat and 
        forum topic, sender of the original message. */
        selective             : Option[Boolean]
      }
             
    
      /* Upon receiving a message with this object, Telegram clients will remove the 
        current custom keyboard and display the default letter-keyboard. By default, 
        custom keyboards are displayed until a new keyboard is sent by a bot. An 
        exception is made for one-time keyboards that are hidden immediately after the 
        user presses a button (see ReplyKeyboardMarkup). Not supported in channels and 
        for messages sent on behalf of a Telegram Business account.  */
      ReplyKeyboardRemove {
        /* Requests clients to remove the custom keyboard (user will 
        not be able to summon this keyboard; if you want to hide the 
        keyboard from sight but keep it accessible, use 
        one_time_keyboard in ReplyKeyboardMarkup) */
        removeKeyboard : Boolean
        /* Optional. Use this parameter if you want to remove the 
        keyboard for specific users only. Targets: 1) users that are 
        &#064;mentioned in the text of the Message object; 2) if the 
        bot's message is a reply to a message in the same chat and 
        forum topic, sender of the original message. Example: A user 
        votes in a poll, bot returns confirmation message in reply 
        to the vote and removes the keyboard for that user, while 
        still showing the keyboard with poll options to users who 
        haven't voted yet. */
        selective      : Option[Boolean]
      }
             
    
      /* This object represents a custom keyboard with reply options (see Introduction 
        to bots for details and examples). Not supported in channels and for messages 
        sent on behalf of a Telegram Business account.  */
      ReplyKeyboardMarkup {
        /* Array of button rows, each represented by an Array of 
        KeyboardButton objects */
        keyboard              : List[List[KeyboardButton]]
        /* Optional. Requests clients to always show the keyboard when 
        the regular keyboard is hidden. Defaults to false, in which 
        case the custom keyboard can be hidden and opened with a 
        keyboard icon. */
        isPersistent          : Option[Boolean]
        /* Optional. Requests clients to resize the keyboard 
        vertically for optimal fit (e.g., make the keyboard smaller 
        if there are just two rows of buttons). Defaults to false, 
        in which case the custom keyboard is always of the same 
        height as the app's standard keyboard. */
        resizeKeyboard        : Option[Boolean]
        /* Optional. Requests clients to hide the keyboard as soon as 
        it's been used. The keyboard will still be available, but 
        clients will automatically display the usual letter-keyboard 
        in the chat - the user can press a special button in the 
        input field to see the custom keyboard again. Defaults to 
        false. */
        oneTimeKeyboard       : Option[Boolean]
        /* Optional. The placeholder to be shown in the input field 
        when the keyboard is active; 1-64 characters */
        inputFieldPlaceholder : Option[String]
        /* Optional. Use this parameter if you want to show the 
        keyboard to specific users only. Targets: 1) users that are 
        &#064;mentioned in the text of the Message object; 2) if the 
        bot's message is a reply to a message in the same chat and 
        forum topic, sender of the original message. Example: A user 
        requests to change the bot's language, bot replies to the 
        request with a keyboard to select the new language. Other 
        users in the group don't see the keyboard. */
        selective             : Option[Boolean]
      }
             
    }

    /** A file to send. */
    enum IFile {
      /* Use InputPartFile to send file on a local file system. */
      wrap InputPartFile (file) = java.io.File
      /* Use InputLinkFile to send a file accessible via some URL. */
      wrap InputLinkFile (file) = String
    }

      
    enum BackgroundFill {
    
      /* The background is a gradient fill.  */
      BackgroundFillGradient {
        type : "gradient:0"
        /* Top color of the gradient in the RGB24 format */
        topColor      : Int
        /* Bottom color of the gradient in the RGB24 format */
        bottomColor   : Int
        /* Clockwise rotation angle of the background fill in degrees; 
        0-359 */
        rotationAngle : Int
      }
             
      /* The background is a freeform gradient that rotates after every message in the 
        chat.  */
      BackgroundFillFreeformGradient {
        type : "freeform_gradient:1"
        /* A list of the 3 or 4 base colors that are used to generate 
        the freeform gradient in the RGB24 format */
        colors : List[Int]
      }
             
      /* The background is filled using the selected color.  */
      BackgroundFillSolid {
        type : "solid:2"
        /* The color of the background fill in the RGB24 format */
        color : Int
      }
             
    }
          
    enum BackgroundType {
    
      /* The background is a wallpaper in the JPEG format.  */
      BackgroundTypeWallpaper {
        type : "wallpaper:0"
        /* Document with the wallpaper */
        document         : Document
        /* Dimming of the background in dark themes, as a percentage; 
        0-100 */
        darkThemeDimming : Int
        /* Optional. True, if the wallpaper is downscaled to fit in a 
        450x450 square and then box-blurred with radius 12 */
        isBlurred        : Option[Boolean]
        /* Optional. True, if the background moves slightly when the 
        device is tilted */
        isMoving         : Option[Boolean]
      }
             
      /* The background is a .PNG or .TGV (gzipped subset of SVG with MIME type 
        ‚Äúapplication/x-tgwallpattern‚Äù) pattern to be combined with the background fill 
        chosen by the user.  */
      BackgroundTypePattern {
        type : "pattern:1"
        /* Document with the pattern */
        document   : Document
        /* The background fill that is combined with the pattern */
        fill       : BackgroundFill
        /* Intensity of the pattern when it is shown above the filled 
        background; 0-100 */
        intensity  : Int
        /* Optional. True, if the background fill must be applied only 
        to the pattern itself. All other pixels are black in this 
        case. For dark themes only */
        isInverted : Option[Boolean]
        /* Optional. True, if the background moves slightly when the 
        device is tilted */
        isMoving   : Option[Boolean]
      }
             
      /* The background is taken directly from a built-in chat theme.  */
      BackgroundTypeChatTheme {
        type : "chat_theme:2"
        /* Name of the chat theme, which is usually an emoji */
        themeName : String
      }
             
      /* The background is automatically filled based on the selected colors.  */
      BackgroundTypeFill {
        type : "fill:3"
        /* The background fill */
        fill             : BackgroundFill
        /* Dimming of the background in dark themes, as a percentage; 
        0-100 */
        darkThemeDimming : Int
      }
             
    }
          
    enum BotCommandScope {
    
      /* Represents the scope of bot commands, covering all group and supergroup chat 
        administrators.  */
      BotCommandScopeAllChatAdministrators {
        type : "all_chat_administrators:0"
      }
             
      /* Represents the scope of bot commands, covering all group and supergroup chats.  */
      BotCommandScopeAllGroupChats {
        type : "all_group_chats:1"
      }
             
      /* Represents the default scope of bot commands. Default commands are used if no 
        commands with a narrower scope are specified for the user.  */
      BotCommandScopeDefault {
        type : "default:2"
      }
             
      /* Represents the scope of bot commands, covering all administrators of a specific 
        group or supergroup chat.  */
      BotCommandScopeChatAdministrators {
        type : "chat_administrators:3"
        /* Unique identifier for the target chat or username of the 
        target supergroup (in the format &#064;supergroupusername) */
        chatId : ChatId
      }
             
      /* Represents the scope of bot commands, covering a specific member of a group or 
        supergroup chat.  */
      BotCommandScopeChatMember {
        type : "chat_member:4"
        /* Unique identifier for the target chat or username of the 
        target supergroup (in the format &#064;supergroupusername) */
        chatId : ChatId
        /* Unique identifier of the target user */
        userId : Long
      }
             
      /* Represents the scope of bot commands, covering a specific chat.  */
      BotCommandScopeChat {
        type : "chat:5"
        /* Unique identifier for the target chat or username of the 
        target supergroup (in the format &#064;supergroupusername) */
        chatId : ChatId
      }
             
      /* Represents the scope of bot commands, covering all private chats.  */
      BotCommandScopeAllPrivateChats {
        type : "all_private_chats:6"
      }
             
    }
          
    enum ChatBoostSource {
    
      /* The boost was obtained by the creation of Telegram Premium gift codes to boost 
        a chat. Each such code boosts the chat 4 times for the duration of the 
        corresponding Telegram Premium subscription.  */
      ChatBoostSourceGiftCode {
        source : "gift_code:0"
        /* User for which the gift code was created */
        user   : User
      }
             
      /* The boost was obtained by the creation of a Telegram Premium or a Telegram Star 
        giveaway. This boosts the chat 4 times for the duration of the corresponding 
        Telegram Premium subscription for Telegram Premium giveaways and 
        prize_star_count / 500 times for one year for Telegram Star giveaways.  */
      ChatBoostSourceGiveaway {
        source : "giveaway:1"
        /* Identifier of a message in the chat with the giveaway; the 
        message could have been deleted already. May be 0 if the 
        message isn't sent yet. */
        giveawayMessageId : Int
        /* Optional. User that won the prize in the giveaway if any; 
        for Telegram Premium giveaways only */
        user              : Option[User]
        /* Optional. The number of Telegram Stars to be split between 
        giveaway winners; for Telegram Star giveaways only */
        prizeStarCount    : Option[Int]
        /* Optional. True, if the giveaway was completed, but there 
        was no user to win the prize */
        isUnclaimed       : Option[Boolean]
      }
             
      /* The boost was obtained by subscribing to Telegram Premium or by gifting a 
        Telegram Premium subscription to another user.  */
      ChatBoostSourcePremium {
        source : "premium:2"
        /* User that boosted the chat */
        user   : User
      }
             
    }
          
    enum ChatMember {
    
      /* Represents a chat member that owns the chat and has all administrator 
        privileges.  */
      ChatMemberOwner {
        status : "creator:0"
        /* Information about the user */
        user        : User
        /* True, if the user's presence in the chat is hidden */
        isAnonymous : Boolean
        /* Optional. Custom title for this user */
        customTitle : Option[String]
      }
             
      /* Represents a chat member that isn't currently a member of the chat, but may 
        join it themselves.  */
      ChatMemberLeft {
        status : "left:1"
        /* Information about the user */
        user   : User
      }
             
      /* Represents a chat member that has some additional privileges.  */
      ChatMemberAdministrator {
        status : "administrator:2"
        /* Information about the user */
        user                : User
        /* True, if the bot is allowed to edit administrator 
        privileges of that user */
        canBeEdited         : Boolean
        /* True, if the user's presence in the chat is hidden */
        isAnonymous         : Boolean
        /* True, if the administrator can access the chat event log, 
        get boost list, see hidden supergroup and channel members, 
        report spam messages, ignore slow mode, and send messages to 
        the chat without paying Telegram Stars. Implied by any other 
        administrator privilege. */
        canManageChat       : Boolean
        /* True, if the administrator can delete messages of other 
        users */
        canDeleteMessages   : Boolean
        /* True, if the administrator can manage video chats */
        canManageVideoChats : Boolean
        /* True, if the administrator can restrict, ban or unban chat 
        members, or access supergroup statistics */
        canRestrictMembers  : Boolean
        /* True, if the administrator can add new administrators with 
        a subset of their own privileges or demote administrators 
        that they have promoted, directly or indirectly (promoted by 
        administrators that were appointed by the user) */
        canPromoteMembers   : Boolean
        /* True, if the user is allowed to change the chat title, 
        photo and other settings */
        canChangeInfo       : Boolean
        /* True, if the user is allowed to invite new users to the 
        chat */
        canInviteUsers      : Boolean
        /* True, if the administrator can post stories to the chat */
        canPostStories      : Boolean
        /* True, if the administrator can edit stories posted by other 
        users, post stories to the chat page, pin chat stories, and 
        access the chat's story archive */
        canEditStories      : Boolean
        /* True, if the administrator can delete stories posted by 
        other users */
        canDeleteStories    : Boolean
        /* Optional. True, if the administrator can post messages in 
        the channel, approve suggested posts, or access channel 
        statistics; for channels only */
        canPostMessages     : Option[Boolean]
        /* Optional. True, if the administrator can edit messages of 
        other users and can pin messages; for channels only */
        canEditMessages     : Option[Boolean]
        /* Optional. True, if the user is allowed to pin messages; for 
        groups and supergroups only */
        canPinMessages      : Option[Boolean]
        /* Optional. True, if the user is allowed to create, rename, 
        close, and reopen forum topics; for supergroups only */
        canManageTopics     : Option[Boolean]
        /* Optional. Custom title for this user */
        customTitle         : Option[String]
      }
             
      /* Represents a chat member that has no additional privileges or restrictions.  */
      ChatMemberMember {
        status : "member:3"
        /* Information about the user */
        user      : User
        /* Optional. Date when the user's subscription will expire; 
        Unix time */
        untilDate : Option[Int]
      }
             
      /* Represents a chat member that was banned in the chat and can't return to the 
        chat or view chat messages.  */
      ChatMemberBanned {
        status : "kicked:4"
        /* Information about the user */
        user      : User
        /* Date when restrictions will be lifted for this user; Unix 
        time. If 0, then the user is banned forever */
        untilDate : Int
      }
             
      /* Represents a chat member that is under certain restrictions in the chat. 
        Supergroups only.  */
      ChatMemberRestricted {
        status : "restricted:5"
        /* Information about the user */
        user                  : User
        /* True, if the user is a member of the chat at the moment of 
        the request */
        isMember              : Boolean
        /* True, if the user is allowed to send text messages, 
        contacts, giveaways, giveaway winners, invoices, locations 
        and venues */
        canSendMessages       : Boolean
        /* True, if the user is allowed to send audios */
        canSendAudios         : Boolean
        /* True, if the user is allowed to send documents */
        canSendDocuments      : Boolean
        /* True, if the user is allowed to send photos */
        canSendPhotos         : Boolean
        /* True, if the user is allowed to send videos */
        canSendVideos         : Boolean
        /* True, if the user is allowed to send video notes */
        canSendVideoNotes     : Boolean
        /* True, if the user is allowed to send voice notes */
        canSendVoiceNotes     : Boolean
        /* True, if the user is allowed to send polls and checklists */
        canSendPolls          : Boolean
        /* True, if the user is allowed to send animations, games, 
        stickers and use inline bots */
        canSendOtherMessages  : Boolean
        /* True, if the user is allowed to add web page previews to 
        their messages */
        canAddWebPagePreviews : Boolean
        /* True, if the user is allowed to change the chat title, 
        photo and other settings */
        canChangeInfo         : Boolean
        /* True, if the user is allowed to invite new users to the 
        chat */
        canInviteUsers        : Boolean
        /* True, if the user is allowed to pin messages */
        canPinMessages        : Boolean
        /* True, if the user is allowed to create forum topics */
        canManageTopics       : Boolean
        /* Date when restrictions will be lifted for this user; Unix 
        time. If 0, then the user is restricted forever */
        untilDate             : Int
      }
             
    }
          
    enum InlineQueryResult {
    
      /* Represents a link to an animated GIF file. By default, this animated GIF file 
        will be sent by the user with optional caption. Alternatively, you can use 
        input_message_content to send a message with the specified content instead of 
        the animation.  */
      InlineQueryResultGif {
        type : "gif:0"
        /* Unique identifier for this result, 1-64 bytes */
        id                    : String
        /* A valid URL for the GIF file */
        gifUrl                : String
        /* Optional. Width of the GIF */
        gifWidth              : Option[Int]
        /* Optional. Height of the GIF */
        gifHeight             : Option[Int]
        /* Optional. Duration of the GIF in seconds */
        gifDuration           : Option[Int]
        /* URL of the static (JPEG or GIF) or animated (MPEG4) 
        thumbnail for the result */
        thumbnailUrl          : String
        /* Optional. MIME type of the thumbnail, must be one of 
        ‚Äúimage/jpeg‚Äù, ‚Äúimage/gif‚Äù, or ‚Äúvideo/mp4‚Äù. Defaults to 
        ‚Äúimage/jpeg‚Äù */
        thumbnailMimeType     : Option[String]
        /* Optional. Title for the result */
        title                 : Option[String]
        /* Optional. Caption of the GIF file to be sent, 0-1024 
        characters after entities parsing */
        caption               : Option[String]
        /* Optional. Mode for parsing entities in the caption. See 
        formatting options for more details. */
        parseMode             : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities       : List[MessageEntity]
        /* Optional. Pass True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia : Option[Boolean]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup           : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        GIF animation */
        inputMessageContent   : Option[InputMessageContent]
      }
             
      /* Represents a venue. By default, the venue will be sent by the user. 
        Alternatively, you can use input_message_content to send a message with the 
        specified content instead of the venue.  */
      InlineQueryResultVenue {
        type : "venue:1"
        /* Unique identifier for this result, 1-64 Bytes */
        id                  : String
        /* Latitude of the venue location in degrees */
        latitude            : Float
        /* Longitude of the venue location in degrees */
        longitude           : Float
        /* Title of the venue */
        title               : String
        /* Address of the venue */
        address             : String
        /* Optional. Foursquare identifier of the venue if known */
        foursquareId        : Option[String]
        /* Optional. Foursquare type of the venue, if known. (For 
        example, ‚Äúarts_entertainment/default‚Äù, 
        ‚Äúarts_entertainment/aquarium‚Äù or ‚Äúfood/icecream‚Äù.) */
        foursquareType      : Option[String]
        /* Optional. Google Places identifier of the venue */
        googlePlaceId       : Option[String]
        /* Optional. Google Places type of the venue. (See supported 
        types.) */
        googlePlaceType     : Option[String]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup         : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        venue */
        inputMessageContent : Option[InputMessageContent]
        /* Optional. Url of the thumbnail for the result */
        thumbnailUrl        : Option[String]
        /* Optional. Thumbnail width */
        thumbnailWidth      : Option[Int]
        /* Optional. Thumbnail height */
        thumbnailHeight     : Option[Int]
      }
             
      /* Represents a contact with a phone number. By default, this contact will be sent 
        by the user. Alternatively, you can use input_message_content to send a message 
        with the specified content instead of the contact.  */
      InlineQueryResultContact {
        type : "contact:2"
        /* Unique identifier for this result, 1-64 Bytes */
        id                  : String
        /* Contact's phone number */
        phoneNumber         : String
        /* Contact's first name */
        firstName           : String
        /* Optional. Contact's last name */
        lastName            : Option[String]
        /* Optional. Additional data about the contact in the form of 
        a vCard, 0-2048 bytes */
        vcard               : Option[String]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup         : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        contact */
        inputMessageContent : Option[InputMessageContent]
        /* Optional. Url of the thumbnail for the result */
        thumbnailUrl        : Option[String]
        /* Optional. Thumbnail width */
        thumbnailWidth      : Option[Int]
        /* Optional. Thumbnail height */
        thumbnailHeight     : Option[Int]
      }
             
      /* Represents a link to a photo. By default, this photo will be sent by the user 
        with optional caption. Alternatively, you can use input_message_content to send 
        a message with the specified content instead of the photo.  */
      InlineQueryResultPhoto {
        type : "photo:3"
        /* Unique identifier for this result, 1-64 bytes */
        id                    : String
        /* A valid URL of the photo. Photo must be in JPEG format. 
        Photo size must not exceed 5MB */
        photoUrl              : String
        /* URL of the thumbnail for the photo */
        thumbnailUrl          : String
        /* Optional. Width of the photo */
        photoWidth            : Option[Int]
        /* Optional. Height of the photo */
        photoHeight           : Option[Int]
        /* Optional. Title for the result */
        title                 : Option[String]
        /* Optional. Short description of the result */
        description           : Option[String]
        /* Optional. Caption of the photo to be sent, 0-1024 
        characters after entities parsing */
        caption               : Option[String]
        /* Optional. Mode for parsing entities in the photo caption. 
        See formatting options for more details. */
        parseMode             : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities       : List[MessageEntity]
        /* Optional. Pass True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia : Option[Boolean]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup           : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        photo */
        inputMessageContent   : Option[InputMessageContent]
      }
             
      /* Represents a link to a file. By default, this file will be sent by the user 
        with an optional caption. Alternatively, you can use input_message_content to 
        send a message with the specified content instead of the file. Currently, only 
        .PDF and .ZIP files can be sent using this method.  */
      InlineQueryResultDocument {
        type : "document:4"
        /* Unique identifier for this result, 1-64 bytes */
        id                  : String
        /* Title for the result */
        title               : String
        /* Optional. Caption of the document to be sent, 0-1024 
        characters after entities parsing */
        caption             : Option[String]
        /* Optional. Mode for parsing entities in the document 
        caption. See formatting options for more details. */
        parseMode           : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities     : List[MessageEntity]
        /* A valid URL for the file */
        documentUrl         : String
        /* MIME type of the content of the file, either 
        ‚Äúapplication/pdf‚Äù or ‚Äúapplication/zip‚Äù */
        mimeType            : String
        /* Optional. Short description of the result */
        description         : Option[String]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup         : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        file */
        inputMessageContent : Option[InputMessageContent]
        /* Optional. URL of the thumbnail (JPEG only) for the file */
        thumbnailUrl        : Option[String]
        /* Optional. Thumbnail width */
        thumbnailWidth      : Option[Int]
        /* Optional. Thumbnail height */
        thumbnailHeight     : Option[Int]
      }
             
      /* Represents a link to a voice message stored on the Telegram servers. By 
        default, this voice message will be sent by the user. Alternatively, you can use 
        input_message_content to send a message with the specified content instead of 
        the voice message.  */
      InlineQueryResultCachedVoice {
        type : "voice:5"
        /* Unique identifier for this result, 1-64 bytes */
        id                  : String
        /* A valid file identifier for the voice message */
        voiceFileId         : String
        /* Voice message title */
        title               : String
        /* Optional. Caption, 0-1024 characters after entities parsing */
        caption             : Option[String]
        /* Optional. Mode for parsing entities in the voice message 
        caption. See formatting options for more details. */
        parseMode           : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities     : List[MessageEntity]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup         : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        voice message */
        inputMessageContent : Option[InputMessageContent]
      }
             
      /* Represents a link to an article or web page.  */
      InlineQueryResultArticle {
        type : "article:6"
        /* Unique identifier for this result, 1-64 Bytes */
        id                  : String
        /* Title of the result */
        title               : String
        /* Content of the message to be sent */
        inputMessageContent : InputMessageContent
        /* Optional. Inline keyboard attached to the message */
        replyMarkup         : Option[InlineKeyboardMarkup]
        /* Optional. URL of the result */
        url                 : Option[String]
        /* Optional. Short description of the result */
        description         : Option[String]
        /* Optional. Url of the thumbnail for the result */
        thumbnailUrl        : Option[String]
        /* Optional. Thumbnail width */
        thumbnailWidth      : Option[Int]
        /* Optional. Thumbnail height */
        thumbnailHeight     : Option[Int]
      }
             
      /* Represents a link to an MP3 audio file. By default, this audio file will be 
        sent by the user. Alternatively, you can use input_message_content to send a 
        message with the specified content instead of the audio.  */
      InlineQueryResultAudio {
        type : "audio:7"
        /* Unique identifier for this result, 1-64 bytes */
        id                  : String
        /* A valid URL for the audio file */
        audioUrl            : String
        /* Title */
        title               : String
        /* Optional. Caption, 0-1024 characters after entities parsing */
        caption             : Option[String]
        /* Optional. Mode for parsing entities in the audio caption. 
        See formatting options for more details. */
        parseMode           : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities     : List[MessageEntity]
        /* Optional. Performer */
        performer           : Option[String]
        /* Optional. Audio duration in seconds */
        audioDuration       : Option[Int]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup         : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        audio */
        inputMessageContent : Option[InputMessageContent]
      }
             
      /* Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). 
        By default, this animated MPEG-4 file will be sent by the user with optional 
        caption. Alternatively, you can use input_message_content to send a message with 
        the specified content instead of the animation.  */
      InlineQueryResultMpeg4Gif {
        type : "mpeg4_gif:8"
        /* Unique identifier for this result, 1-64 bytes */
        id                    : String
        /* A valid URL for the MPEG4 file */
        mpeg4Url              : String
        /* Optional. Video width */
        mpeg4Width            : Option[Int]
        /* Optional. Video height */
        mpeg4Height           : Option[Int]
        /* Optional. Video duration in seconds */
        mpeg4Duration         : Option[Int]
        /* URL of the static (JPEG or GIF) or animated (MPEG4) 
        thumbnail for the result */
        thumbnailUrl          : String
        /* Optional. MIME type of the thumbnail, must be one of 
        ‚Äúimage/jpeg‚Äù, ‚Äúimage/gif‚Äù, or ‚Äúvideo/mp4‚Äù. Defaults to 
        ‚Äúimage/jpeg‚Äù */
        thumbnailMimeType     : Option[String]
        /* Optional. Title for the result */
        title                 : Option[String]
        /* Optional. Caption of the MPEG-4 file to be sent, 0-1024 
        characters after entities parsing */
        caption               : Option[String]
        /* Optional. Mode for parsing entities in the caption. See 
        formatting options for more details. */
        parseMode             : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities       : List[MessageEntity]
        /* Optional. Pass True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia : Option[Boolean]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup           : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        video animation */
        inputMessageContent   : Option[InputMessageContent]
      }
             
      /* Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) 
        stored on the Telegram servers. By default, this animated MPEG-4 file will be 
        sent by the user with an optional caption. Alternatively, you can use 
        input_message_content to send a message with the specified content instead of 
        the animation.  */
      InlineQueryResultCachedMpeg4Gif {
        type : "mpeg4_gif:9"
        /* Unique identifier for this result, 1-64 bytes */
        id                    : String
        /* A valid file identifier for the MPEG4 file */
        mpeg4FileId           : String
        /* Optional. Title for the result */
        title                 : Option[String]
        /* Optional. Caption of the MPEG-4 file to be sent, 0-1024 
        characters after entities parsing */
        caption               : Option[String]
        /* Optional. Mode for parsing entities in the caption. See 
        formatting options for more details. */
        parseMode             : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities       : List[MessageEntity]
        /* Optional. Pass True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia : Option[Boolean]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup           : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        video animation */
        inputMessageContent   : Option[InputMessageContent]
      }
             
      /* Represents a link to a file stored on the Telegram servers. By default, this 
        file will be sent by the user with an optional caption. Alternatively, you can 
        use input_message_content to send a message with the specified content instead 
        of the file.  */
      InlineQueryResultCachedDocument {
        type : "document:10"
        /* Unique identifier for this result, 1-64 bytes */
        id                  : String
        /* Title for the result */
        title               : String
        /* A valid file identifier for the file */
        documentFileId      : String
        /* Optional. Short description of the result */
        description         : Option[String]
        /* Optional. Caption of the document to be sent, 0-1024 
        characters after entities parsing */
        caption             : Option[String]
        /* Optional. Mode for parsing entities in the document 
        caption. See formatting options for more details. */
        parseMode           : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities     : List[MessageEntity]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup         : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        file */
        inputMessageContent : Option[InputMessageContent]
      }
             
      /* Represents a link to a video file stored on the Telegram servers. By default, 
        this video file will be sent by the user with an optional caption. 
        Alternatively, you can use input_message_content to send a message with the 
        specified content instead of the video.  */
      InlineQueryResultCachedVideo {
        type : "video:11"
        /* Unique identifier for this result, 1-64 bytes */
        id                    : String
        /* A valid file identifier for the video file */
        videoFileId           : String
        /* Title for the result */
        title                 : String
        /* Optional. Short description of the result */
        description           : Option[String]
        /* Optional. Caption of the video to be sent, 0-1024 
        characters after entities parsing */
        caption               : Option[String]
        /* Optional. Mode for parsing entities in the video caption. 
        See formatting options for more details. */
        parseMode             : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities       : List[MessageEntity]
        /* Optional. Pass True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia : Option[Boolean]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup           : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        video */
        inputMessageContent   : Option[InputMessageContent]
      }
             
      /* Represents a Game.  */
      InlineQueryResultGame {
        type : "game:12"
        /* Unique identifier for this result, 1-64 bytes */
        id            : String
        /* Short name of the game */
        gameShortName : String
        /* Optional. Inline keyboard attached to the message */
        replyMarkup   : Option[InlineKeyboardMarkup]
      }
             
      /* Represents a link to a photo stored on the Telegram servers. By default, this 
        photo will be sent by the user with an optional caption. Alternatively, you can 
        use input_message_content to send a message with the specified content instead 
        of the photo.  */
      InlineQueryResultCachedPhoto {
        type : "photo:13"
        /* Unique identifier for this result, 1-64 bytes */
        id                    : String
        /* A valid file identifier of the photo */
        photoFileId           : String
        /* Optional. Title for the result */
        title                 : Option[String]
        /* Optional. Short description of the result */
        description           : Option[String]
        /* Optional. Caption of the photo to be sent, 0-1024 
        characters after entities parsing */
        caption               : Option[String]
        /* Optional. Mode for parsing entities in the photo caption. 
        See formatting options for more details. */
        parseMode             : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities       : List[MessageEntity]
        /* Optional. Pass True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia : Option[Boolean]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup           : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        photo */
        inputMessageContent   : Option[InputMessageContent]
      }
             
      /* Represents a link to a sticker stored on the Telegram servers. By default, this 
        sticker will be sent by the user. Alternatively, you can use 
        input_message_content to send a message with the specified content instead of 
        the sticker.  */
      InlineQueryResultCachedSticker {
        type : "sticker:14"
        /* Unique identifier for this result, 1-64 bytes */
        id                  : String
        /* A valid file identifier of the sticker */
        stickerFileId       : String
        /* Optional. Inline keyboard attached to the message */
        replyMarkup         : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        sticker */
        inputMessageContent : Option[InputMessageContent]
      }
             
      /* Represents a link to a page containing an embedded video player or a video 
        file. By default, this video file will be sent by the user with an optional 
        caption. Alternatively, you can use input_message_content to send a message with 
        the specified content instead of the video.  */
      InlineQueryResultVideo {
        type : "video:15"
        /* Unique identifier for this result, 1-64 bytes */
        id                    : String
        /* A valid URL for the embedded video player or video file */
        videoUrl              : String
        /* MIME type of the content of the video URL, ‚Äútext/html‚Äù or 
        ‚Äúvideo/mp4‚Äù */
        mimeType              : String
        /* URL of the thumbnail (JPEG only) for the video */
        thumbnailUrl          : String
        /* Title for the result */
        title                 : String
        /* Optional. Caption of the video to be sent, 0-1024 
        characters after entities parsing */
        caption               : Option[String]
        /* Optional. Mode for parsing entities in the video caption. 
        See formatting options for more details. */
        parseMode             : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities       : List[MessageEntity]
        /* Optional. Pass True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia : Option[Boolean]
        /* Optional. Video width */
        videoWidth            : Option[Int]
        /* Optional. Video height */
        videoHeight           : Option[Int]
        /* Optional. Video duration in seconds */
        videoDuration         : Option[Int]
        /* Optional. Short description of the result */
        description           : Option[String]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup           : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        video. This field is required if InlineQueryResultVideo is 
        used to send an HTML-page as a result (e.g., a YouTube 
        video). */
        inputMessageContent   : Option[InputMessageContent]
      }
             
      /* Represents a link to an MP3 audio file stored on the Telegram servers. By 
        default, this audio file will be sent by the user. Alternatively, you can use 
        input_message_content to send a message with the specified content instead of 
        the audio.  */
      InlineQueryResultCachedAudio {
        type : "audio:16"
        /* Unique identifier for this result, 1-64 bytes */
        id                  : String
        /* A valid file identifier for the audio file */
        audioFileId         : String
        /* Optional. Caption, 0-1024 characters after entities parsing */
        caption             : Option[String]
        /* Optional. Mode for parsing entities in the audio caption. 
        See formatting options for more details. */
        parseMode           : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities     : List[MessageEntity]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup         : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        audio */
        inputMessageContent : Option[InputMessageContent]
      }
             
      /* Represents a location on a map. By default, the location will be sent by the 
        user. Alternatively, you can use input_message_content to send a message with 
        the specified content instead of the location.  */
      InlineQueryResultLocation {
        type : "location:17"
        /* Unique identifier for this result, 1-64 Bytes */
        id                   : String
        /* Location latitude in degrees */
        latitude             : Float
        /* Location longitude in degrees */
        longitude            : Float
        /* Location title */
        title                : String
        /* Optional. The radius of uncertainty for the location, 
        measured in meters; 0-1500 */
        horizontalAccuracy   : Option[Float]
        /* Optional. Period in seconds during which the location can 
        be updated, should be between 60 and 86400, or 0x7FFFFFFF 
        for live locations that can be edited indefinitely. */
        livePeriod           : Option[Int]
        /* Optional. For live locations, a direction in which the user 
        is moving, in degrees. Must be between 1 and 360 if 
        specified. */
        heading              : Option[Int]
        /* Optional. For live locations, a maximum distance for 
        proximity alerts about approaching another chat member, in 
        meters. Must be between 1 and 100000 if specified. */
        proximityAlertRadius : Option[Int]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup          : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        location */
        inputMessageContent  : Option[InputMessageContent]
        /* Optional. Url of the thumbnail for the result */
        thumbnailUrl         : Option[String]
        /* Optional. Thumbnail width */
        thumbnailWidth       : Option[Int]
        /* Optional. Thumbnail height */
        thumbnailHeight      : Option[Int]
      }
             
      /* Represents a link to an animated GIF file stored on the Telegram servers. By 
        default, this animated GIF file will be sent by the user with an optional 
        caption. Alternatively, you can use input_message_content to send a message with 
        specified content instead of the animation.  */
      InlineQueryResultCachedGif {
        type : "gif:18"
        /* Unique identifier for this result, 1-64 bytes */
        id                    : String
        /* A valid file identifier for the GIF file */
        gifFileId             : String
        /* Optional. Title for the result */
        title                 : Option[String]
        /* Optional. Caption of the GIF file to be sent, 0-1024 
        characters after entities parsing */
        caption               : Option[String]
        /* Optional. Mode for parsing entities in the caption. See 
        formatting options for more details. */
        parseMode             : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities       : List[MessageEntity]
        /* Optional. Pass True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia : Option[Boolean]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup           : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        GIF animation */
        inputMessageContent   : Option[InputMessageContent]
      }
             
      /* Represents a link to a voice recording in an .OGG container encoded with OPUS. 
        By default, this voice recording will be sent by the user. Alternatively, you 
        can use input_message_content to send a message with the specified content 
        instead of the the voice message.  */
      InlineQueryResultVoice {
        type : "voice:19"
        /* Unique identifier for this result, 1-64 bytes */
        id                  : String
        /* A valid URL for the voice recording */
        voiceUrl            : String
        /* Recording title */
        title               : String
        /* Optional. Caption, 0-1024 characters after entities parsing */
        caption             : Option[String]
        /* Optional. Mode for parsing entities in the voice message 
        caption. See formatting options for more details. */
        parseMode           : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities     : List[MessageEntity]
        /* Optional. Recording duration in seconds */
        voiceDuration       : Option[Int]
        /* Optional. Inline keyboard attached to the message */
        replyMarkup         : Option[InlineKeyboardMarkup]
        /* Optional. Content of the message to be sent instead of the 
        voice recording */
        inputMessageContent : Option[InputMessageContent]
      }
             
    }
          
    enum InputMedia {
    
      /* Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to 
        be sent.  */
      InputMediaAnimation {
        type : "animation:0"
        /* File to send. Pass a file_id to send a file that exists on 
        the Telegram servers (recommended), pass an HTTP URL for 
        Telegram to get a file from the Internet, or pass 
        ‚Äúattach://<file_attach_name>‚Äù to upload a new one using 
        multipart/form-data under <file_attach_name> name. */
        media                 : IFile
        /* Optional. Thumbnail of the file sent; can be ignored if 
        thumbnail generation for the file is supported server-side. 
        The thumbnail should be in JPEG format and less than 200 kB 
        in size. A thumbnail's width and height should not exceed 
        320. Ignored if the file is not uploaded using 
        multipart/form-data. Thumbnails can't be reused and can be 
        only uploaded as a new file, so you can pass 
        ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded 
        using multipart/form-data under <file_attach_name>. */
        thumbnail             : Option[IFile]
        /* Optional. Caption of the animation to be sent, 0-1024 
        characters after entities parsing */
        caption               : Option[String]
        /* Optional. Mode for parsing entities in the animation 
        caption. See formatting options for more details. */
        parseMode             : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities       : List[MessageEntity]
        /* Optional. Pass True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia : Option[Boolean]
        /* Optional. Animation width */
        width                 : Option[Int]
        /* Optional. Animation height */
        height                : Option[Int]
        /* Optional. Animation duration in seconds */
        duration              : Option[Int]
        /* Optional. Pass True if the animation needs to be covered 
        with a spoiler animation */
        hasSpoiler            : Option[Boolean]
      }
             
      /* Represents a photo to be sent.  */
      InputMediaPhoto {
        type : "photo:1"
        /* File to send. Pass a file_id to send a file that exists on 
        the Telegram servers (recommended), pass an HTTP URL for 
        Telegram to get a file from the Internet, or pass 
        ‚Äúattach://<file_attach_name>‚Äù to upload a new one using 
        multipart/form-data under <file_attach_name> name. */
        media                 : IFile
        /* Optional. Caption of the photo to be sent, 0-1024 
        characters after entities parsing */
        caption               : Option[String]
        /* Optional. Mode for parsing entities in the photo caption. 
        See formatting options for more details. */
        parseMode             : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities       : List[MessageEntity]
        /* Optional. Pass True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia : Option[Boolean]
        /* Optional. Pass True if the photo needs to be covered with a 
        spoiler animation */
        hasSpoiler            : Option[Boolean]
      }
             
      /* Represents a video to be sent.  */
      InputMediaVideo {
        type : "video:2"
        /* File to send. Pass a file_id to send a file that exists on 
        the Telegram servers (recommended), pass an HTTP URL for 
        Telegram to get a file from the Internet, or pass 
        ‚Äúattach://<file_attach_name>‚Äù to upload a new one using 
        multipart/form-data under <file_attach_name> name. */
        media                 : IFile
        /* Optional. Thumbnail of the file sent; can be ignored if 
        thumbnail generation for the file is supported server-side. 
        The thumbnail should be in JPEG format and less than 200 kB 
        in size. A thumbnail's width and height should not exceed 
        320. Ignored if the file is not uploaded using 
        multipart/form-data. Thumbnails can't be reused and can be 
        only uploaded as a new file, so you can pass 
        ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded 
        using multipart/form-data under <file_attach_name>. */
        thumbnail             : Option[IFile]
        /* Optional. Cover for the video in the message. Pass a 
        file_id to send a file that exists on the Telegram servers 
        (recommended), pass an HTTP URL for Telegram to get a file 
        from the Internet, or pass ‚Äúattach://<file_attach_name>‚Äù to 
        upload a new one using multipart/form-data under 
        <file_attach_name> name. */
        cover                 : Option[IFile]
        /* Optional. Start timestamp for the video in the message */
        startTimestamp        : Option[Int]
        /* Optional. Caption of the video to be sent, 0-1024 
        characters after entities parsing */
        caption               : Option[String]
        /* Optional. Mode for parsing entities in the video caption. 
        See formatting options for more details. */
        parseMode             : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities       : List[MessageEntity]
        /* Optional. Pass True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia : Option[Boolean]
        /* Optional. Video width */
        width                 : Option[Int]
        /* Optional. Video height */
        height                : Option[Int]
        /* Optional. Video duration in seconds */
        duration              : Option[Int]
        /* Optional. Pass True if the uploaded video is suitable for 
        streaming */
        supportsStreaming     : Option[Boolean]
        /* Optional. Pass True if the video needs to be covered with a 
        spoiler animation */
        hasSpoiler            : Option[Boolean]
      }
             
      /* Represents a general file to be sent.  */
      InputMediaDocument {
        type : "document:3"
        /* File to send. Pass a file_id to send a file that exists on 
        the Telegram servers (recommended), pass an HTTP URL for 
        Telegram to get a file from the Internet, or pass 
        ‚Äúattach://<file_attach_name>‚Äù to upload a new one using 
        multipart/form-data under <file_attach_name> name. */
        media                       : IFile
        /* Optional. Thumbnail of the file sent; can be ignored if 
        thumbnail generation for the file is supported server-side. 
        The thumbnail should be in JPEG format and less than 200 kB 
        in size. A thumbnail's width and height should not exceed 
        320. Ignored if the file is not uploaded using 
        multipart/form-data. Thumbnails can't be reused and can be 
        only uploaded as a new file, so you can pass 
        ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded 
        using multipart/form-data under <file_attach_name>. */
        thumbnail                   : Option[IFile]
        /* Optional. Caption of the document to be sent, 0-1024 
        characters after entities parsing */
        caption                     : Option[String]
        /* Optional. Mode for parsing entities in the document 
        caption. See formatting options for more details. */
        parseMode                   : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities             : List[MessageEntity]
        /* Optional. Disables automatic server-side content type 
        detection for files uploaded using multipart/form-data. 
        Always True, if the document is sent as part of an album. */
        disableContentTypeDetection : Option[Boolean]
      }
             
      /* Represents an audio file to be treated as music to be sent.  */
      InputMediaAudio {
        type : "audio:4"
        /* File to send. Pass a file_id to send a file that exists on 
        the Telegram servers (recommended), pass an HTTP URL for 
        Telegram to get a file from the Internet, or pass 
        ‚Äúattach://<file_attach_name>‚Äù to upload a new one using 
        multipart/form-data under <file_attach_name> name. */
        media           : IFile
        /* Optional. Thumbnail of the file sent; can be ignored if 
        thumbnail generation for the file is supported server-side. 
        The thumbnail should be in JPEG format and less than 200 kB 
        in size. A thumbnail's width and height should not exceed 
        320. Ignored if the file is not uploaded using 
        multipart/form-data. Thumbnails can't be reused and can be 
        only uploaded as a new file, so you can pass 
        ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded 
        using multipart/form-data under <file_attach_name>. */
        thumbnail       : Option[IFile]
        /* Optional. Caption of the audio to be sent, 0-1024 
        characters after entities parsing */
        caption         : Option[String]
        /* Optional. Mode for parsing entities in the audio caption. 
        See formatting options for more details. */
        parseMode       : Option[ParseMode]
        /* Optional. List of special entities that appear in the 
        caption, which can be specified instead of parse_mode */
        captionEntities : List[MessageEntity]
        /* Optional. Duration of the audio in seconds */
        duration        : Option[Int]
        /* Optional. Performer of the audio */
        performer       : Option[String]
        /* Optional. Title of the audio */
        title           : Option[String]
      }
             
    }
          
    enum InputMessageContent {
    
      /* Represents the content of a venue message to be sent as the result of an inline 
        query.  */
      InputVenueMessageContent {
        /* Latitude of the venue in degrees */
        latitude        : Float
        /* Longitude of the venue in degrees */
        longitude       : Float
        /* Name of the venue */
        title           : String
        /* Address of the venue */
        address         : String
        /* Optional. Foursquare identifier of the venue, if known */
        foursquareId    : Option[String]
        /* Optional. Foursquare type of the venue, if known. (For 
        example, ‚Äúarts_entertainment/default‚Äù, 
        ‚Äúarts_entertainment/aquarium‚Äù or ‚Äúfood/icecream‚Äù.) */
        foursquareType  : Option[String]
        /* Optional. Google Places identifier of the venue */
        googlePlaceId   : Option[String]
        /* Optional. Google Places type of the venue. (See supported 
        types.) */
        googlePlaceType : Option[String]
      }
             
      /* Represents the content of an invoice message to be sent as the result of an 
        inline query.  */
      InputInvoiceMessageContent {
        /* Product name, 1-32 characters */
        title                     : String
        /* Product description, 1-255 characters */
        description               : String
        /* Bot-defined invoice payload, 1-128 bytes. This will not be 
        displayed to the user, use it for your internal processes. */
        payload                   : String
        /* Optional. Payment provider token, obtained via 
        &#064;BotFather. Pass an empty string for payments in 
        Telegram Stars. */
        providerToken             : Option[String]
        /* Three-letter ISO 4217 currency code, see more on 
        currencies. Pass ‚ÄúXTR‚Äù for payments in Telegram Stars. */
        currency                  : String
        /* Price breakdown, a JSON-serialized list of components (e.g. 
        product price, tax, discount, delivery cost, delivery tax, 
        bonus, etc.). Must contain exactly one item for payments in 
        Telegram Stars. */
        prices                    : List[LabeledPrice]
        /* Optional. The maximum accepted amount for tips in the 
        smallest units of the currency (integer, not float/double). 
        For example, for a maximum tip of US$ 1.45 pass 
        max_tip_amount = 145. See the exp parameter in 
        currencies.json, it shows the number of digits past the 
        decimal point for each currency (2 for the majority of 
        currencies). Defaults to 0. Not supported for payments in 
        Telegram Stars. */
        maxTipAmount              : Option[Int]
        /* Optional. A JSON-serialized array of suggested amounts of 
        tip in the smallest units of the currency (integer, not 
        float/double). At most 4 suggested tip amounts can be 
        specified. The suggested tip amounts must be positive, 
        passed in a strictly increased order and must not exceed 
        max_tip_amount. */
        suggestedTipAmounts       : List[Int]
        /* Optional. A JSON-serialized object for data about the 
        invoice, which will be shared with the payment provider. A 
        detailed description of the required fields should be 
        provided by the payment provider. */
        providerData              : Option[String]
        /* Optional. URL of the product photo for the invoice. Can be 
        a photo of the goods or a marketing image for a service. */
        photoUrl                  : Option[String]
        /* Optional. Photo size in bytes */
        photoSize                 : Option[Long]
        /* Optional. Photo width */
        photoWidth                : Option[Int]
        /* Optional. Photo height */
        photoHeight               : Option[Int]
        /* Optional. Pass True if you require the user's full name to 
        complete the order. Ignored for payments in Telegram Stars. */
        needName                  : Option[Boolean]
        /* Optional. Pass True if you require the user's phone number 
        to complete the order. Ignored for payments in Telegram 
        Stars. */
        needPhoneNumber           : Option[Boolean]
        /* Optional. Pass True if you require the user's email address 
        to complete the order. Ignored for payments in Telegram 
        Stars. */
        needEmail                 : Option[Boolean]
        /* Optional. Pass True if you require the user's shipping 
        address to complete the order. Ignored for payments in 
        Telegram Stars. */
        needShippingAddress       : Option[Boolean]
        /* Optional. Pass True if the user's phone number should be 
        sent to the provider. Ignored for payments in Telegram 
        Stars. */
        sendPhoneNumberToProvider : Option[Boolean]
        /* Optional. Pass True if the user's email address should be 
        sent to the provider. Ignored for payments in Telegram 
        Stars. */
        sendEmailToProvider       : Option[Boolean]
        /* Optional. Pass True if the final price depends on the 
        shipping method. Ignored for payments in Telegram Stars. */
        isFlexible                : Option[Boolean]
      }
             
      /* Represents the content of a contact message to be sent as the result of an 
        inline query.  */
      InputContactMessageContent {
        /* Contact's phone number */
        phoneNumber : String
        /* Contact's first name */
        firstName   : String
        /* Optional. Contact's last name */
        lastName    : Option[String]
        /* Optional. Additional data about the contact in the form of 
        a vCard, 0-2048 bytes */
        vcard       : Option[String]
      }
             
      /* Represents the content of a location message to be sent as the result of an 
        inline query.  */
      InputLocationMessageContent {
        /* Latitude of the location in degrees */
        latitude             : Float
        /* Longitude of the location in degrees */
        longitude            : Float
        /* Optional. The radius of uncertainty for the location, 
        measured in meters; 0-1500 */
        horizontalAccuracy   : Option[Float]
        /* Optional. Period in seconds during which the location can 
        be updated, should be between 60 and 86400, or 0x7FFFFFFF 
        for live locations that can be edited indefinitely. */
        livePeriod           : Option[Int]
        /* Optional. For live locations, a direction in which the user 
        is moving, in degrees. Must be between 1 and 360 if 
        specified. */
        heading              : Option[Int]
        /* Optional. For live locations, a maximum distance for 
        proximity alerts about approaching another chat member, in 
        meters. Must be between 1 and 100000 if specified. */
        proximityAlertRadius : Option[Int]
      }
             
      /* Represents the content of a text message to be sent as the result of an inline 
        query.  */
      InputTextMessageContent {
        /* Text of the message to be sent, 1-4096 characters */
        messageText        : String
        /* Optional. Mode for parsing entities in the message text. 
        See formatting options for more details. */
        parseMode          : Option[ParseMode]
        /* Optional. List of special entities that appear in message 
        text, which can be specified instead of parse_mode */
        entities           : List[MessageEntity]
        /* Optional. Link preview generation options for the message */
        linkPreviewOptions : Option[LinkPreviewOptions]
      }
             
    }
          
    enum InputPaidMedia {
    
      /* The paid media to send is a photo.  */
      InputPaidMediaPhoto {
        type : "photo:0"
        /* File to send. Pass a file_id to send a file that exists on 
        the Telegram servers (recommended), pass an HTTP URL for 
        Telegram to get a file from the Internet, or pass 
        ‚Äúattach://<file_attach_name>‚Äù to upload a new one using 
        multipart/form-data under <file_attach_name> name. */
        media : IFile
      }
             
      /* The paid media to send is a video.  */
      InputPaidMediaVideo {
        type : "video:1"
        /* File to send. Pass a file_id to send a file that exists on 
        the Telegram servers (recommended), pass an HTTP URL for 
        Telegram to get a file from the Internet, or pass 
        ‚Äúattach://<file_attach_name>‚Äù to upload a new one using 
        multipart/form-data under <file_attach_name> name. */
        media             : IFile
        /* Optional. Thumbnail of the file sent; can be ignored if 
        thumbnail generation for the file is supported server-side. 
        The thumbnail should be in JPEG format and less than 200 kB 
        in size. A thumbnail's width and height should not exceed 
        320. Ignored if the file is not uploaded using 
        multipart/form-data. Thumbnails can't be reused and can be 
        only uploaded as a new file, so you can pass 
        ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded 
        using multipart/form-data under <file_attach_name>. */
        thumbnail         : Option[IFile]
        /* Optional. Cover for the video in the message. Pass a 
        file_id to send a file that exists on the Telegram servers 
        (recommended), pass an HTTP URL for Telegram to get a file 
        from the Internet, or pass ‚Äúattach://<file_attach_name>‚Äù to 
        upload a new one using multipart/form-data under 
        <file_attach_name> name. */
        cover             : Option[IFile]
        /* Optional. Start timestamp for the video in the message */
        startTimestamp    : Option[Int]
        /* Optional. Video width */
        width             : Option[Int]
        /* Optional. Video height */
        height            : Option[Int]
        /* Optional. Video duration in seconds */
        duration          : Option[Int]
        /* Optional. Pass True if the uploaded video is suitable for 
        streaming */
        supportsStreaming : Option[Boolean]
      }
             
    }
          
    enum InputProfilePhoto {
    
      /* An animated profile photo in the MPEG4 format.  */
      InputProfilePhotoAnimated {
        type : "animated:0"
        /* The animated profile photo. Profile photos can't be reused 
        and can only be uploaded as a new file, so you can pass 
        ‚Äúattach://<file_attach_name>‚Äù if the photo was uploaded 
        using multipart/form-data under <file_attach_name>. */
        animation          : IFile
        /* Optional. Timestamp in seconds of the frame that will be 
        used as the static profile photo. Defaults to 0.0. */
        mainFrameTimestamp : Option[Float]
      }
             
      /* A static profile photo in the .JPG format.  */
      InputProfilePhotoStatic {
        type : "static:1"
        /* The static profile photo. Profile photos can't be reused 
        and can only be uploaded as a new file, so you can pass 
        ‚Äúattach://<file_attach_name>‚Äù if the photo was uploaded 
        using multipart/form-data under <file_attach_name>. */
        photo : IFile
      }
             
    }
          
    enum InputStoryContent {
    
      /* Describes a photo to post as a story.  */
      InputStoryContentPhoto {
        type : "photo:0"
        /* The photo to post as a story. The photo must be of the size 
        1080x1920 and must not exceed 10 MB. The photo can't be 
        reused and can only be uploaded as a new file, so you can 
        pass ‚Äúattach://<file_attach_name>‚Äù if the photo was uploaded 
        using multipart/form-data under <file_attach_name>. */
        photo : IFile
      }
             
      /* Describes a video to post as a story.  */
      InputStoryContentVideo {
        type : "video:1"
        /* The video to post as a story. The video must be of the size 
        720x1280, streamable, encoded with H.265 codec, with key 
        frames added each second in the MPEG4 format, and must not 
        exceed 30 MB. The video can't be reused and can only be 
        uploaded as a new file, so you can pass 
        ‚Äúattach://<file_attach_name>‚Äù if the video was uploaded 
        using multipart/form-data under <file_attach_name>. */
        video               : IFile
        /* Optional. Precise duration of the video in seconds; 0-60 */
        duration            : Option[Float]
        /* Optional. Timestamp in seconds of the frame that will be 
        used as the static cover for the story. Defaults to 0.0. */
        coverFrameTimestamp : Option[Float]
        /* Optional. Pass True if the video has no sound */
        isAnimation         : Option[Boolean]
      }
             
    }
          
    enum MaybeInaccessibleMessage {
    
      /* This object represents a message.  */
      Message {
        /* Unique message identifier inside this chat. In specific 
        instances (e.g., message containing a video sent to a big 
        chat), the server might automatically schedule a message 
        instead of sending it immediately. In such cases, this field 
        will be 0 and the relevant message will be unusable until it 
        is actually sent */
        messageId                     : Int
        /* Optional. Unique identifier of a message thread to which 
        the message belongs; for supergroups only */
        messageThreadId               : Option[Int]
        /* Optional. Sender of the message; may be empty for messages 
        sent to channels. For backward compatibility, if the message 
        was sent on behalf of a chat, the field contains a fake 
        sender user in non-channel chats */
        from                          : Option[User]
        /* Optional. Sender of the message when sent on behalf of a 
        chat. For example, the supergroup itself for messages sent 
        by its anonymous administrators or a linked channel for 
        messages automatically forwarded to the channel's discussion 
        group. For backward compatibility, if the message was sent 
        on behalf of a chat, the field from contains a fake sender 
        user in non-channel chats. */
        senderChat                    : Option[Chat]
        /* Optional. If the sender of the message boosted the chat, 
        the number of boosts added by the user */
        senderBoostCount              : Option[Int]
        /* Optional. The bot that actually sent the message on behalf 
        of the business account. Available only for outgoing 
        messages sent on behalf of the connected business account. */
        senderBusinessBot             : Option[User]
        /* Date the message was sent in Unix time. It is always a 
        positive number, representing a valid date. */
        date                          : Int
        /* Optional. Unique identifier of the business connection from 
        which the message was received. If non-empty, the message 
        belongs to a chat of the corresponding business account that 
        is independent from any potential bot chat which might share 
        the same identifier. */
        businessConnectionId          : Option[String]
        /* Chat the message belongs to */
        chat                          : Chat
        /* Optional. Information about the original message for 
        forwarded messages */
        forwardOrigin                 : Option[MessageOrigin]
        /* Optional. True, if the message is sent to a forum topic */
        isTopicMessage                : Option[Boolean]
        /* Optional. True, if the message is a channel post that was 
        automatically forwarded to the connected discussion group */
        isAutomaticForward            : Option[Boolean]
        /* Optional. For replies in the same chat and message thread, 
        the original message. Note that the Message object in this 
        field will not contain further reply_to_message fields even 
        if it itself is a reply. */
        replyToMessage                : Option[Message]
        /* Optional. Information about the message that is being 
        replied to, which may come from another chat or forum topic */
        externalReply                 : Option[ExternalReplyInfo]
        /* Optional. For replies that quote part of the original 
        message, the quoted part of the message */
        quote                         : Option[TextQuote]
        /* Optional. For replies to a story, the original story */
        replyToStory                  : Option[Story]
        /* Optional. Bot through which the message was sent */
        viaBot                        : Option[User]
        /* Optional. Date the message was last edited in Unix time */
        editDate                      : Option[Int]
        /* Optional. True, if the message can't be forwarded */
        hasProtectedContent           : Option[Boolean]
        /* Optional. True, if the message was sent by an implicit 
        action, for example, as an away or a greeting business 
        message, or as a scheduled message */
        isFromOffline                 : Option[Boolean]
        /* Optional. The unique identifier of a media message group 
        this message belongs to */
        mediaGroupId                  : Option[String]
        /* Optional. Signature of the post author for messages in 
        channels, or the custom title of an anonymous group 
        administrator */
        authorSignature               : Option[String]
        /* Optional. The number of Telegram Stars that were paid by 
        the sender of the message to send it */
        paidStarCount                 : Option[Int]
        /* Optional. For text messages, the actual UTF-8 text of the 
        message */
        text                          : Option[String]
        /* Optional. For text messages, special entities like 
        usernames, URLs, bot commands, etc. that appear in the text */
        entities                      : List[MessageEntity]
        /* Optional. Options used for link preview generation for the 
        message, if it is a text message and link preview options 
        were changed */
        linkPreviewOptions            : Option[LinkPreviewOptions]
        /* Optional. Unique identifier of the message effect added to 
        the message */
        effectId                      : Option[String]
        /* Optional. Message is an animation, information about the 
        animation. For backward compatibility, when this field is 
        set, the document field will also be set */
        animation                     : Option[Animation]
        /* Optional. Message is an audio file, information about the 
        file */
        audio                         : Option[Audio]
        /* Optional. Message is a general file, information about the 
        file */
        document                      : Option[Document]
        /* Optional. Message contains paid media; information about 
        the paid media */
        paidMedia                     : Option[PaidMediaInfo]
        /* Optional. Message is a photo, available sizes of the photo */
        photo                         : List[PhotoSize]
        /* Optional. Message is a sticker, information about the 
        sticker */
        sticker                       : Option[Sticker]
        /* Optional. Message is a forwarded story */
        story                         : Option[Story]
        /* Optional. Message is a video, information about the video */
        video                         : Option[Video]
        /* Optional. Message is a video note, information about the 
        video message */
        videoNote                     : Option[VideoNote]
        /* Optional. Message is a voice message, information about the 
        file */
        voice                         : Option[Voice]
        /* Optional. Caption for the animation, audio, document, paid 
        media, photo, video or voice */
        caption                       : Option[String]
        /* Optional. For messages with a caption, special entities 
        like usernames, URLs, bot commands, etc. that appear in the 
        caption */
        captionEntities               : List[MessageEntity]
        /* Optional. True, if the caption must be shown above the 
        message media */
        showCaptionAboveMedia         : Option[Boolean]
        /* Optional. True, if the message media is covered by a 
        spoiler animation */
        hasMediaSpoiler               : Option[Boolean]
        /* Optional. Message is a checklist */
        checklist                     : Option[Checklist]
        /* Optional. Message is a shared contact, information about 
        the contact */
        contact                       : Option[Contact]
        /* Optional. Message is a dice with random value */
        dice                          : Option[Dice]
        /* Optional. Message is a game, information about the game. */
        game                          : Option[Game]
        /* Optional. Message is a native poll, information about the 
        poll */
        poll                          : Option[Poll]
        /* Optional. Message is a venue, information about the venue. 
        For backward compatibility, when this field is set, the 
        location field will also be set */
        venue                         : Option[Venue]
        /* Optional. Message is a shared location, information about 
        the location */
        location                      : Option[Location]
        /* Optional. New members that were added to the group or 
        supergroup and information about them (the bot itself may be 
        one of these members) */
        newChatMembers                : List[User]
        /* Optional. A member was removed from the group, information 
        about them (this member may be the bot itself) */
        leftChatMember                : Option[User]
        /* Optional. A chat title was changed to this value */
        newChatTitle                  : Option[String]
        /* Optional. A chat photo was change to this value */
        newChatPhoto                  : List[PhotoSize]
        /* Optional. Service message: the chat photo was deleted */
        deleteChatPhoto               : Option[Boolean]
        /* Optional. Service message: the group has been created */
        groupChatCreated              : Option[Boolean]
        /* Optional. Service message: the supergroup has been created. 
        This field can't be received in a message coming through 
        updates, because bot can't be a member of a supergroup when 
        it is created. It can only be found in reply_to_message if 
        someone replies to a very first message in a directly 
        created supergroup. */
        supergroupChatCreated         : Option[Boolean]
        /* Optional. Service message: the channel has been created. 
        This field can't be received in a message coming through 
        updates, because bot can't be a member of a channel when it 
        is created. It can only be found in reply_to_message if 
        someone replies to a very first message in a channel. */
        channelChatCreated            : Option[Boolean]
        /* Optional. Service message: auto-delete timer settings 
        changed in the chat */
        messageAutoDeleteTimerChanged : Option[MessageAutoDeleteTimerChanged]
        /* Optional. The group has been migrated to a supergroup with 
        the specified identifier. This number may have more than 32 
        significant bits and some programming languages may have 
        difficulty/silent defects in interpreting it. But it has at 
        most 52 significant bits, so a signed 64-bit integer or 
        double-precision float type are safe for storing this 
        identifier. */
        migrateToChatId               : Option[Long]
        /* Optional. The supergroup has been migrated from a group 
        with the specified identifier. This number may have more 
        than 32 significant bits and some programming languages may 
        have difficulty/silent defects in interpreting it. But it 
        has at most 52 significant bits, so a signed 64-bit integer 
        or double-precision float type are safe for storing this 
        identifier. */
        migrateFromChatId             : Option[Long]
        /* Optional. Specified message was pinned. Note that the 
        Message object in this field will not contain further 
        reply_to_message fields even if it itself is a reply. */
        pinnedMessage                 : Option[MaybeInaccessibleMessage]
        /* Optional. Message is an invoice for a payment, information 
        about the invoice. */
        invoice                       : Option[Invoice]
        /* Optional. Message is a service message about a successful 
        payment, information about the payment. */
        successfulPayment             : Option[SuccessfulPayment]
        /* Optional. Message is a service message about a refunded 
        payment, information about the payment. */
        refundedPayment               : Option[RefundedPayment]
        /* Optional. Service message: users were shared with the bot */
        usersShared                   : Option[UsersShared]
        /* Optional. Service message: a chat was shared with the bot */
        chatShared                    : Option[ChatShared]
        /* Optional. Service message: a regular gift was sent or 
        received */
        gift                          : Option[GiftInfo]
        /* Optional. Service message: a unique gift was sent or 
        received */
        uniqueGift                    : Option[UniqueGiftInfo]
        /* Optional. The domain name of the website on which the user 
        has logged in. */
        connectedWebsite              : Option[String]
        /* Optional. Service message: the user allowed the bot to 
        write messages after adding it to the attachment or side 
        menu, launching a Web App from a link, or accepting an 
        explicit request from a Web App sent by the method 
        requestWriteAccess */
        writeAccessAllowed            : Option[WriteAccessAllowed]
        /* Optional. Telegram Passport data */
        passportData                  : Option[PassportData]
        /* Optional. Service message. A user in the chat triggered 
        another user's proximity alert while sharing Live Location. */
        proximityAlertTriggered       : Option[ProximityAlertTriggered]
        /* Optional. Service message: user boosted the chat */
        boostAdded                    : Option[ChatBoostAdded]
        /* Optional. Service message: chat background set */
        chatBackgroundSet             : Option[ChatBackground]
        /* Optional. Service message: some tasks in a checklist were 
        marked as done or not done */
        checklistTasksDone            : Option[ChecklistTasksDone]
        /* Optional. Service message: tasks were added to a checklist */
        checklistTasksAdded           : Option[ChecklistTasksAdded]
        /* Optional. Service message: the price for paid messages in 
        the corresponding direct messages chat of a channel has 
        changed */
        directMessagePriceChanged     : Option[DirectMessagePriceChanged]
        /* Optional. Service message: forum topic created */
        forumTopicCreated             : Option[ForumTopicCreated]
        /* Optional. Service message: forum topic edited */
        forumTopicEdited              : Option[ForumTopicEdited]
        /* Optional. Service message: forum topic closed */
        forumTopicClosed              : Option[ForumTopicClosed]
        /* Optional. Service message: forum topic reopened */
        forumTopicReopened            : Option[ForumTopicReopened]
        /* Optional. Service message: the 'General' forum topic hidden */
        generalForumTopicHidden       : Option[GeneralForumTopicHidden]
        /* Optional. Service message: the 'General' forum topic 
        unhidden */
        generalForumTopicUnhidden     : Option[GeneralForumTopicUnhidden]
        /* Optional. Service message: a scheduled giveaway was created */
        giveawayCreated               : Option[GiveawayCreated]
        /* Optional. The message is a scheduled giveaway message */
        giveaway                      : Option[Giveaway]
        /* Optional. A giveaway with public winners was completed */
        giveawayWinners               : Option[GiveawayWinners]
        /* Optional. Service message: a giveaway without public 
        winners was completed */
        giveawayCompleted             : Option[GiveawayCompleted]
        /* Optional. Service message: the price for paid messages has 
        changed in the chat */
        paidMessagePriceChanged       : Option[PaidMessagePriceChanged]
        /* Optional. Service message: video chat scheduled */
        videoChatScheduled            : Option[VideoChatScheduled]
        /* Optional. Service message: video chat started */
        videoChatStarted              : Option[VideoChatStarted]
        /* Optional. Service message: video chat ended */
        videoChatEnded                : Option[VideoChatEnded]
        /* Optional. Service message: new participants invited to a 
        video chat */
        videoChatParticipantsInvited  : Option[VideoChatParticipantsInvited]
        /* Optional. Service message: data sent by a Web App */
        webAppData                    : Option[WebAppData]
        /* Optional. Inline keyboard attached to the message. 
        login_url buttons are represented as ordinary url buttons. */
        replyMarkup                   : Option[InlineKeyboardMarkup]
      }
             
      /* This object describes a message that was deleted or is otherwise inaccessible 
        to the bot.  */
      InaccessibleMessage {
        /* Chat the message belonged to */
        chat      : Chat
        /* Unique message identifier inside the chat */
        messageId : Int
        /* Always 0. The field can be used to differentiate regular 
        and inaccessible messages. */
        date      : Int
      }
             
    }
          
    enum MenuButton {
    
      /* Describes that no specific value for the menu button was set.  */
      MenuButtonDefault {
        type : "default:0"
      }
             
      /* Represents a menu button, which launches a Web App.  */
      MenuButtonWebApp {
        type : "web_app:1"
        /* Text on the button */
        text   : String
        /* Description of the Web App that will be launched when the 
        user presses the button. The Web App will be able to send an 
        arbitrary message on behalf of the user using the method 
        answerWebAppQuery. Alternatively, a t.me link to a Web App 
        of the bot can be specified in the object instead of the Web 
        App's URL, in which case the Web App will be opened as if 
        the user pressed the link. */
        webApp : WebAppInfo
      }
             
      /* Represents a menu button, which opens the bot's list of commands.  */
      MenuButtonCommands {
        type : "commands:2"
      }
             
    }
          
    enum MessageEntity {
      /* Offset in UTF-16 code units to the start of the entity */
      offset : Int
      /* Length of the entity in UTF-16 code units */
      length : Int
    
      /* mention  */
      MentionMessageEntity {
        type : "mention:0"
      }
             
      /* cashtag  */
      CashtagMessageEntity {
        type : "cashtag:1"
      }
             
      /* code  */
      CodeMessageEntity {
        type : "code:2"
      }
             
      /* bot_command  */
      BotCommandMessageEntity {
        type : "bot_command:3"
      }
             
      /* custom_emoji  */
      CustomEmojiMessageEntity {
        type : "custom_emoji:4"
        /* unique identifier of the custom emoji. Use 
        getCustomEmojiStickers to get full information about the 
        sticker */
        customEmojiId : String
      }
             
      /* expandable_blockquote  */
      ExpandableBlockquoteMessageEntity {
        type : "expandable_blockquote:5"
      }
             
      /* spoiler  */
      SpoilerMessageEntity {
        type : "spoiler:6"
      }
             
      /* email  */
      EmailMessageEntity {
        type : "email:7"
      }
             
      /* blockquote  */
      BlockquoteMessageEntity {
        type : "blockquote:8"
      }
             
      /* bold  */
      BoldMessageEntity {
        type : "bold:9"
      }
             
      /* pre  */
      PreMessageEntity {
        type : "pre:10"
        /* Optional, the programming language of the entity text */
        language : Option[String]
      }
             
      /* italic  */
      ItalicMessageEntity {
        type : "italic:11"
      }
             
      /* strikethrough  */
      StrikethroughMessageEntity {
        type : "strikethrough:12"
      }
             
      /* underline  */
      UnderlineMessageEntity {
        type : "underline:13"
      }
             
      /* hashtag  */
      HashtagMessageEntity {
        type : "hashtag:14"
      }
             
      /* text_mention  */
      TextMentionMessageEntity {
        type : "text_mention:15"
        /* the mentioned user */
        user : User
      }
             
      /* url  */
      UrlMessageEntity {
        type : "url:16"
      }
             
      /* text_link  */
      TextLinkMessageEntity {
        type : "text_link:17"
        /* URL that will be opened after user taps on the text */
        url  : String
      }
             
      /* phone_number  */
      PhoneNumberMessageEntity {
        type : "phone_number:18"
      }
             
    }
          
    enum MessageOrigin {
    
      /* The message was originally sent by a known user.  */
      MessageOriginUser {
        type : "user:0"
        /* Date the message was sent originally in Unix time */
        date       : Int
        /* User that sent the message originally */
        senderUser : User
      }
             
      /* The message was originally sent to a channel chat.  */
      MessageOriginChannel {
        type : "channel:1"
        /* Date the message was sent originally in Unix time */
        date            : Int
        /* Channel chat to which the message was originally sent */
        chat            : Chat
        /* Unique message identifier inside the chat */
        messageId       : Int
        /* Optional. Signature of the original post author */
        authorSignature : Option[String]
      }
             
      /* The message was originally sent by an unknown user.  */
      MessageOriginHiddenUser {
        type : "hidden_user:2"
        /* Date the message was sent originally in Unix time */
        date           : Int
        /* Name of the user that sent the message originally */
        senderUserName : String
      }
             
      /* The message was originally sent on behalf of a chat to a group chat.  */
      MessageOriginChat {
        type : "chat:3"
        /* Date the message was sent originally in Unix time */
        date            : Int
        /* Chat that sent the message originally */
        senderChat      : Chat
        /* Optional. For messages originally sent by an anonymous chat 
        administrator, original message author signature */
        authorSignature : Option[String]
      }
             
    }
          
    enum OwnedGift {
    
      /* Describes a unique gift received and owned by a user or a chat.  */
      OwnedGiftUnique {
        type : "unique:0"
        /* Information about the unique gift */
        gift              : UniqueGift
        /* Optional. Unique identifier of the received gift for the 
        bot; for gifts received on behalf of business accounts only */
        ownedGiftId       : Option[String]
        /* Optional. Sender of the gift if it is a known user */
        senderUser        : Option[User]
        /* Date the gift was sent in Unix time */
        sendDate          : Int
        /* Optional. True, if the gift is displayed on the account's 
        profile page; for gifts received on behalf of business 
        accounts only */
        isSaved           : Option[Boolean]
        /* Optional. True, if the gift can be transferred to another 
        owner; for gifts received on behalf of business accounts 
        only */
        canBeTransferred  : Option[Boolean]
        /* Optional. Number of Telegram Stars that must be paid to 
        transfer the gift; omitted if the bot cannot transfer the 
        gift */
        transferStarCount : Option[Int]
        /* Optional. Point in time (Unix timestamp) when the gift can 
        be transferred. If it is in the past, then the gift can be 
        transferred now */
        nextTransferDate  : Option[Int]
      }
             
      /* Describes a regular gift owned by a user or a chat.  */
      OwnedGiftRegular {
        type : "regular:1"
        /* Information about the regular gift */
        gift                    : Gift
        /* Optional. Unique identifier of the gift for the bot; for 
        gifts received on behalf of business accounts only */
        ownedGiftId             : Option[String]
        /* Optional. Sender of the gift if it is a known user */
        senderUser              : Option[User]
        /* Date the gift was sent in Unix time */
        sendDate                : Int
        /* Optional. Text of the message that was added to the gift */
        text                    : Option[String]
        /* Optional. Special entities that appear in the text */
        entities                : List[MessageEntity]
        /* Optional. True, if the sender and gift text are shown only 
        to the gift receiver; otherwise, everyone will be able to 
        see them */
        isPrivate               : Option[Boolean]
        /* Optional. True, if the gift is displayed on the account's 
        profile page; for gifts received on behalf of business 
        accounts only */
        isSaved                 : Option[Boolean]
        /* Optional. True, if the gift can be upgraded to a unique 
        gift; for gifts received on behalf of business accounts only */
        canBeUpgraded           : Option[Boolean]
        /* Optional. True, if the gift was refunded and isn't 
        available anymore */
        wasRefunded             : Option[Boolean]
        /* Optional. Number of Telegram Stars that can be claimed by 
        the receiver instead of the gift; omitted if the gift cannot 
        be converted to Telegram Stars */
        convertStarCount        : Option[Int]
        /* Optional. Number of Telegram Stars that were paid by the 
        sender for the ability to upgrade the gift */
        prepaidUpgradeStarCount : Option[Int]
      }
             
    }
          
    enum PaidMedia {
    
      /* The paid media is a video.  */
      PaidMediaVideo {
        type : "video:0"
        /* The video */
        video : Video
      }
             
      /* The paid media is a photo.  */
      PaidMediaPhoto {
        type : "photo:1"
        /* The photo */
        photo : List[PhotoSize]
      }
             
      /* The paid media isn't available before the payment.  */
      PaidMediaPreview {
        type : "preview:2"
        /* Optional. Media width as defined by the sender */
        width    : Option[Int]
        /* Optional. Media height as defined by the sender */
        height   : Option[Int]
        /* Optional. Duration of the media in seconds as defined by 
        the sender */
        duration : Option[Int]
      }
             
    }
          
    enum PassportElementError {
    
      /* Represents an issue with a list of scans. The error is considered resolved when 
        the list of files containing the scans changes.  */
      PassportElementErrorFiles {
        source : "files:0"
        /* The section of the user's Telegram Passport which has the 
        issue, one of ‚Äúutility_bill‚Äù, ‚Äúbank_statement‚Äù, 
        ‚Äúrental_agreement‚Äù, ‚Äúpassport_registration‚Äù, 
        ‚Äútemporary_registration‚Äù */
        type       : String
        /* List of base64-encoded file hashes */
        fileHashes : List[String]
        /* Error message */
        message    : String
      }
             
      /* Represents an issue in one of the data fields that was provided by the user. 
        The error is considered resolved when the field's value changes.  */
      PassportElementErrorDataField {
        source : "data:1"
        /* The section of the user's Telegram Passport which has the 
        error, one of ‚Äúpersonal_details‚Äù, ‚Äúpassport‚Äù, 
        ‚Äúdriver_license‚Äù, ‚Äúidentity_card‚Äù, ‚Äúinternal_passport‚Äù, 
        ‚Äúaddress‚Äù */
        type      : String
        /* Name of the data field which has the error */
        fieldName : String
        /* Base64-encoded data hash */
        dataHash  : String
        /* Error message */
        message   : String
      }
             
      /* Represents an issue with the reverse side of a document. The error is 
        considered resolved when the file with reverse side of the document changes.  */
      PassportElementErrorReverseSide {
        source : "reverse_side:2"
        /* The section of the user's Telegram Passport which has the 
        issue, one of ‚Äúdriver_license‚Äù, ‚Äúidentity_card‚Äù */
        type     : String
        /* Base64-encoded hash of the file with the reverse side of 
        the document */
        fileHash : String
        /* Error message */
        message  : String
      }
             
      /* Represents an issue with the selfie with a document. The error is considered 
        resolved when the file with the selfie changes.  */
      PassportElementErrorSelfie {
        source : "selfie:3"
        /* The section of the user's Telegram Passport which has the 
        issue, one of ‚Äúpassport‚Äù, ‚Äúdriver_license‚Äù, ‚Äúidentity_card‚Äù, 
        ‚Äúinternal_passport‚Äù */
        type     : String
        /* Base64-encoded hash of the file with the selfie */
        fileHash : String
        /* Error message */
        message  : String
      }
             
      /* Represents an issue with the front side of a document. The error is considered 
        resolved when the file with the front side of the document changes.  */
      PassportElementErrorFrontSide {
        source : "front_side:4"
        /* The section of the user's Telegram Passport which has the 
        issue, one of ‚Äúpassport‚Äù, ‚Äúdriver_license‚Äù, ‚Äúidentity_card‚Äù, 
        ‚Äúinternal_passport‚Äù */
        type     : String
        /* Base64-encoded hash of the file with the front side of the 
        document */
        fileHash : String
        /* Error message */
        message  : String
      }
             
      /* Represents an issue with a document scan. The error is considered resolved when 
        the file with the document scan changes.  */
      PassportElementErrorFile {
        source : "file:5"
        /* The section of the user's Telegram Passport which has the 
        issue, one of ‚Äúutility_bill‚Äù, ‚Äúbank_statement‚Äù, 
        ‚Äúrental_agreement‚Äù, ‚Äúpassport_registration‚Äù, 
        ‚Äútemporary_registration‚Äù */
        type     : String
        /* Base64-encoded file hash */
        fileHash : String
        /* Error message */
        message  : String
      }
             
      /* Represents an issue in an unspecified place. The error is considered resolved 
        when new data is added.  */
      PassportElementErrorUnspecified {
        source : "unspecified:6"
        /* Type of element of the user's Telegram Passport which has 
        the issue */
        type        : String
        /* Base64-encoded element hash */
        elementHash : String
        /* Error message */
        message     : String
      }
             
      /* Represents an issue with one of the files that constitute the translation of a 
        document. The error is considered resolved when the file changes.  */
      PassportElementErrorTranslationFile {
        source : "translation_file:7"
        /* Type of element of the user's Telegram Passport which has 
        the issue, one of ‚Äúpassport‚Äù, ‚Äúdriver_license‚Äù, 
        ‚Äúidentity_card‚Äù, ‚Äúinternal_passport‚Äù, ‚Äúutility_bill‚Äù, 
        ‚Äúbank_statement‚Äù, ‚Äúrental_agreement‚Äù, 
        ‚Äúpassport_registration‚Äù, ‚Äútemporary_registration‚Äù */
        type     : String
        /* Base64-encoded file hash */
        fileHash : String
        /* Error message */
        message  : String
      }
             
      /* Represents an issue with the translated version of a document. The error is 
        considered resolved when a file with the document translation change.  */
      PassportElementErrorTranslationFiles {
        source : "translation_files:8"
        /* Type of element of the user's Telegram Passport which has 
        the issue, one of ‚Äúpassport‚Äù, ‚Äúdriver_license‚Äù, 
        ‚Äúidentity_card‚Äù, ‚Äúinternal_passport‚Äù, ‚Äúutility_bill‚Äù, 
        ‚Äúbank_statement‚Äù, ‚Äúrental_agreement‚Äù, 
        ‚Äúpassport_registration‚Äù, ‚Äútemporary_registration‚Äù */
        type       : String
        /* List of base64-encoded file hashes */
        fileHashes : List[String]
        /* Error message */
        message    : String
      }
             
    }
          
    enum ReactionType {
    
      /* The reaction is paid.  */
      ReactionTypePaid {
        type : "paid:0"
      }
             
      /* The reaction is based on an emoji.  */
      ReactionTypeEmoji {
        type : "emoji:1"
        /* Reaction emoji. Currently, it can be one of "‚ù§", "üëç", 
        "üëé", "üî•", "ü•∞", "üëè", "üòÅ", "ü§î", "ü§Ø", "üò±", "ü§¨", "üò¢", 
        "üéâ", "ü§©", "ü§Æ", "üí©", "üôè", "üëå", "üïä", "ü§°", "ü•±", "ü•¥", 
        "üòç", "üê≥", "‚ù§‚Äçüî•", "üåö", "üå≠", "üíØ", "ü§£", "‚ö°", "üçå", "üèÜ", 
        "üíî", "ü§®", "üòê", "üçì", "üçæ", "üíã", "üñï", "üòà", "üò¥", "üò≠", 
        "ü§ì", "üëª", "üë®‚Äçüíª", "üëÄ", "üéÉ", "üôà", "üòá", "üò®", "ü§ù", 
        "‚úç", "ü§ó", "ü´°", "üéÖ", "üéÑ", "‚òÉ", "üíÖ", "ü§™", "üóø", "üÜí", 
        "üíò", "üôâ", "ü¶Ñ", "üòò", "üíä", "üôä", "üòé", "üëæ", "ü§∑‚Äç‚ôÇ", 
        "ü§∑", "ü§∑‚Äç‚ôÄ", "üò°" */
        emoji : String
      }
             
      /* The reaction is based on a custom emoji.  */
      ReactionTypeCustomEmoji {
        type : "custom_emoji:2"
        /* Custom emoji identifier */
        customEmojiId : String
      }
             
    }
          
    enum RevenueWithdrawalState {
    
      /* The withdrawal is in progress.  */
      RevenueWithdrawalStatePending {
        type : "pending:0"
      }
             
      /* The withdrawal succeeded.  */
      RevenueWithdrawalStateSucceeded {
        type : "succeeded:1"
        /* Date the withdrawal was completed in Unix time */
        date : Int
        /* An HTTPS URL that can be used to see transaction details */
        url  : String
      }
             
      /* The withdrawal failed and the transaction was refunded.  */
      RevenueWithdrawalStateFailed {
        type : "failed:2"
      }
             
    }
          
    enum StoryAreaType {
    
      /* Describes a story area pointing to an HTTP or tg:// link. Currently, a story 
        can have up to 3 link areas.  */
      StoryAreaTypeLink {
        type : "link:0"
        /* HTTP or tg:// URL to be opened when the area is clicked */
        url  : String
      }
             
      /* Describes a story area pointing to a location. Currently, a story can have up 
        to 10 location areas.  */
      StoryAreaTypeLocation {
        type : "location:1"
        /* Location latitude in degrees */
        latitude  : Float
        /* Location longitude in degrees */
        longitude : Float
        /* Optional. Address of the location */
        address   : Option[LocationAddress]
      }
             
      /* Describes a story area containing weather information. Currently, a story can 
        have up to 3 weather areas.  */
      StoryAreaTypeWeather {
        type : "weather:2"
        /* Temperature, in degree Celsius */
        temperature     : Float
        /* Emoji representing the weather */
        emoji           : String
        /* A color of the area background in the ARGB format */
        backgroundColor : Int
      }
             
      /* Describes a story area pointing to a unique gift. Currently, a story can have 
        at most 1 unique gift area.  */
      StoryAreaTypeUniqueGift {
        type : "unique_gift:3"
        /* Unique name of the gift */
        name : String
      }
             
      /* Describes a story area pointing to a suggested reaction. Currently, a story can 
        have up to 5 suggested reaction areas.  */
      StoryAreaTypeSuggestedReaction {
        type : "suggested_reaction:4"
        /* Type of the reaction */
        reactionType : ReactionType
        /* Optional. Pass True if the reaction area has a dark 
        background */
        isDark       : Option[Boolean]
        /* Optional. Pass True if reaction area corner is flipped */
        isFlipped    : Option[Boolean]
      }
             
    }
          
    enum TransactionPartner {
    
      /* Describes a transaction with a chat.  */
      TransactionPartnerChat {
        type : "chat:0"
        /* Information about the chat */
        chat : Chat
        /* Optional. The gift sent to the chat by the bot */
        gift : Option[Gift]
      }
             
      /* Describes the affiliate program that issued the affiliate commission received 
        via this transaction.  */
      TransactionPartnerAffiliateProgram {
        type : "affiliate_program:1"
        /* Optional. Information about the bot that sponsored the 
        affiliate program */
        sponsorUser        : Option[User]
        /* The number of Telegram Stars received by the bot for each 
        1000 Telegram Stars received by the affiliate program 
        sponsor from referred users */
        commissionPerMille : Int
      }
             
      /* Describes a transaction with an unknown source or recipient.  */
      TransactionPartnerOther {
        type : "other:2"
      }
             
      /* Describes a withdrawal transaction to the Telegram Ads platform.  */
      TransactionPartnerTelegramAds {
        type : "telegram_ads:3"
      }
             
      /* Describes a transaction with a user.  */
      TransactionPartnerUser {
        type : "user:4"
        /* Type of the transaction, currently one of ‚Äúinvoice_payment‚Äù 
        for payments via invoices, ‚Äúpaid_media_payment‚Äù for payments 
        for paid media, ‚Äúgift_purchase‚Äù for gifts sent by the bot, 
        ‚Äúpremium_purchase‚Äù for Telegram Premium subscriptions gifted 
        by the bot, ‚Äúbusiness_account_transfer‚Äù for direct transfers 
        from managed business accounts */
        transactionType             : String
        /* Information about the user */
        user                        : User
        /* Optional. Information about the affiliate that received a 
        commission via this transaction. Can be available only for 
        ‚Äúinvoice_payment‚Äù and ‚Äúpaid_media_payment‚Äù transactions. */
        affiliate                   : Option[AffiliateInfo]
        /* Optional. Bot-specified invoice payload. Can be available 
        only for ‚Äúinvoice_payment‚Äù transactions. */
        invoicePayload              : Option[String]
        /* Optional. The duration of the paid subscription. Can be 
        available only for ‚Äúinvoice_payment‚Äù transactions. */
        subscriptionPeriod          : Option[Int]
        /* Optional. Information about the paid media bought by the 
        user; for ‚Äúpaid_media_payment‚Äù transactions only */
        paidMedia                   : List[PaidMedia]
        /* Optional. Bot-specified paid media payload. Can be 
        available only for ‚Äúpaid_media_payment‚Äù transactions. */
        paidMediaPayload            : Option[String]
        /* Optional. The gift sent to the user by the bot; for 
        ‚Äúgift_purchase‚Äù transactions only */
        gift                        : Option[Gift]
        /* Optional. Number of months the gifted Telegram Premium 
        subscription will be active for; for ‚Äúpremium_purchase‚Äù 
        transactions only */
        premiumSubscriptionDuration : Option[Int]
      }
             
      /* Describes a transaction with payment for paid broadcasting.  */
      TransactionPartnerTelegramApi {
        type : "telegram_api:5"
        /* The number of successful requests that exceeded regular 
        limits and were therefore billed */
        requestCount : Int
      }
             
      /* Describes a withdrawal transaction with Fragment.  */
      TransactionPartnerFragment {
        type : "fragment:6"
        /* Optional. State of the transaction if the transaction is 
        outgoing */
        withdrawalState : Option[RevenueWithdrawalState]
      }
             
    }
          
    /* This object describes the types of gifts that can be gifted to a user or a 
      chat.  */
    AcceptedGiftTypes {
      /* True, if unlimited regular gifts are accepted */
      unlimitedGifts      : Boolean
      /* True, if limited regular gifts are accepted */
      limitedGifts        : Boolean
      /* True, if unique gifts or gifts that can be upgraded to 
      unique for free are accepted */
      uniqueGifts         : Boolean
      /* True, if a Telegram Premium subscription is accepted */
      premiumSubscription : Boolean
    }
           
    /* Contains information about the affiliate that received a commission via this 
      transaction.  */
    AffiliateInfo {
      /* Optional. The bot or the user that received an affiliate 
      commission if it was received by a bot or a user */
      affiliateUser      : Option[User]
      /* Optional. The chat that received an affiliate commission if 
      it was received by a chat */
      affiliateChat      : Option[Chat]
      /* The number of Telegram Stars received by the affiliate for 
      each 1000 Telegram Stars received by the bot from referred 
      users */
      commissionPerMille : Int
      /* Integer amount of Telegram Stars received by the affiliate 
      from the transaction, rounded to 0; can be negative for 
      refunds */
      amount             : Int
      /* Optional. The number of 1/1000000000 shares of Telegram 
      Stars received by the affiliate; from -999999999 to 
      999999999; can be negative for refunds */
      nanostarAmount     : Option[Int]
    }
           
    /* This object represents an animation file (GIF or H.264/MPEG-4 AVC video without 
      sound).  */
    Animation {
      /* Identifier for this file, which can be used to download or 
      reuse the file */
      fileId       : String
      /* Unique identifier for this file, which is supposed to be 
      the same over time and for different bots. Can't be used to 
      download or reuse the file. */
      fileUniqueId : String
      /* Video width as defined by the sender */
      width        : Int
      /* Video height as defined by the sender */
      height       : Int
      /* Duration of the video in seconds as defined by the sender */
      duration     : Int
      /* Optional. Animation thumbnail as defined by the sender */
      thumbnail    : Option[PhotoSize]
      /* Optional. Original animation filename as defined by the 
      sender */
      fileName     : Option[String]
      /* Optional. MIME type of the file as defined by the sender */
      mimeType     : Option[String]
      /* Optional. File size in bytes. It can be bigger than 
      2&#94;31 and some programming languages may have 
      difficulty/silent defects in interpreting it. But it has at 
      most 52 significant bits, so a signed 64-bit integer or 
      double-precision float type are safe for storing this value. */
      fileSize     : Option[Long]
    }
           
    /* This object represents an audio file to be treated as music by the Telegram 
      clients.  */
    Audio {
      /* Identifier for this file, which can be used to download or 
      reuse the file */
      fileId       : String
      /* Unique identifier for this file, which is supposed to be 
      the same over time and for different bots. Can't be used to 
      download or reuse the file. */
      fileUniqueId : String
      /* Duration of the audio in seconds as defined by the sender */
      duration     : Int
      /* Optional. Performer of the audio as defined by the sender 
      or by audio tags */
      performer    : Option[String]
      /* Optional. Title of the audio as defined by the sender or by 
      audio tags */
      title        : Option[String]
      /* Optional. Original filename as defined by the sender */
      fileName     : Option[String]
      /* Optional. MIME type of the file as defined by the sender */
      mimeType     : Option[String]
      /* Optional. File size in bytes. It can be bigger than 
      2&#94;31 and some programming languages may have 
      difficulty/silent defects in interpreting it. But it has at 
      most 52 significant bits, so a signed 64-bit integer or 
      double-precision float type are safe for storing this value. */
      fileSize     : Option[Long]
      /* Optional. Thumbnail of the album cover to which the music 
      file belongs */
      thumbnail    : Option[PhotoSize]
    }
           
    /* Describes the birthdate of a user.  */
    Birthdate {
      /* Day of the user's birth; 1-31 */
      day   : Int
      /* Month of the user's birth; 1-12 */
      month : Int
      /* Optional. Year of the user's birth */
      year  : Option[Int]
    }
           
    /* This object represents a bot command.  */
    BotCommand {
      /* Text of the command; 1-32 characters. Can contain only 
      lowercase English letters, digits and underscores. */
      command     : String
      /* Description of the command; 1-256 characters. */
      description : String
    }
           
    /* This object represents the bot's description.  */
    BotDescription {
      /* The bot's description */
      description : String
    }
           
    /* This object represents the bot's name.  */
    BotName {
      /* The bot's name */
      name : String
    }
           
    /* This object represents the bot's short description.  */
    BotShortDescription {
      /* The bot's short description */
      shortDescription : String
    }
           
    /* Represents the rights of a business bot.  */
    BusinessBotRights {
      /* Optional. True, if the bot can send and edit messages in 
      the private chats that had incoming messages in the last 24 
      hours */
      canReply                   : Option[Boolean]
      /* Optional. True, if the bot can mark incoming private 
      messages as read */
      canReadMessages            : Option[Boolean]
      /* Optional. True, if the bot can delete messages sent by the 
      bot */
      canDeleteSentMessages      : Option[Boolean]
      /* Optional. True, if the bot can delete all private messages 
      in managed chats */
      canDeleteAllMessages       : Option[Boolean]
      /* Optional. True, if the bot can edit the first and last name 
      of the business account */
      canEditName                : Option[Boolean]
      /* Optional. True, if the bot can edit the bio of the business 
      account */
      canEditBio                 : Option[Boolean]
      /* Optional. True, if the bot can edit the profile photo of 
      the business account */
      canEditProfilePhoto        : Option[Boolean]
      /* Optional. True, if the bot can edit the username of the 
      business account */
      canEditUsername            : Option[Boolean]
      /* Optional. True, if the bot can change the privacy settings 
      pertaining to gifts for the business account */
      canChangeGiftSettings      : Option[Boolean]
      /* Optional. True, if the bot can view gifts and the amount of 
      Telegram Stars owned by the business account */
      canViewGiftsAndStars       : Option[Boolean]
      /* Optional. True, if the bot can convert regular gifts owned 
      by the business account to Telegram Stars */
      canConvertGiftsToStars     : Option[Boolean]
      /* Optional. True, if the bot can transfer and upgrade gifts 
      owned by the business account */
      canTransferAndUpgradeGifts : Option[Boolean]
      /* Optional. True, if the bot can transfer Telegram Stars 
      received by the business account to its own account, or use 
      them to upgrade and transfer gifts */
      canTransferStars           : Option[Boolean]
      /* Optional. True, if the bot can post, edit and delete 
      stories on behalf of the business account */
      canManageStories           : Option[Boolean]
    }
           
    /* Describes the connection of the bot with a business account.  */
    BusinessConnection {
      /* Unique identifier of the business connection */
      id         : String
      /* Business account user that created the business connection */
      user       : User
      /* Identifier of a private chat with the user who created the 
      business connection. This number may have more than 32 
      significant bits and some programming languages may have 
      difficulty/silent defects in interpreting it. But it has at 
      most 52 significant bits, so a 64-bit integer or 
      double-precision float type are safe for storing this 
      identifier. */
      userChatId : Long
      /* Date the connection was established in Unix time */
      date       : Int
      /* Optional. Rights of the business bot */
      rights     : Option[BusinessBotRights]
      /* True, if the connection is active */
      isEnabled  : Boolean
    }
           
    /* Contains information about the start page settings of a Telegram Business 
      account.  */
    BusinessIntro {
      /* Optional. Title text of the business intro */
      title   : Option[String]
      /* Optional. Message text of the business intro */
      message : Option[String]
      /* Optional. Sticker of the business intro */
      sticker : Option[Sticker]
    }
           
    /* Contains information about the location of a Telegram Business account.  */
    BusinessLocation {
      /* Address of the business */
      address  : String
      /* Optional. Location of the business */
      location : Option[Location]
    }
           
    /* This object is received when messages are deleted from a connected business 
      account.  */
    BusinessMessagesDeleted {
      /* Unique identifier of the business connection */
      businessConnectionId : String
      /* Information about a chat in the business account. The bot 
      may not have access to the chat or the corresponding user. */
      chat                 : Chat
      /* The list of identifiers of deleted messages in the chat of 
      the business account */
      messageIds           : List[Int]
    }
           
    /* Describes the opening hours of a business.  */
    BusinessOpeningHours {
      /* Unique name of the time zone for which the opening hours 
      are defined */
      timeZoneName : String
      /* List of time intervals describing business opening hours */
      openingHours : List[BusinessOpeningHoursInterval]
    }
           
    /* Describes an interval of time during which a business is open.  */
    BusinessOpeningHoursInterval {
      /* The minute's sequence number in a week, starting on Monday, 
      marking the start of the time interval during which the 
      business is open; 0 - 7 * 24 * 60 */
      openingMinute : Int
      /* The minute's sequence number in a week, starting on Monday, 
      marking the end of the time interval during which the 
      business is open; 0 - 8 * 24 * 60 */
      closingMinute : Int
    }
           
    /* A placeholder, currently holds no information. Use BotFather to set up your 
      game.  */
    CallbackGame {
  
    }
           
    /* This object represents an incoming callback query from a callback button in an 
      inline keyboard. If the button that originated the query was attached to a 
      message sent by the bot, the field message will be present. If the button was 
      attached to a message sent via the bot (in inline mode), the field 
      inline_message_id will be present. Exactly one of the fields data or 
      game_short_name will be present.  */
    CallbackQuery {
      /* Unique identifier for this query */
      id              : String
      /* Sender */
      from            : User
      /* Optional. Message sent by the bot with the callback button 
      that originated the query */
      message         : Option[MaybeInaccessibleMessage]
      /* Optional. Identifier of the message sent via the bot in 
      inline mode, that originated the query. */
      inlineMessageId : Option[String]
      /* Global identifier, uniquely corresponding to the chat to 
      which the message with the callback button was sent. Useful 
      for high scores in games. */
      chatInstance    : String
      /* Optional. Data associated with the callback button. Be 
      aware that the message originated the query can contain no 
      callback buttons with this data. */
      data            : Option[String]
      /* Optional. Short name of a Game to be returned, serves as 
      the unique identifier for the game */
      gameShortName   : Option[String]
    }
           
    /* This object represents a chat.  */
    Chat {
      /* Unique identifier for this chat. This number may have more 
      than 32 significant bits and some programming languages may 
      have difficulty/silent defects in interpreting it. But it 
      has at most 52 significant bits, so a signed 64-bit integer 
      or double-precision float type are safe for storing this 
      identifier. */
      id        : Long
      /* Type of the chat, can be either ‚Äúprivate‚Äù, ‚Äúgroup‚Äù, 
      ‚Äúsupergroup‚Äù or ‚Äúchannel‚Äù */
      type      : String
      /* Optional. Title, for supergroups, channels and group chats */
      title     : Option[String]
      /* Optional. Username, for private chats, supergroups and 
      channels if available */
      username  : Option[String]
      /* Optional. First name of the other party in a private chat */
      firstName : Option[String]
      /* Optional. Last name of the other party in a private chat */
      lastName  : Option[String]
      /* Optional. True, if the supergroup chat is a forum (has 
      topics enabled) */
      isForum   : Option[Boolean]
    }
           
    /* Represents the rights of an administrator in a chat.  */
    ChatAdministratorRights {
      /* True, if the user's presence in the chat is hidden */
      isAnonymous         : Boolean
      /* True, if the administrator can access the chat event log, 
      get boost list, see hidden supergroup and channel members, 
      report spam messages, ignore slow mode, and send messages to 
      the chat without paying Telegram Stars. Implied by any other 
      administrator privilege. */
      canManageChat       : Boolean
      /* True, if the administrator can delete messages of other 
      users */
      canDeleteMessages   : Boolean
      /* True, if the administrator can manage video chats */
      canManageVideoChats : Boolean
      /* True, if the administrator can restrict, ban or unban chat 
      members, or access supergroup statistics */
      canRestrictMembers  : Boolean
      /* True, if the administrator can add new administrators with 
      a subset of their own privileges or demote administrators 
      that they have promoted, directly or indirectly (promoted by 
      administrators that were appointed by the user) */
      canPromoteMembers   : Boolean
      /* True, if the user is allowed to change the chat title, 
      photo and other settings */
      canChangeInfo       : Boolean
      /* True, if the user is allowed to invite new users to the 
      chat */
      canInviteUsers      : Boolean
      /* True, if the administrator can post stories to the chat */
      canPostStories      : Boolean
      /* True, if the administrator can edit stories posted by other 
      users, post stories to the chat page, pin chat stories, and 
      access the chat's story archive */
      canEditStories      : Boolean
      /* True, if the administrator can delete stories posted by 
      other users */
      canDeleteStories    : Boolean
      /* Optional. True, if the administrator can post messages in 
      the channel, approve suggested posts, or access channel 
      statistics; for channels only */
      canPostMessages     : Option[Boolean]
      /* Optional. True, if the administrator can edit messages of 
      other users and can pin messages; for channels only */
      canEditMessages     : Option[Boolean]
      /* Optional. True, if the user is allowed to pin messages; for 
      groups and supergroups only */
      canPinMessages      : Option[Boolean]
      /* Optional. True, if the user is allowed to create, rename, 
      close, and reopen forum topics; for supergroups only */
      canManageTopics     : Option[Boolean]
    }
           
    /* This object represents a chat background.  */
    ChatBackground {
      /* Type of the background */
      type : BackgroundType
    }
           
    /* This object contains information about a chat boost.  */
    ChatBoost {
      /* Unique identifier of the boost */
      boostId        : String
      /* Point in time (Unix timestamp) when the chat was boosted */
      addDate        : Int
      /* Point in time (Unix timestamp) when the boost will 
      automatically expire, unless the booster's Telegram Premium 
      subscription is prolonged */
      expirationDate : Int
      /* Source of the added boost */
      source         : ChatBoostSource
    }
           
    /* This object represents a service message about a user boosting a chat.  */
    ChatBoostAdded {
      /* Number of boosts added by the user */
      boostCount : Int
    }
           
    /* This object represents a boost removed from a chat.  */
    ChatBoostRemoved {
      /* Chat which was boosted */
      chat       : Chat
      /* Unique identifier of the boost */
      boostId    : String
      /* Point in time (Unix timestamp) when the boost was removed */
      removeDate : Int
      /* Source of the removed boost */
      source     : ChatBoostSource
    }
           
    /* This object represents a boost added to a chat or changed.  */
    ChatBoostUpdated {
      /* Chat which was boosted */
      chat  : Chat
      /* Information about the chat boost */
      boost : ChatBoost
    }
           
    /* This object contains full information about a chat.  */
    ChatFullInfo {
      /* Unique identifier for this chat. This number may have more 
      than 32 significant bits and some programming languages may 
      have difficulty/silent defects in interpreting it. But it 
      has at most 52 significant bits, so a signed 64-bit integer 
      or double-precision float type are safe for storing this 
      identifier. */
      id                                 : Long
      /* Type of the chat, can be either ‚Äúprivate‚Äù, ‚Äúgroup‚Äù, 
      ‚Äúsupergroup‚Äù or ‚Äúchannel‚Äù */
      type                               : String
      /* Optional. Title, for supergroups, channels and group chats */
      title                              : Option[String]
      /* Optional. Username, for private chats, supergroups and 
      channels if available */
      username                           : Option[String]
      /* Optional. First name of the other party in a private chat */
      firstName                          : Option[String]
      /* Optional. Last name of the other party in a private chat */
      lastName                           : Option[String]
      /* Optional. True, if the supergroup chat is a forum (has 
      topics enabled) */
      isForum                            : Option[Boolean]
      /* Identifier of the accent color for the chat name and 
      backgrounds of the chat photo, reply header, and link 
      preview. See accent colors for more details. */
      accentColorId                      : Int
      /* The maximum number of reactions that can be set on a 
      message in the chat */
      maxReactionCount                   : Int
      /* Optional. Chat photo */
      photo                              : Option[ChatPhoto]
      /* Optional. If non-empty, the list of all active chat 
      usernames; for private chats, supergroups and channels */
      activeUsernames                    : List[String]
      /* Optional. For private chats, the date of birth of the user */
      birthdate                          : Option[Birthdate]
      /* Optional. For private chats with business accounts, the 
      intro of the business */
      businessIntro                      : Option[BusinessIntro]
      /* Optional. For private chats with business accounts, the 
      location of the business */
      businessLocation                   : Option[BusinessLocation]
      /* Optional. For private chats with business accounts, the 
      opening hours of the business */
      businessOpeningHours               : Option[BusinessOpeningHours]
      /* Optional. For private chats, the personal channel of the 
      user */
      personalChat                       : Option[Chat]
      /* Optional. List of available reactions allowed in the chat. 
      If omitted, then all emoji reactions are allowed. */
      availableReactions                 : List[ReactionType]
      /* Optional. Custom emoji identifier of the emoji chosen by 
      the chat for the reply header and link preview background */
      backgroundCustomEmojiId            : Option[String]
      /* Optional. Identifier of the accent color for the chat's 
      profile background. See profile accent colors for more 
      details. */
      profileAccentColorId               : Option[Int]
      /* Optional. Custom emoji identifier of the emoji chosen by 
      the chat for its profile background */
      profileBackgroundCustomEmojiId     : Option[String]
      /* Optional. Custom emoji identifier of the emoji status of 
      the chat or the other party in a private chat */
      emojiStatusCustomEmojiId           : Option[String]
      /* Optional. Expiration date of the emoji status of the chat 
      or the other party in a private chat, in Unix time, if any */
      emojiStatusExpirationDate          : Option[Int]
      /* Optional. Bio of the other party in a private chat */
      bio                                : Option[String]
      /* Optional. True, if privacy settings of the other party in 
      the private chat allows to use tg://user?id=<user_id> links 
      only in chats with the user */
      hasPrivateForwards                 : Option[Boolean]
      /* Optional. True, if the privacy settings of the other party 
      restrict sending voice and video note messages in the 
      private chat */
      hasRestrictedVoiceAndVideoMessages : Option[Boolean]
      /* Optional. True, if users need to join the supergroup before 
      they can send messages */
      joinToSendMessages                 : Option[Boolean]
      /* Optional. True, if all users directly joining the 
      supergroup without using an invite link need to be approved 
      by supergroup administrators */
      joinByRequest                      : Option[Boolean]
      /* Optional. Description, for groups, supergroups and channel 
      chats */
      description                        : Option[String]
      /* Optional. Primary invite link, for groups, supergroups and 
      channel chats */
      inviteLink                         : Option[String]
      /* Optional. The most recent pinned message (by sending date) */
      pinnedMessage                      : Option[Message]
      /* Optional. Default chat member permissions, for groups and 
      supergroups */
      permissions                        : Option[ChatPermissions]
      /* Information about types of gifts that are accepted by the 
      chat or by the corresponding user for private chats */
      acceptedGiftTypes                  : AcceptedGiftTypes
      /* Optional. True, if paid media messages can be sent or 
      forwarded to the channel chat. The field is available only 
      for channel chats. */
      canSendPaidMedia                   : Option[Boolean]
      /* Optional. For supergroups, the minimum allowed delay 
      between consecutive messages sent by each unprivileged user; 
      in seconds */
      slowModeDelay                      : Option[Int]
      /* Optional. For supergroups, the minimum number of boosts 
      that a non-administrator user needs to add in order to 
      ignore slow mode and chat permissions */
      unrestrictBoostCount               : Option[Int]
      /* Optional. The time after which all messages sent to the 
      chat will be automatically deleted; in seconds */
      messageAutoDeleteTime              : Option[Int]
      /* Optional. True, if aggressive anti-spam checks are enabled 
      in the supergroup. The field is only available to chat 
      administrators. */
      hasAggressiveAntiSpamEnabled       : Option[Boolean]
      /* Optional. True, if non-administrators can only get the list 
      of bots and administrators in the chat */
      hasHiddenMembers                   : Option[Boolean]
      /* Optional. True, if messages from the chat can't be 
      forwarded to other chats */
      hasProtectedContent                : Option[Boolean]
      /* Optional. True, if new chat members will have access to old 
      messages; available only to chat administrators */
      hasVisibleHistory                  : Option[Boolean]
      /* Optional. For supergroups, name of the group sticker set */
      stickerSetName                     : Option[String]
      /* Optional. True, if the bot can change the group sticker set */
      canSetStickerSet                   : Option[Boolean]
      /* Optional. For supergroups, the name of the group's custom 
      emoji sticker set. Custom emoji from this set can be used by 
      all users and bots in the group. */
      customEmojiStickerSetName          : Option[String]
      /* Optional. Unique identifier for the linked chat, i.e. the 
      discussion group identifier for a channel and vice versa; 
      for supergroups and channel chats. This identifier may be 
      greater than 32 bits and some programming languages may have 
      difficulty/silent defects in interpreting it. But it is 
      smaller than 52 bits, so a signed 64 bit integer or 
      double-precision float type are safe for storing this 
      identifier. */
      linkedChatId                       : Option[Long]
      /* Optional. For supergroups, the location to which the 
      supergroup is connected */
      location                           : Option[ChatLocation]
    }
           
    /* Represents an invite link for a chat.  */
    ChatInviteLink {
      /* The invite link. If the link was created by another chat 
      administrator, then the second part of the link will be 
      replaced with ‚Äú‚Ä¶‚Äù. */
      inviteLink              : String
      /* Creator of the link */
      creator                 : User
      /* True, if users joining the chat via the link need to be 
      approved by chat administrators */
      createsJoinRequest      : Boolean
      /* True, if the link is primary */
      isPrimary               : Boolean
      /* True, if the link is revoked */
      isRevoked               : Boolean
      /* Optional. Invite link name */
      name                    : Option[String]
      /* Optional. Point in time (Unix timestamp) when the link will 
      expire or has been expired */
      expireDate              : Option[Int]
      /* Optional. The maximum number of users that can be members 
      of the chat simultaneously after joining the chat via this 
      invite link; 1-99999 */
      memberLimit             : Option[Int]
      /* Optional. Number of pending join requests created using 
      this link */
      pendingJoinRequestCount : Option[Int]
      /* Optional. The number of seconds the subscription will be 
      active for before the next payment */
      subscriptionPeriod      : Option[Int]
      /* Optional. The amount of Telegram Stars a user must pay 
      initially and after each subsequent subscription period to 
      be a member of the chat using the link */
      subscriptionPrice       : Option[Int]
    }
           
    /* Represents a join request sent to a chat.  */
    ChatJoinRequest {
      /* Chat to which the request was sent */
      chat       : Chat
      /* User that sent the join request */
      from       : User
      /* Identifier of a private chat with the user who sent the 
      join request. This number may have more than 32 significant 
      bits and some programming languages may have 
      difficulty/silent defects in interpreting it. But it has at 
      most 52 significant bits, so a 64-bit integer or 
      double-precision float type are safe for storing this 
      identifier. The bot can use this identifier for 5 minutes to 
      send messages until the join request is processed, assuming 
      no other administrator contacted the user. */
      userChatId : Long
      /* Date the request was sent in Unix time */
      date       : Int
      /* Optional. Bio of the user. */
      bio        : Option[String]
      /* Optional. Chat invite link that was used by the user to 
      send the join request */
      inviteLink : Option[ChatInviteLink]
    }
           
    /* Represents a location to which a chat is connected.  */
    ChatLocation {
      /* The location to which the supergroup is connected. Can't be 
      a live location. */
      location : Location
      /* Location address; 1-64 characters, as defined by the chat 
      owner */
      address  : String
    }
           
    /* This object represents changes in the status of a chat member.  */
    ChatMemberUpdated {
      /* Chat the user belongs to */
      chat                    : Chat
      /* Performer of the action, which resulted in the change */
      from                    : User
      /* Date the change was done in Unix time */
      date                    : Int
      /* Previous information about the chat member */
      oldChatMember           : ChatMember
      /* New information about the chat member */
      newChatMember           : ChatMember
      /* Optional. Chat invite link, which was used by the user to 
      join the chat; for joining by invite link events only. */
      inviteLink              : Option[ChatInviteLink]
      /* Optional. True, if the user joined the chat after sending a 
      direct join request without using an invite link and being 
      approved by an administrator */
      viaJoinRequest          : Option[Boolean]
      /* Optional. True, if the user joined the chat via a chat 
      folder invite link */
      viaChatFolderInviteLink : Option[Boolean]
    }
           
    /* Describes actions that a non-administrator user is allowed to take in a chat.  */
    ChatPermissions {
      /* Optional. True, if the user is allowed to send text 
      messages, contacts, giveaways, giveaway winners, invoices, 
      locations and venues */
      canSendMessages       : Option[Boolean]
      /* Optional. True, if the user is allowed to send audios */
      canSendAudios         : Option[Boolean]
      /* Optional. True, if the user is allowed to send documents */
      canSendDocuments      : Option[Boolean]
      /* Optional. True, if the user is allowed to send photos */
      canSendPhotos         : Option[Boolean]
      /* Optional. True, if the user is allowed to send videos */
      canSendVideos         : Option[Boolean]
      /* Optional. True, if the user is allowed to send video notes */
      canSendVideoNotes     : Option[Boolean]
      /* Optional. True, if the user is allowed to send voice notes */
      canSendVoiceNotes     : Option[Boolean]
      /* Optional. True, if the user is allowed to send polls and 
      checklists */
      canSendPolls          : Option[Boolean]
      /* Optional. True, if the user is allowed to send animations, 
      games, stickers and use inline bots */
      canSendOtherMessages  : Option[Boolean]
      /* Optional. True, if the user is allowed to add web page 
      previews to their messages */
      canAddWebPagePreviews : Option[Boolean]
      /* Optional. True, if the user is allowed to change the chat 
      title, photo and other settings. Ignored in public 
      supergroups */
      canChangeInfo         : Option[Boolean]
      /* Optional. True, if the user is allowed to invite new users 
      to the chat */
      canInviteUsers        : Option[Boolean]
      /* Optional. True, if the user is allowed to pin messages. 
      Ignored in public supergroups */
      canPinMessages        : Option[Boolean]
      /* Optional. True, if the user is allowed to create forum 
      topics. If omitted defaults to the value of can_pin_messages */
      canManageTopics       : Option[Boolean]
    }
           
    /* This object represents a chat photo.  */
    ChatPhoto {
      /* File identifier of small (160x160) chat photo. This file_id 
      can be used only for photo download and only for as long as 
      the photo is not changed. */
      smallFileId       : String
      /* Unique file identifier of small (160x160) chat photo, which 
      is supposed to be the same over time and for different bots. 
      Can't be used to download or reuse the file. */
      smallFileUniqueId : String
      /* File identifier of big (640x640) chat photo. This file_id 
      can be used only for photo download and only for as long as 
      the photo is not changed. */
      bigFileId         : String
      /* Unique file identifier of big (640x640) chat photo, which 
      is supposed to be the same over time and for different bots. 
      Can't be used to download or reuse the file. */
      bigFileUniqueId   : String
    }
           
    /* This object contains information about a chat that was shared with the bot 
      using a KeyboardButtonRequestChat button.  */
    ChatShared {
      /* Identifier of the request */
      requestId : Int
      /* Identifier of the shared chat. This number may have more 
      than 32 significant bits and some programming languages may 
      have difficulty/silent defects in interpreting it. But it 
      has at most 52 significant bits, so a 64-bit integer or 
      double-precision float type are safe for storing this 
      identifier. The bot may not have access to the chat and 
      could be unable to use this identifier, unless the chat is 
      already known to the bot by some other means. */
      chatId    : Long
      /* Optional. Title of the chat, if the title was requested by 
      the bot. */
      title     : Option[String]
      /* Optional. Username of the chat, if the username was 
      requested by the bot and available. */
      username  : Option[String]
      /* Optional. Available sizes of the chat photo, if the photo 
      was requested by the bot */
      photo     : List[PhotoSize]
    }
           
    /* Describes a checklist.  */
    Checklist {
      /* Title of the checklist */
      title                    : String
      /* Optional. Special entities that appear in the checklist 
      title */
      titleEntities            : List[MessageEntity]
      /* List of tasks in the checklist */
      tasks                    : List[ChecklistTask]
      /* Optional. True, if users other than the creator of the list 
      can add tasks to the list */
      othersCanAddTasks        : Option[Boolean]
      /* Optional. True, if users other than the creator of the list 
      can mark tasks as done or not done */
      othersCanMarkTasksAsDone : Option[Boolean]
    }
           
    /* Describes a task in a checklist.  */
    ChecklistTask {
      /* Unique identifier of the task */
      id              : Int
      /* Text of the task */
      text            : String
      /* Optional. Special entities that appear in the task text */
      textEntities    : List[MessageEntity]
      /* Optional. User that completed the task; omitted if the task 
      wasn't completed */
      completedByUser : Option[User]
      /* Optional. Point in time (Unix timestamp) when the task was 
      completed; 0 if the task wasn't completed */
      completionDate  : Option[Int]
    }
           
    /* Describes a service message about tasks added to a checklist.  */
    ChecklistTasksAdded {
      /* Optional. Message containing the checklist to which the 
      tasks were added. Note that the Message object in this field 
      will not contain the reply_to_message field even if it 
      itself is a reply. */
      checklistMessage : Option[Message]
      /* List of tasks added to the checklist */
      tasks            : List[ChecklistTask]
    }
           
    /* Describes a service message about checklist tasks marked as done or not done.  */
    ChecklistTasksDone {
      /* Optional. Message containing the checklist whose tasks were 
      marked as done or not done. Note that the Message object in 
      this field will not contain the reply_to_message field even 
      if it itself is a reply. */
      checklistMessage       : Option[Message]
      /* Optional. Identifiers of the tasks that were marked as done */
      markedAsDoneTaskIds    : List[Int]
      /* Optional. Identifiers of the tasks that were marked as not 
      done */
      markedAsNotDoneTaskIds : List[Int]
    }
           
    /* Represents a result of an inline query that was chosen by the user and sent to 
      their chat partner.  */
    ChosenInlineResult {
      /* The unique identifier for the result that was chosen */
      resultId        : String
      /* The user that chose the result */
      from            : User
      /* Optional. Sender location, only for bots that require user 
      location */
      location        : Option[Location]
      /* Optional. Identifier of the sent inline message. Available 
      only if there is an inline keyboard attached to the message. 
      Will be also received in callback queries and can be used to 
      edit the message. */
      inlineMessageId : Option[String]
      /* The query that was used to obtain the result */
      query           : String
    }
           
    /* This object represents a phone contact.  */
    Contact {
      /* Contact's phone number */
      phoneNumber : String
      /* Contact's first name */
      firstName   : String
      /* Optional. Contact's last name */
      lastName    : Option[String]
      /* Optional. Contact's user identifier in Telegram. This 
      number may have more than 32 significant bits and some 
      programming languages may have difficulty/silent defects in 
      interpreting it. But it has at most 52 significant bits, so 
      a 64-bit integer or double-precision float type are safe for 
      storing this identifier. */
      userId      : Option[Long]
      /* Optional. Additional data about the contact in the form of 
      a vCard */
      vcard       : Option[String]
    }
           
    /* This object represents an inline keyboard button that copies specified text to 
      the clipboard.  */
    CopyTextButton {
      /* The text to be copied to the clipboard; 1-256 characters */
      text : String
    }
           
    /* This object represents an animated emoji that displays a random value.  */
    Dice {
      /* Emoji on which the dice throw animation is based */
      emoji : String
      /* Value of the dice, 1-6 for ‚Äúüé≤‚Äù, ‚ÄúüéØ‚Äù and ‚Äúüé≥‚Äù base emoji, 
      1-5 for ‚ÄúüèÄ‚Äù and ‚Äú‚öΩ‚Äù base emoji, 1-64 for ‚Äúüé∞‚Äù base emoji */
      value : Int
    }
           
    /* Describes a service message about a change in the price of direct messages sent 
      to a channel chat.  */
    DirectMessagePriceChanged {
      /* True, if direct messages are enabled for the channel chat; 
      false otherwise */
      areDirectMessagesEnabled : Boolean
      /* Optional. The new number of Telegram Stars that must be 
      paid by users for each direct message sent to the channel. 
      Does not apply to users who have been exempted by 
      administrators. Defaults to 0. */
      directMessageStarCount   : Option[Int]
    }
           
    /* This object represents a general file (as opposed to photos, voice messages and 
      audio files).  */
    Document {
      /* Identifier for this file, which can be used to download or 
      reuse the file */
      fileId       : String
      /* Unique identifier for this file, which is supposed to be 
      the same over time and for different bots. Can't be used to 
      download or reuse the file. */
      fileUniqueId : String
      /* Optional. Document thumbnail as defined by the sender */
      thumbnail    : Option[PhotoSize]
      /* Optional. Original filename as defined by the sender */
      fileName     : Option[String]
      /* Optional. MIME type of the file as defined by the sender */
      mimeType     : Option[String]
      /* Optional. File size in bytes. It can be bigger than 
      2&#94;31 and some programming languages may have 
      difficulty/silent defects in interpreting it. But it has at 
      most 52 significant bits, so a signed 64-bit integer or 
      double-precision float type are safe for storing this value. */
      fileSize     : Option[Long]
    }
           
    /* Describes data required for decrypting and authenticating 
      EncryptedPassportElement. See the Telegram Passport Documentation for a complete 
      description of the data decryption and authentication processes.  */
    EncryptedCredentials {
      /* Base64-encoded encrypted JSON-serialized data with unique 
      user's payload, data hashes and secrets required for 
      EncryptedPassportElement decryption and authentication */
      data   : String
      /* Base64-encoded data hash for data authentication */
      hash   : String
      /* Base64-encoded secret, encrypted with the bot's public RSA 
      key, required for data decryption */
      secret : String
    }
           
    /* Describes documents or other Telegram Passport elements shared with the bot by 
      the user.  */
    EncryptedPassportElement {
      /* Element type. One of ‚Äúpersonal_details‚Äù, ‚Äúpassport‚Äù, 
      ‚Äúdriver_license‚Äù, ‚Äúidentity_card‚Äù, ‚Äúinternal_passport‚Äù, 
      ‚Äúaddress‚Äù, ‚Äúutility_bill‚Äù, ‚Äúbank_statement‚Äù, 
      ‚Äúrental_agreement‚Äù, ‚Äúpassport_registration‚Äù, 
      ‚Äútemporary_registration‚Äù, ‚Äúphone_number‚Äù, ‚Äúemail‚Äù. */
      type        : String
      /* Optional. Base64-encoded encrypted Telegram Passport 
      element data provided by the user; available only for 
      ‚Äúpersonal_details‚Äù, ‚Äúpassport‚Äù, ‚Äúdriver_license‚Äù, 
      ‚Äúidentity_card‚Äù, ‚Äúinternal_passport‚Äù and ‚Äúaddress‚Äù types. 
      Can be decrypted and verified using the accompanying 
      EncryptedCredentials. */
      data        : Option[String]
      /* Optional. User's verified phone number; available only for 
      ‚Äúphone_number‚Äù type */
      phoneNumber : Option[String]
      /* Optional. User's verified email address; available only for 
      ‚Äúemail‚Äù type */
      email       : Option[String]
      /* Optional. Array of encrypted files with documents provided 
      by the user; available only for ‚Äúutility_bill‚Äù, 
      ‚Äúbank_statement‚Äù, ‚Äúrental_agreement‚Äù, 
      ‚Äúpassport_registration‚Äù and ‚Äútemporary_registration‚Äù types. 
      Files can be decrypted and verified using the accompanying 
      EncryptedCredentials. */
      files       : List[PassportFile]
      /* Optional. Encrypted file with the front side of the 
      document, provided by the user; available only for 
      ‚Äúpassport‚Äù, ‚Äúdriver_license‚Äù, ‚Äúidentity_card‚Äù and 
      ‚Äúinternal_passport‚Äù. The file can be decrypted and verified 
      using the accompanying EncryptedCredentials. */
      frontSide   : Option[PassportFile]
      /* Optional. Encrypted file with the reverse side of the 
      document, provided by the user; available only for 
      ‚Äúdriver_license‚Äù and ‚Äúidentity_card‚Äù. The file can be 
      decrypted and verified using the accompanying 
      EncryptedCredentials. */
      reverseSide : Option[PassportFile]
      /* Optional. Encrypted file with the selfie of the user 
      holding a document, provided by the user; available if 
      requested for ‚Äúpassport‚Äù, ‚Äúdriver_license‚Äù, ‚Äúidentity_card‚Äù 
      and ‚Äúinternal_passport‚Äù. The file can be decrypted and 
      verified using the accompanying EncryptedCredentials. */
      selfie      : Option[PassportFile]
      /* Optional. Array of encrypted files with translated versions 
      of documents provided by the user; available if requested 
      for ‚Äúpassport‚Äù, ‚Äúdriver_license‚Äù, ‚Äúidentity_card‚Äù, 
      ‚Äúinternal_passport‚Äù, ‚Äúutility_bill‚Äù, ‚Äúbank_statement‚Äù, 
      ‚Äúrental_agreement‚Äù, ‚Äúpassport_registration‚Äù and 
      ‚Äútemporary_registration‚Äù types. Files can be decrypted and 
      verified using the accompanying EncryptedCredentials. */
      translation : List[PassportFile]
      /* Base64-encoded element hash for using in 
      PassportElementErrorUnspecified */
      hash        : String
    }
           
    /* This object contains information about a message that is being replied to, 
      which may come from another chat or forum topic.  */
    ExternalReplyInfo {
      /* Origin of the message replied to by the given message */
      origin             : MessageOrigin
      /* Optional. Chat the original message belongs to. Available 
      only if the chat is a supergroup or a channel. */
      chat               : Option[Chat]
      /* Optional. Unique message identifier inside the original 
      chat. Available only if the original chat is a supergroup or 
      a channel. */
      messageId          : Option[Int]
      /* Optional. Options used for link preview generation for the 
      original message, if it is a text message */
      linkPreviewOptions : Option[LinkPreviewOptions]
      /* Optional. Message is an animation, information about the 
      animation */
      animation          : Option[Animation]
      /* Optional. Message is an audio file, information about the 
      file */
      audio              : Option[Audio]
      /* Optional. Message is a general file, information about the 
      file */
      document           : Option[Document]
      /* Optional. Message contains paid media; information about 
      the paid media */
      paidMedia          : Option[PaidMediaInfo]
      /* Optional. Message is a photo, available sizes of the photo */
      photo              : List[PhotoSize]
      /* Optional. Message is a sticker, information about the 
      sticker */
      sticker            : Option[Sticker]
      /* Optional. Message is a forwarded story */
      story              : Option[Story]
      /* Optional. Message is a video, information about the video */
      video              : Option[Video]
      /* Optional. Message is a video note, information about the 
      video message */
      videoNote          : Option[VideoNote]
      /* Optional. Message is a voice message, information about the 
      file */
      voice              : Option[Voice]
      /* Optional. True, if the message media is covered by a 
      spoiler animation */
      hasMediaSpoiler    : Option[Boolean]
      /* Optional. Message is a checklist */
      checklist          : Option[Checklist]
      /* Optional. Message is a shared contact, information about 
      the contact */
      contact            : Option[Contact]
      /* Optional. Message is a dice with random value */
      dice               : Option[Dice]
      /* Optional. Message is a game, information about the game. */
      game               : Option[Game]
      /* Optional. Message is a scheduled giveaway, information 
      about the giveaway */
      giveaway           : Option[Giveaway]
      /* Optional. A giveaway with public winners was completed */
      giveawayWinners    : Option[GiveawayWinners]
      /* Optional. Message is an invoice for a payment, information 
      about the invoice. */
      invoice            : Option[Invoice]
      /* Optional. Message is a shared location, information about 
      the location */
      location           : Option[Location]
      /* Optional. Message is a native poll, information about the 
      poll */
      poll               : Option[Poll]
      /* Optional. Message is a venue, information about the venue */
      venue              : Option[Venue]
    }
           
    /* This object represents a file ready to be downloaded. The file can be 
      downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>. It 
      is guaranteed that the link will be valid for at least 1 hour. When the link 
      expires, a new one can be requested by calling getFile.  */
    File {
      /* Identifier for this file, which can be used to download or 
      reuse the file */
      fileId       : String
      /* Unique identifier for this file, which is supposed to be 
      the same over time and for different bots. Can't be used to 
      download or reuse the file. */
      fileUniqueId : String
      /* Optional. File size in bytes. It can be bigger than 
      2&#94;31 and some programming languages may have 
      difficulty/silent defects in interpreting it. But it has at 
      most 52 significant bits, so a signed 64-bit integer or 
      double-precision float type are safe for storing this value. */
      fileSize     : Option[Long]
      /* Optional. File path. Use 
      https://api.telegram.org/file/bot<token>/<file_path> to get 
      the file. */
      filePath     : Option[String]
    }
           
    /* This object represents a forum topic.  */
    ForumTopic {
      /* Unique identifier of the forum topic */
      messageThreadId   : Int
      /* Name of the topic */
      name              : String
      /* Color of the topic icon in RGB format */
      iconColor         : Int
      /* Optional. Unique identifier of the custom emoji shown as 
      the topic icon */
      iconCustomEmojiId : Option[String]
    }
           
    /* This object represents a service message about a forum topic closed in the 
      chat. Currently holds no information.  */
    ForumTopicClosed {
  
    }
           
    /* This object represents a service message about a new forum topic created in the 
      chat.  */
    ForumTopicCreated {
      /* Name of the topic */
      name              : String
      /* Color of the topic icon in RGB format */
      iconColor         : Int
      /* Optional. Unique identifier of the custom emoji shown as 
      the topic icon */
      iconCustomEmojiId : Option[String]
    }
           
    /* This object represents a service message about an edited forum topic.  */
    ForumTopicEdited {
      /* Optional. New name of the topic, if it was edited */
      name              : Option[String]
      /* Optional. New identifier of the custom emoji shown as the 
      topic icon, if it was edited; an empty string if the icon 
      was removed */
      iconCustomEmojiId : Option[String]
    }
           
    /* This object represents a service message about a forum topic reopened in the 
      chat. Currently holds no information.  */
    ForumTopicReopened {
  
    }
           
    /* This object represents a game. Use BotFather to create and edit games, their 
      short names will act as unique identifiers.  */
    Game {
      /* Title of the game */
      title        : String
      /* Description of the game */
      description  : String
      /* Photo that will be displayed in the game message in chats. */
      photo        : List[PhotoSize]
      /* Optional. Brief description of the game or high scores 
      included in the game message. Can be automatically edited to 
      include current high scores for the game when the bot calls 
      setGameScore, or manually edited using editMessageText. 
      0-4096 characters. */
      text         : Option[String]
      /* Optional. Special entities that appear in text, such as 
      usernames, URLs, bot commands, etc. */
      textEntities : List[MessageEntity]
      /* Optional. Animation that will be displayed in the game 
      message in chats. Upload via BotFather */
      animation    : Option[Animation]
    }
           
    /* This object represents one row of the high scores table for a game.  */
    GameHighScore {
      /* Position in high score table for the game */
      position : Int
      /* User */
      user     : User
      /* Score */
      score    : Int
    }
           
    /* This object represents a service message about General forum topic hidden in 
      the chat. Currently holds no information.  */
    GeneralForumTopicHidden {
  
    }
           
    /* This object represents a service message about General forum topic unhidden in 
      the chat. Currently holds no information.  */
    GeneralForumTopicUnhidden {
  
    }
           
    /* This object represents a gift that can be sent by the bot.  */
    Gift {
      /* Unique identifier of the gift */
      id               : String
      /* The sticker that represents the gift */
      sticker          : Sticker
      /* The number of Telegram Stars that must be paid to send the 
      sticker */
      starCount        : Int
      /* Optional. The number of Telegram Stars that must be paid to 
      upgrade the gift to a unique one */
      upgradeStarCount : Option[Int]
      /* Optional. The total number of the gifts of this type that 
      can be sent; for limited gifts only */
      totalCount       : Option[Int]
      /* Optional. The number of remaining gifts of this type that 
      can be sent; for limited gifts only */
      remainingCount   : Option[Int]
    }
           
    /* Describes a service message about a regular gift that was sent or received.  */
    GiftInfo {
      /* Information about the gift */
      gift                    : Gift
      /* Optional. Unique identifier of the received gift for the 
      bot; only present for gifts received on behalf of business 
      accounts */
      ownedGiftId             : Option[String]
      /* Optional. Number of Telegram Stars that can be claimed by 
      the receiver by converting the gift; omitted if conversion 
      to Telegram Stars is impossible */
      convertStarCount        : Option[Int]
      /* Optional. Number of Telegram Stars that were prepaid by the 
      sender for the ability to upgrade the gift */
      prepaidUpgradeStarCount : Option[Int]
      /* Optional. True, if the gift can be upgraded to a unique 
      gift */
      canBeUpgraded           : Option[Boolean]
      /* Optional. Text of the message that was added to the gift */
      text                    : Option[String]
      /* Optional. Special entities that appear in the text */
      entities                : List[MessageEntity]
      /* Optional. True, if the sender and gift text are shown only 
      to the gift receiver; otherwise, everyone will be able to 
      see them */
      isPrivate               : Option[Boolean]
    }
           
    /* This object represent a list of gifts.  */
    Gifts {
      /* The list of gifts */
      gifts : List[Gift]
    }
           
    /* This object represents a message about a scheduled giveaway.  */
    Giveaway {
      /* The list of chats which the user must join to participate 
      in the giveaway */
      chats                         : List[Chat]
      /* Point in time (Unix timestamp) when winners of the giveaway 
      will be selected */
      winnersSelectionDate          : Int
      /* The number of users which are supposed to be selected as 
      winners of the giveaway */
      winnerCount                   : Int
      /* Optional. True, if only users who join the chats after the 
      giveaway started should be eligible to win */
      onlyNewMembers                : Option[Boolean]
      /* Optional. True, if the list of giveaway winners will be 
      visible to everyone */
      hasPublicWinners              : Option[Boolean]
      /* Optional. Description of additional giveaway prize */
      prizeDescription              : Option[String]
      /* Optional. A list of two-letter ISO 3166-1 alpha-2 country 
      codes indicating the countries from which eligible users for 
      the giveaway must come. If empty, then all users can 
      participate in the giveaway. Users with a phone number that 
      was bought on Fragment can always participate in giveaways. */
      countryCodes                  : List[String]
      /* Optional. The number of Telegram Stars to be split between 
      giveaway winners; for Telegram Star giveaways only */
      prizeStarCount                : Option[Int]
      /* Optional. The number of months the Telegram Premium 
      subscription won from the giveaway will be active for; for 
      Telegram Premium giveaways only */
      premiumSubscriptionMonthCount : Option[Int]
    }
           
    /* This object represents a service message about the completion of a giveaway 
      without public winners.  */
    GiveawayCompleted {
      /* Number of winners in the giveaway */
      winnerCount         : Int
      /* Optional. Number of undistributed prizes */
      unclaimedPrizeCount : Option[Int]
      /* Optional. Message with the giveaway that was completed, if 
      it wasn't deleted */
      giveawayMessage     : Option[Message]
      /* Optional. True, if the giveaway is a Telegram Star 
      giveaway. Otherwise, currently, the giveaway is a Telegram 
      Premium giveaway. */
      isStarGiveaway      : Option[Boolean]
    }
           
    /* This object represents a service message about the creation of a scheduled 
      giveaway.  */
    GiveawayCreated {
      /* Optional. The number of Telegram Stars to be split between 
      giveaway winners; for Telegram Star giveaways only */
      prizeStarCount : Option[Int]
    }
           
    /* This object represents a message about the completion of a giveaway with public 
      winners.  */
    GiveawayWinners {
      /* The chat that created the giveaway */
      chat                          : Chat
      /* Identifier of the message with the giveaway in the chat */
      giveawayMessageId             : Int
      /* Point in time (Unix timestamp) when winners of the giveaway 
      were selected */
      winnersSelectionDate          : Int
      /* Total number of winners in the giveaway */
      winnerCount                   : Int
      /* List of up to 100 winners of the giveaway */
      winners                       : List[User]
      /* Optional. The number of other chats the user had to join in 
      order to be eligible for the giveaway */
      additionalChatCount           : Option[Int]
      /* Optional. The number of Telegram Stars that were split 
      between giveaway winners; for Telegram Star giveaways only */
      prizeStarCount                : Option[Int]
      /* Optional. The number of months the Telegram Premium 
      subscription won from the giveaway will be active for; for 
      Telegram Premium giveaways only */
      premiumSubscriptionMonthCount : Option[Int]
      /* Optional. Number of undistributed prizes */
      unclaimedPrizeCount           : Option[Int]
      /* Optional. True, if only users who had joined the chats 
      after the giveaway started were eligible to win */
      onlyNewMembers                : Option[Boolean]
      /* Optional. True, if the giveaway was canceled because the 
      payment for it was refunded */
      wasRefunded                   : Option[Boolean]
      /* Optional. Description of additional giveaway prize */
      prizeDescription              : Option[String]
    }
           
    /* This object represents one button of an inline keyboard. Exactly one of the 
      optional fields must be used to specify type of the button.  */
    InlineKeyboardButton {
      /* Label text on the button */
      text                         : String
      /* Optional. HTTP or tg:// URL to be opened when the button is 
      pressed. Links tg://user?id=<user_id> can be used to mention 
      a user by their identifier without using a username, if this 
      is allowed by their privacy settings. */
      url                          : Option[String]
      /* Optional. Data to be sent in a callback query to the bot 
      when the button is pressed, 1-64 bytes */
      callbackData                 : Option[String]
      /* Optional. Description of the Web App that will be launched 
      when the user presses the button. The Web App will be able 
      to send an arbitrary message on behalf of the user using the 
      method answerWebAppQuery. Available only in private chats 
      between a user and the bot. Not supported for messages sent 
      on behalf of a Telegram Business account. */
      webApp                       : Option[WebAppInfo]
      /* Optional. An HTTPS URL used to automatically authorize the 
      user. Can be used as a replacement for the Telegram Login 
      Widget. */
      loginUrl                     : Option[LoginUrl]
      /* Optional. If set, pressing the button will prompt the user 
      to select one of their chats, open that chat and insert the 
      bot's username and the specified inline query in the input 
      field. May be empty, in which case just the bot's username 
      will be inserted. Not supported for messages sent on behalf 
      of a Telegram Business account. */
      switchInlineQuery            : Option[String]
      /* Optional. If set, pressing the button will insert the bot's 
      username and the specified inline query in the current 
      chat's input field. May be empty, in which case only the 
      bot's username will be inserted. This offers a quick way for 
      the user to open your bot in inline mode in the same chat - 
      good for selecting something from multiple options. Not 
      supported in channels and for messages sent on behalf of a 
      Telegram Business account. */
      switchInlineQueryCurrentChat : Option[String]
      /* Optional. If set, pressing the button will prompt the user 
      to select one of their chats of the specified type, open 
      that chat and insert the bot's username and the specified 
      inline query in the input field. Not supported for messages 
      sent on behalf of a Telegram Business account. */
      switchInlineQueryChosenChat  : Option[SwitchInlineQueryChosenChat]
      /* Optional. Description of the button that copies the 
      specified text to the clipboard. */
      copyText                     : Option[CopyTextButton]
      /* Optional. Description of the game that will be launched 
      when the user presses the button. NOTE: This type of button 
      must always be the first button in the first row. */
      callbackGame                 : Option[CallbackGame]
      /* Optional. Specify True, to send a Pay button. Substrings 
      ‚Äú‚≠ê‚Äù and ‚ÄúXTR‚Äù in the buttons's text will be replaced with a 
      Telegram Star icon. NOTE: This type of button must always be 
      the first button in the first row and can only be used in 
      invoice messages. */
      pay                          : Option[Boolean]
    }
           
    /* This object represents an incoming inline query. When the user sends an empty 
      query, your bot could return some default or trending results.  */
    InlineQuery {
      /* Unique identifier for this query */
      id       : String
      /* Sender */
      from     : User
      /* Text of the query (up to 256 characters) */
      query    : String
      /* Offset of the results to be returned, can be controlled by 
      the bot */
      offset   : String
      /* Optional. Type of the chat from which the inline query was 
      sent. Can be either ‚Äúsender‚Äù for a private chat with the 
      inline query sender, ‚Äúprivate‚Äù, ‚Äúgroup‚Äù, ‚Äúsupergroup‚Äù, or 
      ‚Äúchannel‚Äù. The chat type should be always known for requests 
      sent from official clients and most third-party clients, 
      unless the request was sent from a secret chat */
      chatType : Option[String]
      /* Optional. Sender location, only for bots that request user 
      location */
      location : Option[Location]
    }
           
    /* This object represents a button to be shown above inline query results. You 
      must use exactly one of the optional fields.  */
    InlineQueryResultsButton {
      /* Label text on the button */
      text           : String
      /* Optional. Description of the Web App that will be launched 
      when the user presses the button. The Web App will be able 
      to switch back to the inline mode using the method 
      switchInlineQuery inside the Web App. */
      webApp         : Option[WebAppInfo]
      /* Optional. Deep-linking parameter for the /start message 
      sent to the bot when a user presses the button. 1-64 
      characters, only A-Z, a-z, 0-9, _ and - are allowed. 
      Example: An inline bot that sends YouTube videos can ask the 
      user to connect the bot to their YouTube account to adapt 
      search results accordingly. To do this, it displays a 
      'Connect your YouTube account' button above the results, or 
      even before showing any. The user presses the button, 
      switches to a private chat with the bot and, in doing so, 
      passes a start parameter that instructs the bot to return an 
      OAuth link. Once done, the bot can offer a switch_inline 
      button so that the user can easily return to the chat where 
      they wanted to use the bot's inline capabilities. */
      startParameter : Option[String]
    }
           
    /* Describes a checklist to create.  */
    InputChecklist {
      /* Title of the checklist; 1-255 characters after entities 
      parsing */
      title                    : String
      /* Optional. Mode for parsing entities in the title. See 
      formatting options for more details. */
      parseMode                : Option[ParseMode]
      /* Optional. List of special entities that appear in the 
      title, which can be specified instead of parse_mode. 
      Currently, only bold, italic, underline, strikethrough, 
      spoiler, and custom_emoji entities are allowed. */
      titleEntities            : List[MessageEntity]
      /* List of 1-30 tasks in the checklist */
      tasks                    : List[InputChecklistTask]
      /* Optional. Pass True if other users can add tasks to the 
      checklist */
      othersCanAddTasks        : Option[Boolean]
      /* Optional. Pass True if other users can mark tasks as done 
      or not done in the checklist */
      othersCanMarkTasksAsDone : Option[Boolean]
    }
           
    /* Describes a task to add to a checklist.  */
    InputChecklistTask {
      /* Unique identifier of the task; must be positive and unique 
      among all task identifiers currently present in the 
      checklist */
      id           : Int
      /* Text of the task; 1-100 characters after entities parsing */
      text         : String
      /* Optional. Mode for parsing entities in the text. See 
      formatting options for more details. */
      parseMode    : Option[ParseMode]
      /* Optional. List of special entities that appear in the text, 
      which can be specified instead of parse_mode. Currently, 
      only bold, italic, underline, strikethrough, spoiler, and 
      custom_emoji entities are allowed. */
      textEntities : List[MessageEntity]
    }
           
    /* This object represents the contents of a file to be uploaded. Must be posted 
      using multipart/form-data in the usual way that files are uploaded via the 
      browser.  */
    InputFile {
  
    }
           
    /* This object contains information about one answer option in a poll to be sent.  */
    InputPollOption {
      /* Option text, 1-100 characters */
      text          : String
      /* Optional. Mode for parsing entities in the text. See 
      formatting options for more details. Currently, only custom 
      emoji entities are allowed */
      textParseMode : Option[ParseMode]
      /* Optional. A JSON-serialized list of special entities that 
      appear in the poll option text. It can be specified instead 
      of text_parse_mode */
      textEntities  : List[MessageEntity]
    }
           
    /* This object describes a sticker to be added to a sticker set.  */
    InputSticker {
      /* The added sticker. Pass a file_id as a String to send a 
      file that already exists on the Telegram servers, pass an 
      HTTP URL as a String for Telegram to get a file from the 
      Internet, or pass ‚Äúattach://<file_attach_name>‚Äù to upload a 
      new file using multipart/form-data under <file_attach_name> 
      name. Animated and video stickers can't be uploaded via HTTP 
      URL. */
      sticker      : IFile
      /* Format of the added sticker, must be one of ‚Äústatic‚Äù for a 
      .WEBP or .PNG image, ‚Äúanimated‚Äù for a .TGS animation, 
      ‚Äúvideo‚Äù for a .WEBM video */
      format       : String
      /* List of 1-20 emoji associated with the sticker */
      emojiList    : List[String]
      /* Optional. Position where the mask should be placed on 
      faces. For ‚Äúmask‚Äù stickers only. */
      maskPosition : Option[MaskPosition]
      /* Optional. List of 0-20 search keywords for the sticker with 
      total length of up to 64 characters. For ‚Äúregular‚Äù and 
      ‚Äúcustom_emoji‚Äù stickers only. */
      keywords     : List[String]
    }
           
    /* This object contains basic information about an invoice.  */
    Invoice {
      /* Product name */
      title          : String
      /* Product description */
      description    : String
      /* Unique bot deep-linking parameter that can be used to 
      generate this invoice */
      startParameter : String
      /* Three-letter ISO 4217 currency code, or ‚ÄúXTR‚Äù for payments 
      in Telegram Stars */
      currency       : String
      /* Total price in the smallest units of the currency (integer, 
      not float/double). For example, for a price of US$ 1.45 pass 
      amount = 145. See the exp parameter in currencies.json, it 
      shows the number of digits past the decimal point for each 
      currency (2 for the majority of currencies). */
      totalAmount    : Int
    }
           
    /* This object represents one button of the reply keyboard. At most one of the 
      optional fields must be used to specify type of the button. For simple text 
      buttons, String can be used instead of this object to specify the button text.  */
    KeyboardButton {
      /* Text of the button. If none of the optional fields are 
      used, it will be sent as a message when the button is 
      pressed */
      text            : String
      /* Optional. If specified, pressing the button will open a 
      list of suitable users. Identifiers of selected users will 
      be sent to the bot in a ‚Äúusers_shared‚Äù service message. 
      Available in private chats only. */
      requestUsers    : Option[KeyboardButtonRequestUsers]
      /* Optional. If specified, pressing the button will open a 
      list of suitable chats. Tapping on a chat will send its 
      identifier to the bot in a ‚Äúchat_shared‚Äù service message. 
      Available in private chats only. */
      requestChat     : Option[KeyboardButtonRequestChat]
      /* Optional. If True, the user's phone number will be sent as 
      a contact when the button is pressed. Available in private 
      chats only. */
      requestContact  : Option[Boolean]
      /* Optional. If True, the user's current location will be sent 
      when the button is pressed. Available in private chats only. */
      requestLocation : Option[Boolean]
      /* Optional. If specified, the user will be asked to create a 
      poll and send it to the bot when the button is pressed. 
      Available in private chats only. */
      requestPoll     : Option[KeyboardButtonPollType]
      /* Optional. If specified, the described Web App will be 
      launched when the button is pressed. The Web App will be 
      able to send a ‚Äúweb_app_data‚Äù service message. Available in 
      private chats only. */
      webApp          : Option[WebAppInfo]
    }
           
    /* This object represents type of a poll, which is allowed to be created and sent 
      when the corresponding button is pressed.  */
    KeyboardButtonPollType {
      /* Optional. If quiz is passed, the user will be allowed to 
      create only polls in the quiz mode. If regular is passed, 
      only regular polls will be allowed. Otherwise, the user will 
      be allowed to create a poll of any type. */
      type : Option[String]
    }
           
    /* This object defines the criteria used to request a suitable chat. Information 
      about the selected chat will be shared with the bot when the corresponding 
      button is pressed. The bot will be granted requested rights in the chat if 
      appropriate.  */
    KeyboardButtonRequestChat {
      /* Signed 32-bit identifier of the request, which will be 
      received back in the ChatShared object. Must be unique 
      within the message */
      requestId               : Int
      /* Pass True to request a channel chat, pass False to request 
      a group or a supergroup chat. */
      chatIsChannel           : Boolean
      /* Optional. Pass True to request a forum supergroup, pass 
      False to request a non-forum chat. If not specified, no 
      additional restrictions are applied. */
      chatIsForum             : Option[Boolean]
      /* Optional. Pass True to request a supergroup or a channel 
      with a username, pass False to request a chat without a 
      username. If not specified, no additional restrictions are 
      applied. */
      chatHasUsername         : Option[Boolean]
      /* Optional. Pass True to request a chat owned by the user. 
      Otherwise, no additional restrictions are applied. */
      chatIsCreated           : Option[Boolean]
      /* Optional. A JSON-serialized object listing the required 
      administrator rights of the user in the chat. The rights 
      must be a superset of bot_administrator_rights. If not 
      specified, no additional restrictions are applied. */
      userAdministratorRights : Option[ChatAdministratorRights]
      /* Optional. A JSON-serialized object listing the required 
      administrator rights of the bot in the chat. The rights must 
      be a subset of user_administrator_rights. If not specified, 
      no additional restrictions are applied. */
      botAdministratorRights  : Option[ChatAdministratorRights]
      /* Optional. Pass True to request a chat with the bot as a 
      member. Otherwise, no additional restrictions are applied. */
      botIsMember             : Option[Boolean]
      /* Optional. Pass True to request the chat's title */
      requestTitle            : Option[Boolean]
      /* Optional. Pass True to request the chat's username */
      requestUsername         : Option[Boolean]
      /* Optional. Pass True to request the chat's photo */
      requestPhoto            : Option[Boolean]
    }
           
    /* This object defines the criteria used to request suitable users. Information 
      about the selected users will be shared with the bot when the corresponding 
      button is pressed.  */
    KeyboardButtonRequestUsers {
      /* Signed 32-bit identifier of the request that will be 
      received back in the UsersShared object. Must be unique 
      within the message */
      requestId       : Int
      /* Optional. Pass True to request bots, pass False to request 
      regular users. If not specified, no additional restrictions 
      are applied. */
      userIsBot       : Option[Boolean]
      /* Optional. Pass True to request premium users, pass False to 
      request non-premium users. If not specified, no additional 
      restrictions are applied. */
      userIsPremium   : Option[Boolean]
      /* Optional. The maximum number of users to be selected; 1-10. 
      Defaults to 1. */
      maxQuantity     : Option[Int]
      /* Optional. Pass True to request the users' first and last 
      names */
      requestName     : Option[Boolean]
      /* Optional. Pass True to request the users' usernames */
      requestUsername : Option[Boolean]
      /* Optional. Pass True to request the users' photos */
      requestPhoto    : Option[Boolean]
    }
           
    /* This object represents a portion of the price for goods or services.  */
    LabeledPrice {
      /* Portion label */
      label  : String
      /* Price of the product in the smallest units of the currency 
      (integer, not float/double). For example, for a price of US$ 
      1.45 pass amount = 145. See the exp parameter in 
      currencies.json, it shows the number of digits past the 
      decimal point for each currency (2 for the majority of 
      currencies). */
      amount : Int
    }
           
    /* Describes the options used for link preview generation.  */
    LinkPreviewOptions {
      /* Optional. True, if the link preview is disabled */
      isDisabled       : Option[Boolean]
      /* Optional. URL to use for the link preview. If empty, then 
      the first URL found in the message text will be used */
      url              : Option[String]
      /* Optional. True, if the media in the link preview is 
      supposed to be shrunk; ignored if the URL isn't explicitly 
      specified or media size change isn't supported for the 
      preview */
      preferSmallMedia : Option[Boolean]
      /* Optional. True, if the media in the link preview is 
      supposed to be enlarged; ignored if the URL isn't explicitly 
      specified or media size change isn't supported for the 
      preview */
      preferLargeMedia : Option[Boolean]
      /* Optional. True, if the link preview must be shown above the 
      message text; otherwise, the link preview will be shown 
      below the message text */
      showAboveText    : Option[Boolean]
    }
           
    /* This object represents a point on the map.  */
    Location {
      /* Latitude as defined by the sender */
      latitude             : Float
      /* Longitude as defined by the sender */
      longitude            : Float
      /* Optional. The radius of uncertainty for the location, 
      measured in meters; 0-1500 */
      horizontalAccuracy   : Option[Float]
      /* Optional. Time relative to the message sending date, during 
      which the location can be updated; in seconds. For active 
      live locations only. */
      livePeriod           : Option[Int]
      /* Optional. The direction in which user is moving, in 
      degrees; 1-360. For active live locations only. */
      heading              : Option[Int]
      /* Optional. The maximum distance for proximity alerts about 
      approaching another chat member, in meters. For sent live 
      locations only. */
      proximityAlertRadius : Option[Int]
    }
           
    /* Describes the physical address of a location.  */
    LocationAddress {
      /* The two-letter ISO 3166-1 alpha-2 country code of the 
      country where the location is located */
      countryCode : String
      /* Optional. State of the location */
      state       : Option[String]
      /* Optional. City of the location */
      city        : Option[String]
      /* Optional. Street address of the location */
      street      : Option[String]
    }
           
    /* This object represents a parameter of the inline keyboard button used to 
      automatically authorize a user. Serves as a great replacement for the Telegram 
      Login Widget when the user is coming from Telegram. All the user needs to do is 
      tap/click a button and confirm that they want to log in:  */
    LoginUrl {
      /* An HTTPS URL to be opened with user authorization data 
      added to the query string when the button is pressed. If the 
      user refuses to provide authorization data, the original URL 
      without information about the user will be opened. The data 
      added is the same as described in Receiving authorization 
      data. NOTE: You must always check the hash of the received 
      data to verify the authentication and the integrity of the 
      data as described in Checking authorization. */
      url                : String
      /* Optional. New text of the button in forwarded messages. */
      forwardText        : Option[String]
      /* Optional. Username of a bot, which will be used for user 
      authorization. See Setting up a bot for more details. If not 
      specified, the current bot's username will be assumed. The 
      url's domain must be the same as the domain linked with the 
      bot. See Linking your domain to the bot for more details. */
      botUsername        : Option[String]
      /* Optional. Pass True to request the permission for your bot 
      to send messages to the user. */
      requestWriteAccess : Option[Boolean]
    }
           
    /* This object describes the position on faces where a mask should be placed by 
      default.  */
    MaskPosition {
      /* The part of the face relative to which the mask should be 
      placed. One of ‚Äúforehead‚Äù, ‚Äúeyes‚Äù, ‚Äúmouth‚Äù, or ‚Äúchin‚Äù. */
      point  : String
      /* Shift by X-axis measured in widths of the mask scaled to 
      the face size, from left to right. For example, choosing 
      -1.0 will place mask just to the left of the default mask 
      position. */
      xShift : Float
      /* Shift by Y-axis measured in heights of the mask scaled to 
      the face size, from top to bottom. For example, 1.0 will 
      place the mask just below the default mask position. */
      yShift : Float
      /* Mask scaling coefficient. For example, 2.0 means double 
      size. */
      scale  : Float
    }
           
    /* This object represents a service message about a change in auto-delete timer 
      settings.  */
    MessageAutoDeleteTimerChanged {
      /* New auto-delete time for messages in the chat; in seconds */
      messageAutoDeleteTime : Int
    }
           
    /* This object represents a unique message identifier.  */
    MessageId {
      /* Unique message identifier. In specific instances (e.g., 
      message containing a video sent to a big chat), the server 
      might automatically schedule a message instead of sending it 
      immediately. In such cases, this field will be 0 and the 
      relevant message will be unusable until it is actually sent */
      messageId : Int
    }
           
    /* This object represents reaction changes on a message with anonymous reactions.  */
    MessageReactionCountUpdated {
      /* The chat containing the message */
      chat      : Chat
      /* Unique message identifier inside the chat */
      messageId : Int
      /* Date of the change in Unix time */
      date      : Int
      /* List of reactions that are present on the message */
      reactions : List[ReactionCount]
    }
           
    /* This object represents a change of a reaction on a message performed by a user.  */
    MessageReactionUpdated {
      /* The chat containing the message the user reacted to */
      chat        : Chat
      /* Unique identifier of the message inside the chat */
      messageId   : Int
      /* Optional. The user that changed the reaction, if the user 
      isn't anonymous */
      user        : Option[User]
      /* Optional. The chat on behalf of which the reaction was 
      changed, if the user is anonymous */
      actorChat   : Option[Chat]
      /* Date of the change in Unix time */
      date        : Int
      /* Previous list of reaction types that were set by the user */
      oldReaction : List[ReactionType]
      /* New list of reaction types that have been set by the user */
      newReaction : List[ReactionType]
    }
           
    /* This object represents information about an order.  */
    OrderInfo {
      /* Optional. User name */
      name            : Option[String]
      /* Optional. User's phone number */
      phoneNumber     : Option[String]
      /* Optional. User email */
      email           : Option[String]
      /* Optional. User shipping address */
      shippingAddress : Option[ShippingAddress]
    }
           
    /* Contains the list of gifts received and owned by a user or a chat.  */
    OwnedGifts {
      /* The total number of gifts owned by the user or the chat */
      totalCount : Int
      /* The list of gifts */
      gifts      : List[OwnedGift]
      /* Optional. Offset for the next request. If empty, then there 
      are no more results */
      nextOffset : Option[String]
    }
           
    /* Describes the paid media added to a message.  */
    PaidMediaInfo {
      /* The number of Telegram Stars that must be paid to buy 
      access to the media */
      starCount : Int
      /* Information about the paid media */
      paidMedia : List[PaidMedia]
    }
           
    /* This object contains information about a paid media purchase.  */
    PaidMediaPurchased {
      /* User who purchased the media */
      from             : User
      /* Bot-specified paid media payload */
      paidMediaPayload : String
    }
           
    /* Describes a service message about a change in the price of paid messages within 
      a chat.  */
    PaidMessagePriceChanged {
      /* The new number of Telegram Stars that must be paid by 
      non-administrator users of the supergroup chat for each sent 
      message */
      paidMessageStarCount : Int
    }
           
    /* Describes Telegram Passport data shared with the bot by the user.  */
    PassportData {
      /* Array with information about documents and other Telegram 
      Passport elements that was shared with the bot */
      data        : List[EncryptedPassportElement]
      /* Encrypted credentials required to decrypt the data */
      credentials : EncryptedCredentials
    }
           
    /* This object represents a file uploaded to Telegram Passport. Currently all 
      Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.  */
    PassportFile {
      /* Identifier for this file, which can be used to download or 
      reuse the file */
      fileId       : String
      /* Unique identifier for this file, which is supposed to be 
      the same over time and for different bots. Can't be used to 
      download or reuse the file. */
      fileUniqueId : String
      /* File size in bytes */
      fileSize     : Long
      /* Unix time when the file was uploaded */
      fileDate     : Int
    }
           
    /* This object represents one size of a photo or a file / sticker thumbnail.  */
    PhotoSize {
      /* Identifier for this file, which can be used to download or 
      reuse the file */
      fileId       : String
      /* Unique identifier for this file, which is supposed to be 
      the same over time and for different bots. Can't be used to 
      download or reuse the file. */
      fileUniqueId : String
      /* Photo width */
      width        : Int
      /* Photo height */
      height       : Int
      /* Optional. File size in bytes */
      fileSize     : Option[Long]
    }
           
    /* This object contains information about a poll.  */
    Poll {
      /* Unique poll identifier */
      id                    : String
      /* Poll question, 1-300 characters */
      question              : String
      /* Optional. Special entities that appear in the question. 
      Currently, only custom emoji entities are allowed in poll 
      questions */
      questionEntities      : List[MessageEntity]
      /* List of poll options */
      options               : List[PollOption]
      /* Total number of users that voted in the poll */
      totalVoterCount       : Int
      /* True, if the poll is closed */
      isClosed              : Boolean
      /* True, if the poll is anonymous */
      isAnonymous           : Boolean
      /* Poll type, currently can be ‚Äúregular‚Äù or ‚Äúquiz‚Äù */
      type                  : String
      /* True, if the poll allows multiple answers */
      allowsMultipleAnswers : Boolean
      /* Optional. 0-based identifier of the correct answer option. 
      Available only for polls in the quiz mode, which are closed, 
      or was sent (not forwarded) by the bot or to the private 
      chat with the bot. */
      correctOptionId       : Option[Int]
      /* Optional. Text that is shown when a user chooses an 
      incorrect answer or taps on the lamp icon in a quiz-style 
      poll, 0-200 characters */
      explanation           : Option[String]
      /* Optional. Special entities like usernames, URLs, bot 
      commands, etc. that appear in the explanation */
      explanationEntities   : List[MessageEntity]
      /* Optional. Amount of time in seconds the poll will be active 
      after creation */
      openPeriod            : Option[Int]
      /* Optional. Point in time (Unix timestamp) when the poll will 
      be automatically closed */
      closeDate             : Option[Int]
    }
           
    /* This object represents an answer of a user in a non-anonymous poll.  */
    PollAnswer {
      /* Unique poll identifier */
      pollId    : String
      /* Optional. The chat that changed the answer to the poll, if 
      the voter is anonymous */
      voterChat : Option[Chat]
      /* Optional. The user that changed the answer to the poll, if 
      the voter isn't anonymous */
      user      : Option[User]
      /* 0-based identifiers of chosen answer options. May be empty 
      if the vote was retracted. */
      optionIds : List[Int]
    }
           
    /* This object contains information about one answer option in a poll.  */
    PollOption {
      /* Option text, 1-100 characters */
      text         : String
      /* Optional. Special entities that appear in the option text. 
      Currently, only custom emoji entities are allowed in poll 
      option texts */
      textEntities : List[MessageEntity]
      /* Number of users that voted for this option */
      voterCount   : Int
    }
           
    /* This object contains information about an incoming pre-checkout query.  */
    PreCheckoutQuery {
      /* Unique query identifier */
      id               : String
      /* User who sent the query */
      from             : User
      /* Three-letter ISO 4217 currency code, or ‚ÄúXTR‚Äù for payments 
      in Telegram Stars */
      currency         : String
      /* Total price in the smallest units of the currency (integer, 
      not float/double). For example, for a price of US$ 1.45 pass 
      amount = 145. See the exp parameter in currencies.json, it 
      shows the number of digits past the decimal point for each 
      currency (2 for the majority of currencies). */
      totalAmount      : Int
      /* Bot-specified invoice payload */
      invoicePayload   : String
      /* Optional. Identifier of the shipping option chosen by the 
      user */
      shippingOptionId : Option[String]
      /* Optional. Order information provided by the user */
      orderInfo        : Option[OrderInfo]
    }
           
    /* Describes an inline message to be sent by a user of a Mini App.  */
    PreparedInlineMessage {
      /* Unique identifier of the prepared message */
      id             : String
      /* Expiration date of the prepared message, in Unix time. 
      Expired prepared messages can no longer be used */
      expirationDate : Int
    }
           
    /* This object represents the content of a service message, sent whenever a user 
      in the chat triggers a proximity alert set by another user.  */
    ProximityAlertTriggered {
      /* User that triggered the alert */
      traveler : User
      /* User that set the alert */
      watcher  : User
      /* The distance between the users */
      distance : Int
    }
           
    /* Represents a reaction added to a message along with the number of times it was 
      added.  */
    ReactionCount {
      /* Type of the reaction */
      type       : ReactionType
      /* Number of times the reaction was added */
      totalCount : Int
    }
           
    /* This object contains basic information about a refunded payment.  */
    RefundedPayment {
      /* Three-letter ISO 4217 currency code, or ‚ÄúXTR‚Äù for payments 
      in Telegram Stars. Currently, always ‚ÄúXTR‚Äù */
      currency                : String
      /* Total refunded price in the smallest units of the currency 
      (integer, not float/double). For example, for a price of US$ 
      1.45, total_amount = 145. See the exp parameter in 
      currencies.json, it shows the number of digits past the 
      decimal point for each currency (2 for the majority of 
      currencies). */
      totalAmount             : Int
      /* Bot-specified invoice payload */
      invoicePayload          : String
      /* Telegram payment identifier */
      telegramPaymentChargeId : String
      /* Optional. Provider payment identifier */
      providerPaymentChargeId : Option[String]
    }
           
    /* Describes reply parameters for the message that is being sent.  */
    ReplyParameters {
      /* Identifier of the message that will be replied to in the 
      current chat, or in the chat chat_id if it is specified */
      messageId                : Int
      /* Optional. If the message to be replied to is from a 
      different chat, unique identifier for the chat or username 
      of the channel (in the format &#064;channelusername). Not 
      supported for messages sent on behalf of a business account. */
      chatId                   : Option[ChatId]
      /* Optional. Pass True if the message should be sent even if 
      the specified message to be replied to is not found. Always 
      False for replies in another chat or forum topic. Always 
      True for messages sent on behalf of a business account. */
      allowSendingWithoutReply : Option[Boolean]
      /* Optional. Quoted part of the message to be replied to; 
      0-1024 characters after entities parsing. The quote must be 
      an exact substring of the message to be replied to, 
      including bold, italic, underline, strikethrough, spoiler, 
      and custom_emoji entities. The message will fail to send if 
      the quote isn't found in the original message. */
      quote                    : Option[String]
      /* Optional. Mode for parsing entities in the quote. See 
      formatting options for more details. */
      quoteParseMode           : Option[ParseMode]
      /* Optional. A JSON-serialized list of special entities that 
      appear in the quote. It can be specified instead of 
      quote_parse_mode. */
      quoteEntities            : List[MessageEntity]
      /* Optional. Position of the quote in the original message in 
      UTF-16 code units */
      quotePosition            : Option[Int]
    }
           
    /* Describes why a request was unsuccessful.  */
    ResponseParameters {
      /* Optional. The group has been migrated to a supergroup with 
      the specified identifier. This number may have more than 32 
      significant bits and some programming languages may have 
      difficulty/silent defects in interpreting it. But it has at 
      most 52 significant bits, so a signed 64-bit integer or 
      double-precision float type are safe for storing this 
      identifier. */
      migrateToChatId : Option[Long]
      /* Optional. In case of exceeding flood control, the number of 
      seconds left to wait before the request can be repeated */
      retryAfter      : Option[Int]
    }
           
    /* Describes an inline message sent by a Web App on behalf of a user.  */
    SentWebAppMessage {
      /* Optional. Identifier of the sent inline message. Available 
      only if there is an inline keyboard attached to the message. */
      inlineMessageId : Option[String]
    }
           
    /* This object contains information about a user that was shared with the bot 
      using a KeyboardButtonRequestUsers button.  */
    SharedUser {
      /* Identifier of the shared user. This number may have more 
      than 32 significant bits and some programming languages may 
      have difficulty/silent defects in interpreting it. But it 
      has at most 52 significant bits, so 64-bit integers or 
      double-precision float types are safe for storing these 
      identifiers. The bot may not have access to the user and 
      could be unable to use this identifier, unless the user is 
      already known to the bot by some other means. */
      userId    : Long
      /* Optional. First name of the user, if the name was requested 
      by the bot */
      firstName : Option[String]
      /* Optional. Last name of the user, if the name was requested 
      by the bot */
      lastName  : Option[String]
      /* Optional. Username of the user, if the username was 
      requested by the bot */
      username  : Option[String]
      /* Optional. Available sizes of the chat photo, if the photo 
      was requested by the bot */
      photo     : List[PhotoSize]
    }
           
    /* This object represents a shipping address.  */
    ShippingAddress {
      /* Two-letter ISO 3166-1 alpha-2 country code */
      countryCode : String
      /* State, if applicable */
      state       : String
      /* City */
      city        : String
      /* First line for the address */
      streetLine1 : String
      /* Second line for the address */
      streetLine2 : String
      /* Address post code */
      postCode    : String
    }
           
    /* This object represents one shipping option.  */
    ShippingOption {
      /* Shipping option identifier */
      id     : String
      /* Option title */
      title  : String
      /* List of price portions */
      prices : List[LabeledPrice]
    }
           
    /* This object contains information about an incoming shipping query.  */
    ShippingQuery {
      /* Unique query identifier */
      id              : String
      /* User who sent the query */
      from            : User
      /* Bot-specified invoice payload */
      invoicePayload  : String
      /* User specified shipping address */
      shippingAddress : ShippingAddress
    }
           
    /* Describes an amount of Telegram Stars.  */
    StarAmount {
      /* Integer amount of Telegram Stars, rounded to 0; can be 
      negative */
      amount         : Int
      /* Optional. The number of 1/1000000000 shares of Telegram 
      Stars; from -999999999 to 999999999; can be negative if and 
      only if amount is non-positive */
      nanostarAmount : Option[Int]
    }
           
    /* Describes a Telegram Star transaction. Note that if the buyer initiates a 
      chargeback with the payment provider from whom they acquired Stars (e.g., Apple, 
      Google) following this transaction, the refunded Stars will be deducted from the 
      bot's balance. This is outside of Telegram's control.  */
    StarTransaction {
      /* Unique identifier of the transaction. Coincides with the 
      identifier of the original transaction for refund 
      transactions. Coincides with 
      SuccessfulPayment.telegram_payment_charge_id for successful 
      incoming payments from users. */
      id             : String
      /* Integer amount of Telegram Stars transferred by the 
      transaction */
      amount         : Int
      /* Optional. The number of 1/1000000000 shares of Telegram 
      Stars transferred by the transaction; from 0 to 999999999 */
      nanostarAmount : Option[Int]
      /* Date the transaction was created in Unix time */
      date           : Int
      /* Optional. Source of an incoming transaction (e.g., a user 
      purchasing goods or services, Fragment refunding a failed 
      withdrawal). Only for incoming transactions */
      source         : Option[TransactionPartner]
      /* Optional. Receiver of an outgoing transaction (e.g., a user 
      for a purchase refund, Fragment for a withdrawal). Only for 
      outgoing transactions */
      receiver       : Option[TransactionPartner]
    }
           
    /* Contains a list of Telegram Star transactions.  */
    StarTransactions {
      /* The list of transactions */
      transactions : List[StarTransaction]
    }
           
    /* This object represents a sticker.  */
    Sticker {
      /* Identifier for this file, which can be used to download or 
      reuse the file */
      fileId           : String
      /* Unique identifier for this file, which is supposed to be 
      the same over time and for different bots. Can't be used to 
      download or reuse the file. */
      fileUniqueId     : String
      /* Type of the sticker, currently one of ‚Äúregular‚Äù, ‚Äúmask‚Äù, 
      ‚Äúcustom_emoji‚Äù. The type of the sticker is independent from 
      its format, which is determined by the fields is_animated 
      and is_video. */
      type             : String
      /* Sticker width */
      width            : Int
      /* Sticker height */
      height           : Int
      /* True, if the sticker is animated */
      isAnimated       : Boolean
      /* True, if the sticker is a video sticker */
      isVideo          : Boolean
      /* Optional. Sticker thumbnail in the .WEBP or .JPG format */
      thumbnail        : Option[PhotoSize]
      /* Optional. Emoji associated with the sticker */
      emoji            : Option[String]
      /* Optional. Name of the sticker set to which the sticker 
      belongs */
      setName          : Option[String]
      /* Optional. For premium regular stickers, premium animation 
      for the sticker */
      premiumAnimation : Option[File]
      /* Optional. For mask stickers, the position where the mask 
      should be placed */
      maskPosition     : Option[MaskPosition]
      /* Optional. For custom emoji stickers, unique identifier of 
      the custom emoji */
      customEmojiId    : Option[String]
      /* Optional. True, if the sticker must be repainted to a text 
      color in messages, the color of the Telegram Premium badge 
      in emoji status, white color on chat photos, or another 
      appropriate color in other places */
      needsRepainting  : Option[Boolean]
      /* Optional. File size in bytes */
      fileSize         : Option[Long]
    }
           
    /* This object represents a sticker set.  */
    StickerSet {
      /* Sticker set name */
      name        : String
      /* Sticker set title */
      title       : String
      /* Type of stickers in the set, currently one of ‚Äúregular‚Äù, 
      ‚Äúmask‚Äù, ‚Äúcustom_emoji‚Äù */
      stickerType : String
      /* List of all set stickers */
      stickers    : List[Sticker]
      /* Optional. Sticker set thumbnail in the .WEBP, .TGS, or 
      .WEBM format */
      thumbnail   : Option[PhotoSize]
    }
           
    /* This object represents a story.  */
    Story {
      /* Chat that posted the story */
      chat : Chat
      /* Unique identifier for the story in the chat */
      id   : Int
    }
           
    /* Describes a clickable area on a story media.  */
    StoryArea {
      /* Position of the area */
      position : StoryAreaPosition
      /* Type of the area */
      type     : StoryAreaType
    }
           
    /* Describes the position of a clickable area within a story.  */
    StoryAreaPosition {
      /* The abscissa of the area's center, as a percentage of the 
      media width */
      xPercentage            : Float
      /* The ordinate of the area's center, as a percentage of the 
      media height */
      yPercentage            : Float
      /* The width of the area's rectangle, as a percentage of the 
      media width */
      widthPercentage        : Float
      /* The height of the area's rectangle, as a percentage of the 
      media height */
      heightPercentage       : Float
      /* The clockwise rotation angle of the rectangle, in degrees; 
      0-360 */
      rotationAngle          : Float
      /* The radius of the rectangle corner rounding, as a 
      percentage of the media width */
      cornerRadiusPercentage : Float
    }
           
    /* This object contains basic information about a successful payment. Note that if 
      the buyer initiates a chargeback with the relevant payment provider following 
      this transaction, the funds may be debited from your balance. This is outside of 
      Telegram's control.  */
    SuccessfulPayment {
      /* Three-letter ISO 4217 currency code, or ‚ÄúXTR‚Äù for payments 
      in Telegram Stars */
      currency                   : String
      /* Total price in the smallest units of the currency (integer, 
      not float/double). For example, for a price of US$ 1.45 pass 
      amount = 145. See the exp parameter in currencies.json, it 
      shows the number of digits past the decimal point for each 
      currency (2 for the majority of currencies). */
      totalAmount                : Int
      /* Bot-specified invoice payload */
      invoicePayload             : String
      /* Optional. Expiration date of the subscription, in Unix 
      time; for recurring payments only */
      subscriptionExpirationDate : Option[Int]
      /* Optional. True, if the payment is a recurring payment for a 
      subscription */
      isRecurring                : Option[Boolean]
      /* Optional. True, if the payment is the first payment for a 
      subscription */
      isFirstRecurring           : Option[Boolean]
      /* Optional. Identifier of the shipping option chosen by the 
      user */
      shippingOptionId           : Option[String]
      /* Optional. Order information provided by the user */
      orderInfo                  : Option[OrderInfo]
      /* Telegram payment identifier */
      telegramPaymentChargeId    : String
      /* Provider payment identifier */
      providerPaymentChargeId    : String
    }
           
    /* This object represents an inline button that switches the current user to 
      inline mode in a chosen chat, with an optional default inline query.  */
    SwitchInlineQueryChosenChat {
      /* Optional. The default inline query to be inserted in the 
      input field. If left empty, only the bot's username will be 
      inserted */
      query             : Option[String]
      /* Optional. True, if private chats with users can be chosen */
      allowUserChats    : Option[Boolean]
      /* Optional. True, if private chats with bots can be chosen */
      allowBotChats     : Option[Boolean]
      /* Optional. True, if group and supergroup chats can be chosen */
      allowGroupChats   : Option[Boolean]
      /* Optional. True, if channel chats can be chosen */
      allowChannelChats : Option[Boolean]
    }
           
    /* This object contains information about the quoted part of a message that is 
      replied to by the given message.  */
    TextQuote {
      /* Text of the quoted part of a message that is replied to by 
      the given message */
      text     : String
      /* Optional. Special entities that appear in the quote. 
      Currently, only bold, italic, underline, strikethrough, 
      spoiler, and custom_emoji entities are kept in quotes. */
      entities : List[MessageEntity]
      /* Approximate quote position in the original message in 
      UTF-16 code units as specified by the sender */
      position : Int
      /* Optional. True, if the quote was chosen manually by the 
      message sender. Otherwise, the quote was added automatically 
      by the server. */
      isManual : Option[Boolean]
    }
           
    /* This object describes a unique gift that was upgraded from a regular gift.  */
    UniqueGift {
      /* Human-readable name of the regular gift from which this 
      unique gift was upgraded */
      baseName : String
      /* Unique name of the gift. This name can be used in 
      https://t.me/nft/... links and story areas */
      name     : String
      /* Unique number of the upgraded gift among gifts upgraded 
      from the same regular gift */
      number   : Int
      /* Model of the gift */
      model    : UniqueGiftModel
      /* Symbol of the gift */
      symbol   : UniqueGiftSymbol
      /* Backdrop of the gift */
      backdrop : UniqueGiftBackdrop
    }
           
    /* This object describes the backdrop of a unique gift.  */
    UniqueGiftBackdrop {
      /* Name of the backdrop */
      name           : String
      /* Colors of the backdrop */
      colors         : UniqueGiftBackdropColors
      /* The number of unique gifts that receive this backdrop for 
      every 1000 gifts upgraded */
      rarityPerMille : Int
    }
           
    /* This object describes the colors of the backdrop of a unique gift.  */
    UniqueGiftBackdropColors {
      /* The color in the center of the backdrop in RGB format */
      centerColor : Int
      /* The color on the edges of the backdrop in RGB format */
      edgeColor   : Int
      /* The color to be applied to the symbol in RGB format */
      symbolColor : Int
      /* The color for the text on the backdrop in RGB format */
      textColor   : Int
    }
           
    /* Describes a service message about a unique gift that was sent or received.  */
    UniqueGiftInfo {
      /* Information about the gift */
      gift                : UniqueGift
      /* Origin of the gift. Currently, either ‚Äúupgrade‚Äù for gifts 
      upgraded from regular gifts, ‚Äútransfer‚Äù for gifts 
      transferred from other users or channels, or ‚Äúresale‚Äù for 
      gifts bought from other users */
      origin              : String
      /* Optional. For gifts bought from other users, the price paid 
      for the gift */
      lastResaleStarCount : Option[Int]
      /* Optional. Unique identifier of the received gift for the 
      bot; only present for gifts received on behalf of business 
      accounts */
      ownedGiftId         : Option[String]
      /* Optional. Number of Telegram Stars that must be paid to 
      transfer the gift; omitted if the bot cannot transfer the 
      gift */
      transferStarCount   : Option[Int]
      /* Optional. Point in time (Unix timestamp) when the gift can 
      be transferred. If it is in the past, then the gift can be 
      transferred now */
      nextTransferDate    : Option[Int]
    }
           
    /* This object describes the model of a unique gift.  */
    UniqueGiftModel {
      /* Name of the model */
      name           : String
      /* The sticker that represents the unique gift */
      sticker        : Sticker
      /* The number of unique gifts that receive this model for 
      every 1000 gifts upgraded */
      rarityPerMille : Int
    }
           
    /* This object describes the symbol shown on the pattern of a unique gift.  */
    UniqueGiftSymbol {
      /* Name of the symbol */
      name           : String
      /* The sticker that represents the unique gift */
      sticker        : Sticker
      /* The number of unique gifts that receive this model for 
      every 1000 gifts upgraded */
      rarityPerMille : Int
    }
           
    /* This object represents an incoming update. At most one of the optional 
      parameters can be present in any given update.  */
    Update {
      /* The update's unique identifier. Update identifiers start 
      from a certain positive number and increase sequentially. 
      This identifier becomes especially handy if you're using 
      webhooks, since it allows you to ignore repeated updates or 
      to restore the correct update sequence, should they get out 
      of order. If there are no new updates for at least a week, 
      then identifier of the next update will be chosen randomly 
      instead of sequentially. */
      updateId                : Int
      /* Optional. New incoming message of any kind - text, photo, 
      sticker, etc. */
      message                 : Option[Message]
      /* Optional. New version of a message that is known to the bot 
      and was edited. This update may at times be triggered by 
      changes to message fields that are either unavailable or not 
      actively used by your bot. */
      editedMessage           : Option[Message]
      /* Optional. New incoming channel post of any kind - text, 
      photo, sticker, etc. */
      channelPost             : Option[Message]
      /* Optional. New version of a channel post that is known to 
      the bot and was edited. This update may at times be 
      triggered by changes to message fields that are either 
      unavailable or not actively used by your bot. */
      editedChannelPost       : Option[Message]
      /* Optional. The bot was connected to or disconnected from a 
      business account, or a user edited an existing connection 
      with the bot */
      businessConnection      : Option[BusinessConnection]
      /* Optional. New message from a connected business account */
      businessMessage         : Option[Message]
      /* Optional. New version of a message from a connected 
      business account */
      editedBusinessMessage   : Option[Message]
      /* Optional. Messages were deleted from a connected business 
      account */
      deletedBusinessMessages : Option[BusinessMessagesDeleted]
      /* Optional. A reaction to a message was changed by a user. 
      The bot must be an administrator in the chat and must 
      explicitly specify "message_reaction" in the list of 
      allowed_updates to receive these updates. The update isn't 
      received for reactions set by bots. */
      messageReaction         : Option[MessageReactionUpdated]
      /* Optional. Reactions to a message with anonymous reactions 
      were changed. The bot must be an administrator in the chat 
      and must explicitly specify "message_reaction_count" in the 
      list of allowed_updates to receive these updates. The 
      updates are grouped and can be sent with delay up to a few 
      minutes. */
      messageReactionCount    : Option[MessageReactionCountUpdated]
      /* Optional. New incoming inline query */
      inlineQuery             : Option[InlineQuery]
      /* Optional. The result of an inline query that was chosen by 
      a user and sent to their chat partner. Please see our 
      documentation on the feedback collecting for details on how 
      to enable these updates for your bot. */
      chosenInlineResult      : Option[ChosenInlineResult]
      /* Optional. New incoming callback query */
      callbackQuery           : Option[CallbackQuery]
      /* Optional. New incoming shipping query. Only for invoices 
      with flexible price */
      shippingQuery           : Option[ShippingQuery]
      /* Optional. New incoming pre-checkout query. Contains full 
      information about checkout */
      preCheckoutQuery        : Option[PreCheckoutQuery]
      /* Optional. A user purchased paid media with a non-empty 
      payload sent by the bot in a non-channel chat */
      purchasedPaidMedia      : Option[PaidMediaPurchased]
      /* Optional. New poll state. Bots receive only updates about 
      manually stopped polls and polls, which are sent by the bot */
      poll                    : Option[Poll]
      /* Optional. A user changed their answer in a non-anonymous 
      poll. Bots receive new votes only in polls that were sent by 
      the bot itself. */
      pollAnswer              : Option[PollAnswer]
      /* Optional. The bot's chat member status was updated in a 
      chat. For private chats, this update is received only when 
      the bot is blocked or unblocked by the user. */
      myChatMember            : Option[ChatMemberUpdated]
      /* Optional. A chat member's status was updated in a chat. The 
      bot must be an administrator in the chat and must explicitly 
      specify "chat_member" in the list of allowed_updates to 
      receive these updates. */
      chatMember              : Option[ChatMemberUpdated]
      /* Optional. A request to join the chat has been sent. The bot 
      must have the can_invite_users administrator right in the 
      chat to receive these updates. */
      chatJoinRequest         : Option[ChatJoinRequest]
      /* Optional. A chat boost was added or changed. The bot must 
      be an administrator in the chat to receive these updates. */
      chatBoost               : Option[ChatBoostUpdated]
      /* Optional. A boost was removed from a chat. The bot must be 
      an administrator in the chat to receive these updates. */
      removedChatBoost        : Option[ChatBoostRemoved]
    }
           
    /* This object represents a Telegram user or bot.  */
    User {
      /* Unique identifier for this user or bot. This number may 
      have more than 32 significant bits and some programming 
      languages may have difficulty/silent defects in interpreting 
      it. But it has at most 52 significant bits, so a 64-bit 
      integer or double-precision float type are safe for storing 
      this identifier. */
      id                      : Long
      /* True, if this user is a bot */
      isBot                   : Boolean
      /* User's or bot's first name */
      firstName               : String
      /* Optional. User's or bot's last name */
      lastName                : Option[String]
      /* Optional. User's or bot's username */
      username                : Option[String]
      /* Optional. IETF language tag of the user's language */
      languageCode            : Option[String]
      /* Optional. True, if this user is a Telegram Premium user */
      isPremium               : Option[Boolean]
      /* Optional. True, if this user added the bot to the 
      attachment menu */
      addedToAttachmentMenu   : Option[Boolean]
      /* Optional. True, if the bot can be invited to groups. 
      Returned only in getMe. */
      canJoinGroups           : Option[Boolean]
      /* Optional. True, if privacy mode is disabled for the bot. 
      Returned only in getMe. */
      canReadAllGroupMessages : Option[Boolean]
      /* Optional. True, if the bot supports inline queries. 
      Returned only in getMe. */
      supportsInlineQueries   : Option[Boolean]
      /* Optional. True, if the bot can be connected to a Telegram 
      Business account to receive its messages. Returned only in 
      getMe. */
      canConnectToBusiness    : Option[Boolean]
      /* Optional. True, if the bot has a main Web App. Returned 
      only in getMe. */
      hasMainWebApp           : Option[Boolean]
    }
           
    /* This object represents a list of boosts added to a chat by a user.  */
    UserChatBoosts {
      /* The list of boosts added to the chat by the user */
      boosts : List[ChatBoost]
    }
           
    /* This object represent a user's profile pictures.  */
    UserProfilePhotos {
      /* Total number of profile pictures the target user has */
      totalCount : Int
      /* Requested profile pictures (in up to 4 sizes each) */
      photos     : List[List[PhotoSize]]
    }
           
    /* This object contains information about the users whose identifiers were shared 
      with the bot using a KeyboardButtonRequestUsers button.  */
    UsersShared {
      /* Identifier of the request */
      requestId : Int
      /* Information about users shared with the bot. */
      users     : List[SharedUser]
    }
           
    /* This object represents a venue.  */
    Venue {
      /* Venue location. Can't be a live location */
      location        : Location
      /* Name of the venue */
      title           : String
      /* Address of the venue */
      address         : String
      /* Optional. Foursquare identifier of the venue */
      foursquareId    : Option[String]
      /* Optional. Foursquare type of the venue. (For example, 
      ‚Äúarts_entertainment/default‚Äù, ‚Äúarts_entertainment/aquarium‚Äù 
      or ‚Äúfood/icecream‚Äù.) */
      foursquareType  : Option[String]
      /* Optional. Google Places identifier of the venue */
      googlePlaceId   : Option[String]
      /* Optional. Google Places type of the venue. (See supported 
      types.) */
      googlePlaceType : Option[String]
    }
           
    /* This object represents a video file.  */
    Video {
      /* Identifier for this file, which can be used to download or 
      reuse the file */
      fileId         : String
      /* Unique identifier for this file, which is supposed to be 
      the same over time and for different bots. Can't be used to 
      download or reuse the file. */
      fileUniqueId   : String
      /* Video width as defined by the sender */
      width          : Int
      /* Video height as defined by the sender */
      height         : Int
      /* Duration of the video in seconds as defined by the sender */
      duration       : Int
      /* Optional. Video thumbnail */
      thumbnail      : Option[PhotoSize]
      /* Optional. Available sizes of the cover of the video in the 
      message */
      cover          : List[PhotoSize]
      /* Optional. Timestamp in seconds from which the video will 
      play in the message */
      startTimestamp : Option[Int]
      /* Optional. Original filename as defined by the sender */
      fileName       : Option[String]
      /* Optional. MIME type of the file as defined by the sender */
      mimeType       : Option[String]
      /* Optional. File size in bytes. It can be bigger than 
      2&#94;31 and some programming languages may have 
      difficulty/silent defects in interpreting it. But it has at 
      most 52 significant bits, so a signed 64-bit integer or 
      double-precision float type are safe for storing this value. */
      fileSize       : Option[Long]
    }
           
    /* This object represents a service message about a video chat ended in the chat.  */
    VideoChatEnded {
      /* Video chat duration in seconds */
      duration : Int
    }
           
    /* This object represents a service message about new members invited to a video 
      chat.  */
    VideoChatParticipantsInvited {
      /* New members that were invited to the video chat */
      users : List[User]
    }
           
    /* This object represents a service message about a video chat scheduled in the 
      chat.  */
    VideoChatScheduled {
      /* Point in time (Unix timestamp) when the video chat is 
      supposed to be started by a chat administrator */
      startDate : Int
    }
           
    /* This object represents a service message about a video chat started in the 
      chat. Currently holds no information.  */
    VideoChatStarted {
  
    }
           
    /* This object represents a video message (available in Telegram apps as of 
      v.4.0).  */
    VideoNote {
      /* Identifier for this file, which can be used to download or 
      reuse the file */
      fileId       : String
      /* Unique identifier for this file, which is supposed to be 
      the same over time and for different bots. Can't be used to 
      download or reuse the file. */
      fileUniqueId : String
      /* Video width and height (diameter of the video message) as 
      defined by the sender */
      length       : Int
      /* Duration of the video in seconds as defined by the sender */
      duration     : Int
      /* Optional. Video thumbnail */
      thumbnail    : Option[PhotoSize]
      /* Optional. File size in bytes */
      fileSize     : Option[Long]
    }
           
    /* This object represents a voice note.  */
    Voice {
      /* Identifier for this file, which can be used to download or 
      reuse the file */
      fileId       : String
      /* Unique identifier for this file, which is supposed to be 
      the same over time and for different bots. Can't be used to 
      download or reuse the file. */
      fileUniqueId : String
      /* Duration of the audio in seconds as defined by the sender */
      duration     : Int
      /* Optional. MIME type of the file as defined by the sender */
      mimeType     : Option[String]
      /* Optional. File size in bytes. It can be bigger than 
      2&#94;31 and some programming languages may have 
      difficulty/silent defects in interpreting it. But it has at 
      most 52 significant bits, so a signed 64-bit integer or 
      double-precision float type are safe for storing this value. */
      fileSize     : Option[Long]
    }
           
    /* Describes data sent from a Web App to the bot.  */
    WebAppData {
      /* The data. Be aware that a bad client can send arbitrary 
      data in this field. */
      data       : String
      /* Text of the web_app keyboard button from which the Web App 
      was opened. Be aware that a bad client can send arbitrary 
      data in this field. */
      buttonText : String
    }
           
    /* Describes a Web App.  */
    WebAppInfo {
      /* An HTTPS URL of a Web App to be opened with additional data 
      as specified in Initializing Web Apps */
      url : String
    }
           
    /* Describes the current status of a webhook.  */
    WebhookInfo {
      /* Webhook URL, may be empty if webhook is not set up */
      url                          : String
      /* True, if a custom certificate was provided for webhook 
      certificate checks */
      hasCustomCertificate         : Boolean
      /* Number of updates awaiting delivery */
      pendingUpdateCount           : Int
      /* Optional. Currently used webhook IP address */
      ipAddress                    : Option[String]
      /* Optional. Unix time for the most recent error that happened 
      when trying to deliver an update via webhook */
      lastErrorDate                : Option[Int]
      /* Optional. Error message in human-readable format for the 
      most recent error that happened when trying to deliver an 
      update via webhook */
      lastErrorMessage             : Option[String]
      /* Optional. Unix time of the most recent error that happened 
      when trying to synchronize available updates with Telegram 
      datacenters */
      lastSynchronizationErrorDate : Option[Int]
      /* Optional. The maximum allowed number of simultaneous HTTPS 
      connections to the webhook for update delivery */
      maxConnections               : Option[Int]
      /* Optional. A list of update types the bot is subscribed to. 
      Defaults to all update types except chat_member */
      allowedUpdates               : List[String]
    }
           
    /* This object represents a service message about a user allowing a bot to write 
      messages after adding it to the attachment menu, launching a Web App from a 
      link, or accepting an explicit request from a Web App sent by the method 
      requestWriteAccess.  */
    WriteAccessAllowed {
      /* Optional. True, if the access was granted after the user 
      accepted an explicit request from a Web App sent by the 
      method requestWriteAccess */
      fromRequest        : Option[Boolean]
      /* Optional. Name of the Web App, if the access was granted 
      when the Web App was launched from a link */
      webAppName         : Option[String]
      /* Optional. True, if the access was granted when the bot was 
      added to the attachment or side menu */
      fromAttachmentMenu : Option[Boolean]
    }
           

    namespace client {
      Methods (methodsFactory) {
              
        /* Use this method to add a new sticker to a set created by the bot. Emoji sticker 
          sets can have up to 200 stickers. Other sticker sets can have up to 120 
          stickers. Returns True on success.  */
        def addStickerToSet {
          /* User identifier of sticker set owner */
          userId  : Long
          /* Sticker set name */
          name    : String
          /* A JSON-serialized object with information about the added 
          sticker. If exactly the same sticker had already been added 
          to the set, then the set isn't changed. */
          sticker : InputSticker
        } => Method[Boolean]
      
        /* Use this method to send answers to callback queries sent from inline keyboards. 
          The answer will be displayed to the user as a notification at the top of the 
          chat screen or as an alert. On success, True is returned.  */
        def answerCallbackQuery {
          /* Unique identifier for the query to be answered */
          callbackQueryId : String
          /* Text of the notification. If not specified, nothing will be 
          shown to the user, 0-200 characters */
          text            : Option[String]
          /* If True, an alert will be shown by the client instead of a 
          notification at the top of the chat screen. Defaults to 
          false. */
          showAlert       : Option[Boolean]
          /* URL that will be opened by the user's client. If you have 
          created a Game and accepted the conditions via 
          &#064;BotFather, specify the URL that opens your game - note 
          that this will only work if the query comes from a 
          callback_game button. Otherwise, you may use links like 
          t.me/your_bot?start=XXXX that open your bot with a 
          parameter. */
          url             : Option[String]
          /* The maximum amount of time in seconds that the result of 
          the callback query may be cached client-side. Telegram apps 
          will support caching starting in version 3.14. Defaults to 
          0. */
          cacheTime       : Option[Int]
        } => Method[Boolean]
      
        /* Use this method to send answers to an inline query. On success, True is 
          returned. No more than 50 results per query are allowed.  */
        def answerInlineQuery {
          /* Unique identifier for the answered query */
          inlineQueryId : String
          /* A JSON-serialized array of results for the inline query */
          results       : List[InlineQueryResult]
          /* The maximum amount of time in seconds that the result of 
          the inline query may be cached on the server. Defaults to 
          300. */
          cacheTime     : Option[Int]
          /* Pass True if results may be cached on the server side only 
          for the user that sent the query. By default, results may be 
          returned to any user who sends the same query. */
          isPersonal    : Option[Boolean]
          /* Pass the offset that a client should send in the next query 
          with the same text to receive more results. Pass an empty 
          string if there are no more results or if you don't support 
          pagination. Offset length can't exceed 64 bytes. */
          nextOffset    : Option[String]
          /* A JSON-serialized object describing a button to be shown 
          above inline query results */
          button        : Option[InlineQueryResultsButton]
        } => Method[Boolean]
      
        /* Once the user has confirmed their payment and shipping details, the Bot API 
          sends the final confirmation in the form of an Update with the field 
          pre_checkout_query. Use this method to respond to such pre-checkout queries. On 
          success, True is returned. Note: The Bot API must receive an answer within 10 
          seconds after the pre-checkout query was sent.  */
        def answerPreCheckoutQuery {
          /* Unique identifier for the query to be answered */
          preCheckoutQueryId : String
          /* Specify True if everything is alright (goods are available, 
          etc.) and the bot is ready to proceed with the order. Use 
          False if there are any problems. */
          ok                 : Boolean
          /* Required if ok is False. Error message in human readable 
          form that explains the reason for failure to proceed with 
          the checkout (e.g. "Sorry, somebody just bought the last of 
          our amazing black T-shirts while you were busy filling out 
          your payment details. Please choose a different color or 
          garment!"). Telegram will display this message to the user. */
          errorMessage       : Option[String]
        } => Method[Boolean]
      
        /* If you sent an invoice requesting a shipping address and the parameter 
          is_flexible was specified, the Bot API will send an Update with a shipping_query 
          field to the bot. Use this method to reply to shipping queries. On success, True 
          is returned.  */
        def answerShippingQuery {
          /* Unique identifier for the query to be answered */
          shippingQueryId : String
          /* Pass True if delivery to the specified address is possible 
          and False if there are any problems (for example, if 
          delivery to the specified address is not possible) */
          ok              : Boolean
          /* Required if ok is True. A JSON-serialized array of 
          available shipping options. */
          shippingOptions : List[ShippingOption]
          /* Required if ok is False. Error message in human readable 
          form that explains why it is impossible to complete the 
          order (e.g. ‚ÄúSorry, delivery to your desired address is 
          unavailable‚Äù). Telegram will display this message to the 
          user. */
          errorMessage    : Option[String]
        } => Method[Boolean]
      
        /* Use this method to set the result of an interaction with a Web App and send a 
          corresponding message on behalf of the user to the chat from which the query 
          originated. On success, a SentWebAppMessage object is returned.  */
        def answerWebAppQuery {
          /* Unique identifier for the query to be answered */
          webAppQueryId : String
          /* A JSON-serialized object describing the message to be sent */
          result        : InlineQueryResult
        } => Method[SentWebAppMessage]
      
        /* Use this method to approve a chat join request. The bot must be an 
          administrator in the chat for this to work and must have the can_invite_users 
          administrator right. Returns True on success.  */
        def approveChatJoinRequest {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId : ChatId
          /* Unique identifier of the target user */
          userId : Long
        } => Method[Boolean]
      
        /* Use this method to ban a user in a group, a supergroup or a channel. In the 
          case of supergroups and channels, the user will not be able to return to the 
          chat on their own using invite links, etc., unless unbanned first. The bot must 
          be an administrator in the chat for this to work and must have the appropriate 
          administrator rights. Returns True on success.  */
        def banChatMember {
          /* Unique identifier for the target group or username of the 
          target supergroup or channel (in the format 
          &#064;channelusername) */
          chatId         : ChatId
          /* Unique identifier of the target user */
          userId         : Long
          /* Date when the user will be unbanned; Unix time. If user is 
          banned for more than 366 days or less than 30 seconds from 
          the current time they are considered to be banned forever. 
          Applied for supergroups and channels only. */
          untilDate      : Option[Int]
          /* Pass True to delete all messages from the chat for the user 
          that is being removed. If False, the user will be able to 
          see messages in the group that were sent before the user was 
          removed. Always True for supergroups and channels. */
          revokeMessages : Option[Boolean]
        } => Method[Boolean]
      
        /* Use this method to ban a channel chat in a supergroup or a channel. Until the 
          chat is unbanned, the owner of the banned chat won't be able to send messages on 
          behalf of any of their channels. The bot must be an administrator in the 
          supergroup or channel for this to work and must have the appropriate 
          administrator rights. Returns True on success.  */
        def banChatSenderChat {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId       : ChatId
          /* Unique identifier of the target sender chat */
          senderChatId : Long
        } => Method[Boolean]
      
        /* Use this method to close the bot instance before moving it from one local 
          server to another. You need to delete the webhook before calling this method to 
          ensure that the bot isn't launched again after server restart. The method will 
          return error 429 in the first 10 minutes after the bot is launched. Returns True 
          on success. Requires no parameters.  */
        def close {
      
        } => Method[Boolean]
      
        /* Use this method to close an open topic in a forum supergroup chat. The bot must 
          be an administrator in the chat for this to work and must have the 
          can_manage_topics administrator rights, unless it is the creator of the topic. 
          Returns True on success.  */
        def closeForumTopic {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId          : ChatId
          /* Unique identifier for the target message thread of the 
          forum topic */
          messageThreadId : Int
        } => Method[Boolean]
      
        /* Use this method to close an open 'General' topic in a forum supergroup chat. 
          The bot must be an administrator in the chat for this to work and must have the 
          can_manage_topics administrator rights. Returns True on success.  */
        def closeGeneralForumTopic {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId : ChatId
        } => Method[Boolean]
      
        /* Converts a given regular gift to Telegram Stars. Requires the 
          can_convert_gifts_to_stars business bot right. Returns True on success.  */
        def convertGiftToStars {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* Unique identifier of the regular gift that should be 
          converted to Telegram Stars */
          ownedGiftId          : String
        } => Method[Boolean]
      
        /* Use this method to copy messages of any kind. Service messages, paid media 
          messages, giveaway messages, giveaway winners messages, and invoice messages 
          can't be copied. A quiz poll can be copied only if the value of the field 
          correct_option_id is known to the bot. The method is analogous to the method 
          forwardMessage, but the copied message doesn't have a link to the original 
          message. Returns the MessageId of the sent message on success.  */
        def copyMessage {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId                : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId       : Option[Int]
          /* Unique identifier for the chat where the original message 
          was sent (or channel username in the format 
          &#064;channelusername) */
          fromChatId            : ChatId
          /* Message identifier in the chat specified in from_chat_id */
          messageId             : Int
          /* New start timestamp for the copied video in the message */
          videoStartTimestamp   : Option[Int]
          /* New caption for media, 0-1024 characters after entities 
          parsing. If not specified, the original caption is kept */
          caption               : Option[String]
          /* Mode for parsing entities in the new caption. See 
          formatting options for more details. */
          parseMode             : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the new caption, which can be specified instead of 
          parse_mode */
          captionEntities       : List[MessageEntity]
          /* Pass True, if the caption must be shown above the message 
          media. Ignored if a new caption isn't specified. */
          showCaptionAboveMedia : Option[Boolean]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification   : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent        : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast    : Option[Boolean]
          /* Description of the message to reply to */
          replyParameters       : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup           : Option[KeyboardMarkup]
        } => Method[MessageId]
      
        /* Use this method to copy messages of any kind. If some of the specified messages 
          can't be found or copied, they are skipped. Service messages, paid media 
          messages, giveaway messages, giveaway winners messages, and invoice messages 
          can't be copied. A quiz poll can be copied only if the value of the field 
          correct_option_id is known to the bot. The method is analogous to the method 
          forwardMessages, but the copied messages don't have a link to the original 
          message. Album grouping is kept for copied messages. On success, an array of 
          MessageId of the sent messages is returned.  */
        def copyMessages {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId              : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId     : Option[Int]
          /* Unique identifier for the chat where the original messages 
          were sent (or channel username in the format 
          &#064;channelusername) */
          fromChatId          : ChatId
          /* A JSON-serialized list of 1-100 identifiers of messages in 
          the chat from_chat_id to copy. The identifiers must be 
          specified in a strictly increasing order. */
          messageIds          : List[Int]
          /* Sends the messages silently. Users will receive a 
          notification with no sound. */
          disableNotification : Option[Boolean]
          /* Protects the contents of the sent messages from forwarding 
          and saving */
          protectContent      : Option[Boolean]
          /* Pass True to copy the messages without their captions */
          removeCaption       : Option[Boolean]
        } => Method[List[MessageId]]
      
        /* Use this method to create an additional invite link for a chat. The bot must be 
          an administrator in the chat for this to work and must have the appropriate 
          administrator rights. The link can be revoked using the method 
          revokeChatInviteLink. Returns the new invite link as ChatInviteLink object.  */
        def createChatInviteLink {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId             : ChatId
          /* Invite link name; 0-32 characters */
          name               : Option[String]
          /* Point in time (Unix timestamp) when the link will expire */
          expireDate         : Option[Int]
          /* The maximum number of users that can be members of the chat 
          simultaneously after joining the chat via this invite link; 
          1-99999 */
          memberLimit        : Option[Int]
          /* True, if users joining the chat via the link need to be 
          approved by chat administrators. If True, member_limit can't 
          be specified */
          createsJoinRequest : Option[Boolean]
        } => Method[ChatInviteLink]
      
        /* Use this method to create a subscription invite link for a channel chat. The 
          bot must have the can_invite_users administrator rights. The link can be edited 
          using the method editChatSubscriptionInviteLink or revoked using the method 
          revokeChatInviteLink. Returns the new invite link as a ChatInviteLink object.  */
        def createChatSubscriptionInviteLink {
          /* Unique identifier for the target channel chat or username 
          of the target channel (in the format &#064;channelusername) */
          chatId             : ChatId
          /* Invite link name; 0-32 characters */
          name               : Option[String]
          /* The number of seconds the subscription will be active for 
          before the next payment. Currently, it must always be 
          2592000 (30 days). */
          subscriptionPeriod : Int
          /* The amount of Telegram Stars a user must pay initially and 
          after each subsequent subscription period to be a member of 
          the chat; 1-10000 */
          subscriptionPrice  : Int
        } => Method[ChatInviteLink]
      
        /* Use this method to create a topic in a forum supergroup chat. The bot must be 
          an administrator in the chat for this to work and must have the 
          can_manage_topics administrator rights. Returns information about the created 
          topic as a ForumTopic object.  */
        def createForumTopic {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId            : ChatId
          /* Topic name, 1-128 characters */
          name              : String
          /* Color of the topic icon in RGB format. Currently, must be 
          one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 
          (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 
          16478047 (0xFB6F5F) */
          iconColor         : Option[Int]
          /* Unique identifier of the custom emoji shown as the topic 
          icon. Use getForumTopicIconStickers to get all allowed 
          custom emoji identifiers. */
          iconCustomEmojiId : Option[String]
        } => Method[ForumTopic]
      
        /* Use this method to create a link for an invoice. Returns the created invoice 
          link as String on success.  */
        def createInvoiceLink {
          /* Unique identifier of the business connection on behalf of 
          which the link will be created. For payments in Telegram 
          Stars only. */
          businessConnectionId      : Option[String]
          /* Product name, 1-32 characters */
          title                     : String
          /* Product description, 1-255 characters */
          description               : String
          /* Bot-defined invoice payload, 1-128 bytes. This will not be 
          displayed to the user, use it for your internal processes. */
          payload                   : String
          /* Payment provider token, obtained via &#064;BotFather. Pass 
          an empty string for payments in Telegram Stars. */
          providerToken             : Option[String]
          /* Three-letter ISO 4217 currency code, see more on 
          currencies. Pass ‚ÄúXTR‚Äù for payments in Telegram Stars. */
          currency                  : String
          /* Price breakdown, a JSON-serialized list of components (e.g. 
          product price, tax, discount, delivery cost, delivery tax, 
          bonus, etc.). Must contain exactly one item for payments in 
          Telegram Stars. */
          prices                    : List[LabeledPrice]
          /* The number of seconds the subscription will be active for 
          before the next payment. The currency must be set to ‚ÄúXTR‚Äù 
          (Telegram Stars) if the parameter is used. Currently, it 
          must always be 2592000 (30 days) if specified. Any number of 
          subscriptions can be active for a given bot at the same 
          time, including multiple concurrent subscriptions from the 
          same user. Subscription price must no exceed 10000 Telegram 
          Stars. */
          subscriptionPeriod        : Option[Int]
          /* The maximum accepted amount for tips in the smallest units 
          of the currency (integer, not float/double). For example, 
          for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See 
          the exp parameter in currencies.json, it shows the number of 
          digits past the decimal point for each currency (2 for the 
          majority of currencies). Defaults to 0. Not supported for 
          payments in Telegram Stars. */
          maxTipAmount              : Option[Int]
          /* A JSON-serialized array of suggested amounts of tips in the 
          smallest units of the currency (integer, not float/double). 
          At most 4 suggested tip amounts can be specified. The 
          suggested tip amounts must be positive, passed in a strictly 
          increased order and must not exceed max_tip_amount. */
          suggestedTipAmounts       : List[Int]
          /* JSON-serialized data about the invoice, which will be 
          shared with the payment provider. A detailed description of 
          required fields should be provided by the payment provider. */
          providerData              : Option[String]
          /* URL of the product photo for the invoice. Can be a photo of 
          the goods or a marketing image for a service. */
          photoUrl                  : Option[String]
          /* Photo size in bytes */
          photoSize                 : Option[Long]
          /* Photo width */
          photoWidth                : Option[Int]
          /* Photo height */
          photoHeight               : Option[Int]
          /* Pass True if you require the user's full name to complete 
          the order. Ignored for payments in Telegram Stars. */
          needName                  : Option[Boolean]
          /* Pass True if you require the user's phone number to 
          complete the order. Ignored for payments in Telegram Stars. */
          needPhoneNumber           : Option[Boolean]
          /* Pass True if you require the user's email address to 
          complete the order. Ignored for payments in Telegram Stars. */
          needEmail                 : Option[Boolean]
          /* Pass True if you require the user's shipping address to 
          complete the order. Ignored for payments in Telegram Stars. */
          needShippingAddress       : Option[Boolean]
          /* Pass True if the user's phone number should be sent to the 
          provider. Ignored for payments in Telegram Stars. */
          sendPhoneNumberToProvider : Option[Boolean]
          /* Pass True if the user's email address should be sent to the 
          provider. Ignored for payments in Telegram Stars. */
          sendEmailToProvider       : Option[Boolean]
          /* Pass True if the final price depends on the shipping 
          method. Ignored for payments in Telegram Stars. */
          isFlexible                : Option[Boolean]
        } => Method[String]
      
        /* Use this method to create a new sticker set owned by a user. The bot will be 
          able to edit the sticker set thus created. Returns True on success.  */
        def createNewStickerSet {
          /* User identifier of created sticker set owner */
          userId          : Long
          /* Short name of sticker set, to be used in t.me/addstickers/ 
          URLs (e.g., animals). Can contain only English letters, 
          digits and underscores. Must begin with a letter, can't 
          contain consecutive underscores and must end in 
          "_by_<bot_username>". <bot_username> is case insensitive. 
          1-64 characters. */
          name            : String
          /* Sticker set title, 1-64 characters */
          title           : String
          /* A JSON-serialized list of 1-50 initial stickers to be added 
          to the sticker set */
          stickers        : List[InputSticker]
          /* Type of stickers in the set, pass ‚Äúregular‚Äù, ‚Äúmask‚Äù, or 
          ‚Äúcustom_emoji‚Äù. By default, a regular sticker set is 
          created. */
          stickerType     : Option[String]
          /* Pass True if stickers in the sticker set must be repainted 
          to the color of text when used in messages, the accent color 
          if used as emoji status, white on chat photos, or another 
          appropriate color based on context; for custom emoji sticker 
          sets only */
          needsRepainting : Option[Boolean]
        } => Method[Boolean]
      
        /* Use this method to decline a chat join request. The bot must be an 
          administrator in the chat for this to work and must have the can_invite_users 
          administrator right. Returns True on success.  */
        def declineChatJoinRequest {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId : ChatId
          /* Unique identifier of the target user */
          userId : Long
        } => Method[Boolean]
      
        /* Delete messages on behalf of a business account. Requires the 
          can_delete_sent_messages business bot right to delete messages sent by the bot 
          itself, or the can_delete_all_messages business bot right to delete any message. 
          Returns True on success.  */
        def deleteBusinessMessages {
          /* Unique identifier of the business connection on behalf of 
          which to delete the messages */
          businessConnectionId : String
          /* A JSON-serialized list of 1-100 identifiers of messages to 
          delete. All messages must be from the same chat. See 
          deleteMessage for limitations on which messages can be 
          deleted */
          messageIds           : List[Int]
        } => Method[Boolean]
      
        /* Use this method to delete a chat photo. Photos can't be changed for private 
          chats. The bot must be an administrator in the chat for this to work and must 
          have the appropriate administrator rights. Returns True on success.  */
        def deleteChatPhoto {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId : ChatId
        } => Method[Boolean]
      
        /* Use this method to delete a group sticker set from a supergroup. The bot must 
          be an administrator in the chat for this to work and must have the appropriate 
          administrator rights. Use the field can_set_sticker_set optionally returned in 
          getChat requests to check if the bot can use this method. Returns True on 
          success.  */
        def deleteChatStickerSet {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId : ChatId
        } => Method[Boolean]
      
        /* Use this method to delete a forum topic along with all its messages in a forum 
          supergroup chat. The bot must be an administrator in the chat for this to work 
          and must have the can_delete_messages administrator rights. Returns True on 
          success.  */
        def deleteForumTopic {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId          : ChatId
          /* Unique identifier for the target message thread of the 
          forum topic */
          messageThreadId : Int
        } => Method[Boolean]
      
        /* Use this method to delete a message, including service messages, with the 
          following limitations: - A message can only be deleted if it was sent less than 
          48 hours ago. - Service messages about a supergroup, channel, or forum topic 
          creation can't be deleted. - A dice message in a private chat can only be 
          deleted if it was sent more than 24 hours ago. - Bots can delete outgoing 
          messages in private chats, groups, and supergroups. - Bots can delete incoming 
          messages in private chats. - Bots granted can_post_messages permissions can 
          delete outgoing messages in channels. - If the bot is an administrator of a 
          group, it can delete any message there. - If the bot has can_delete_messages 
          permission in a supergroup or a channel, it can delete any message there. 
          Returns True on success.  */
        def deleteMessage {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId    : ChatId
          /* Identifier of the message to delete */
          messageId : Int
        } => Method[Boolean]
      
        /* Use this method to delete multiple messages simultaneously. If some of the 
          specified messages can't be found, they are skipped. Returns True on success.  */
        def deleteMessages {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId     : ChatId
          /* A JSON-serialized list of 1-100 identifiers of messages to 
          delete. See deleteMessage for limitations on which messages 
          can be deleted */
          messageIds : List[Int]
        } => Method[Boolean]
      
        /* Use this method to delete the list of the bot's commands for the given scope 
          and user language. After deletion, higher level commands will be shown to 
          affected users. Returns True on success.  */
        def deleteMyCommands {
          /* A JSON-serialized object, describing scope of users for 
          which the commands are relevant. Defaults to 
          BotCommandScopeDefault. */
          scope        : Option[BotCommandScope]
          /* A two-letter ISO 639-1 language code. If empty, commands 
          will be applied to all users from the given scope, for whose 
          language there are no dedicated commands */
          languageCode : Option[String]
        } => Method[Boolean]
      
        /* Use this method to delete a sticker from a set created by the bot. Returns True 
          on success.  */
        def deleteStickerFromSet {
          /* File identifier of the sticker */
          sticker : String
        } => Method[Boolean]
      
        /* Use this method to delete a sticker set that was created by the bot. Returns 
          True on success.  */
        def deleteStickerSet {
          /* Sticker set name */
          name : String
        } => Method[Boolean]
      
        /* Deletes a story previously posted by the bot on behalf of a managed business 
          account. Requires the can_manage_stories business bot right. Returns True on 
          success.  */
        def deleteStory {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* Unique identifier of the story to delete */
          storyId              : Int
        } => Method[Boolean]
      
        /* Use this method to remove webhook integration if you decide to switch back to 
          getUpdates. Returns True on success.  */
        def deleteWebhook {
          /* Pass True to drop all pending updates */
          dropPendingUpdates : Option[Boolean]
        } => Method[Boolean]
      
        /* Use this method to edit a non-primary invite link created by the bot. The bot 
          must be an administrator in the chat for this to work and must have the 
          appropriate administrator rights. Returns the edited invite link as a 
          ChatInviteLink object.  */
        def editChatInviteLink {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId             : ChatId
          /* The invite link to edit */
          inviteLink         : String
          /* Invite link name; 0-32 characters */
          name               : Option[String]
          /* Point in time (Unix timestamp) when the link will expire */
          expireDate         : Option[Int]
          /* The maximum number of users that can be members of the chat 
          simultaneously after joining the chat via this invite link; 
          1-99999 */
          memberLimit        : Option[Int]
          /* True, if users joining the chat via the link need to be 
          approved by chat administrators. If True, member_limit can't 
          be specified */
          createsJoinRequest : Option[Boolean]
        } => Method[ChatInviteLink]
      
        /* Use this method to edit a subscription invite link created by the bot. The bot 
          must have the can_invite_users administrator rights. Returns the edited invite 
          link as a ChatInviteLink object.  */
        def editChatSubscriptionInviteLink {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId     : ChatId
          /* The invite link to edit */
          inviteLink : String
          /* Invite link name; 0-32 characters */
          name       : Option[String]
        } => Method[ChatInviteLink]
      
        /* Use this method to edit name and icon of a topic in a forum supergroup chat. 
          The bot must be an administrator in the chat for this to work and must have the 
          can_manage_topics administrator rights, unless it is the creator of the topic. 
          Returns True on success.  */
        def editForumTopic {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId            : ChatId
          /* Unique identifier for the target message thread of the 
          forum topic */
          messageThreadId   : Int
          /* New topic name, 0-128 characters. If not specified or 
          empty, the current name of the topic will be kept */
          name              : Option[String]
          /* New unique identifier of the custom emoji shown as the 
          topic icon. Use getForumTopicIconStickers to get all allowed 
          custom emoji identifiers. Pass an empty string to remove the 
          icon. If not specified, the current icon will be kept */
          iconCustomEmojiId : Option[String]
        } => Method[Boolean]
      
        /* Use this method to edit the name of the 'General' topic in a forum supergroup 
          chat. The bot must be an administrator in the chat for this to work and must 
          have the can_manage_topics administrator rights. Returns True on success.  */
        def editGeneralForumTopic {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId : ChatId
          /* New topic name, 1-128 characters */
          name   : String
        } => Method[Boolean]
      
        /* Use this method to edit captions of messages. On success, if the edited message 
          is not an inline message, the edited Message is returned, otherwise True is 
          returned. Note that business messages that were not sent by the bot and do not 
          contain an inline keyboard can only be edited within 48 hours from the time they 
          were sent.  */
        def editMessageCaption {
          /* Unique identifier of the business connection on behalf of 
          which the message to be edited was sent */
          businessConnectionId  : Option[String]
          /* Required if inline_message_id is not specified. Unique 
          identifier for the target chat or username of the target 
          channel (in the format &#064;channelusername) */
          chatId                : Option[ChatId]
          /* Required if inline_message_id is not specified. Identifier 
          of the message to edit */
          messageId             : Option[Int]
          /* Required if chat_id and message_id are not specified. 
          Identifier of the inline message */
          inlineMessageId       : Option[String]
          /* New caption of the message, 0-1024 characters after 
          entities parsing */
          caption               : Option[String]
          /* Mode for parsing entities in the message caption. See 
          formatting options for more details. */
          parseMode             : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the caption, which can be specified instead of parse_mode */
          captionEntities       : List[MessageEntity]
          /* Pass True, if the caption must be shown above the message 
          media. Supported only for animation, photo and video 
          messages. */
          showCaptionAboveMedia : Option[Boolean]
          /* A JSON-serialized object for an inline keyboard. */
          replyMarkup           : Option[InlineKeyboardMarkup]
        } => Method[Either[Boolean, Message]]
      
        /* Use this method to edit a checklist on behalf of a connected business account. 
          On success, the edited Message is returned.  */
        def editMessageChecklist {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : String
          /* Unique identifier for the target chat */
          chatId               : Long
          /* Unique identifier for the target message */
          messageId            : Int
          /* A JSON-serialized object for the new checklist */
          checklist            : InputChecklist
          /* A JSON-serialized object for the new inline keyboard for 
          the message */
          replyMarkup          : Option[InlineKeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to edit live location messages. A location can be edited until 
          its live_period expires or editing is explicitly disabled by a call to 
          stopMessageLiveLocation. On success, if the edited message is not an inline 
          message, the edited Message is returned, otherwise True is returned.  */
        def editMessageLiveLocation {
          /* Unique identifier of the business connection on behalf of 
          which the message to be edited was sent */
          businessConnectionId : Option[String]
          /* Required if inline_message_id is not specified. Unique 
          identifier for the target chat or username of the target 
          channel (in the format &#064;channelusername) */
          chatId               : Option[ChatId]
          /* Required if inline_message_id is not specified. Identifier 
          of the message to edit */
          messageId            : Option[Int]
          /* Required if chat_id and message_id are not specified. 
          Identifier of the inline message */
          inlineMessageId      : Option[String]
          /* Latitude of new location */
          latitude             : Float
          /* Longitude of new location */
          longitude            : Float
          /* New period in seconds during which the location can be 
          updated, starting from the message send date. If 0x7FFFFFFF 
          is specified, then the location can be updated forever. 
          Otherwise, the new value must not exceed the current 
          live_period by more than a day, and the live location 
          expiration date must remain within the next 90 days. If not 
          specified, then live_period remains unchanged */
          livePeriod           : Option[Int]
          /* The radius of uncertainty for the location, measured in 
          meters; 0-1500 */
          horizontalAccuracy   : Option[Float]
          /* Direction in which the user is moving, in degrees. Must be 
          between 1 and 360 if specified. */
          heading              : Option[Int]
          /* The maximum distance for proximity alerts about approaching 
          another chat member, in meters. Must be between 1 and 100000 
          if specified. */
          proximityAlertRadius : Option[Int]
          /* A JSON-serialized object for a new inline keyboard. */
          replyMarkup          : Option[InlineKeyboardMarkup]
        } => Method[Either[Boolean, Message]]
      
        /* Use this method to edit animation, audio, document, photo, or video messages, 
          or to add media to text messages. If a message is part of a message album, then 
          it can be edited only to an audio for audio albums, only to a document for 
          document albums and to a photo or a video otherwise. When an inline message is 
          edited, a new file can't be uploaded; use a previously uploaded file via its 
          file_id or specify a URL. On success, if the edited message is not an inline 
          message, the edited Message is returned, otherwise True is returned. Note that 
          business messages that were not sent by the bot and do not contain an inline 
          keyboard can only be edited within 48 hours from the time they were sent.  */
        def editMessageMedia {
          /* Unique identifier of the business connection on behalf of 
          which the message to be edited was sent */
          businessConnectionId : Option[String]
          /* Required if inline_message_id is not specified. Unique 
          identifier for the target chat or username of the target 
          channel (in the format &#064;channelusername) */
          chatId               : Option[ChatId]
          /* Required if inline_message_id is not specified. Identifier 
          of the message to edit */
          messageId            : Option[Int]
          /* Required if chat_id and message_id are not specified. 
          Identifier of the inline message */
          inlineMessageId      : Option[String]
          /* A JSON-serialized object for a new media content of the 
          message */
          media                : InputMedia
          /* A JSON-serialized object for a new inline keyboard. */
          replyMarkup          : Option[InlineKeyboardMarkup]
        } => Method[Either[Boolean, Message]]
      
        /* Use this method to edit only the reply markup of messages. On success, if the 
          edited message is not an inline message, the edited Message is returned, 
          otherwise True is returned. Note that business messages that were not sent by 
          the bot and do not contain an inline keyboard can only be edited within 48 hours 
          from the time they were sent.  */
        def editMessageReplyMarkup {
          /* Unique identifier of the business connection on behalf of 
          which the message to be edited was sent */
          businessConnectionId : Option[String]
          /* Required if inline_message_id is not specified. Unique 
          identifier for the target chat or username of the target 
          channel (in the format &#064;channelusername) */
          chatId               : Option[ChatId]
          /* Required if inline_message_id is not specified. Identifier 
          of the message to edit */
          messageId            : Option[Int]
          /* Required if chat_id and message_id are not specified. 
          Identifier of the inline message */
          inlineMessageId      : Option[String]
          /* A JSON-serialized object for an inline keyboard. */
          replyMarkup          : Option[InlineKeyboardMarkup]
        } => Method[Either[Boolean, Message]]
      
        /* Use this method to edit text and game messages. On success, if the edited 
          message is not an inline message, the edited Message is returned, otherwise True 
          is returned. Note that business messages that were not sent by the bot and do 
          not contain an inline keyboard can only be edited within 48 hours from the time 
          they were sent.  */
        def editMessageText {
          /* Unique identifier of the business connection on behalf of 
          which the message to be edited was sent */
          businessConnectionId : Option[String]
          /* Required if inline_message_id is not specified. Unique 
          identifier for the target chat or username of the target 
          channel (in the format &#064;channelusername) */
          chatId               : Option[ChatId]
          /* Required if inline_message_id is not specified. Identifier 
          of the message to edit */
          messageId            : Option[Int]
          /* Required if chat_id and message_id are not specified. 
          Identifier of the inline message */
          inlineMessageId      : Option[String]
          /* New text of the message, 1-4096 characters after entities 
          parsing */
          text                 : String
          /* Mode for parsing entities in the message text. See 
          formatting options for more details. */
          parseMode            : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          message text, which can be specified instead of parse_mode */
          entities             : List[MessageEntity]
          /* Link preview generation options for the message */
          linkPreviewOptions   : Option[LinkPreviewOptions]
          /* A JSON-serialized object for an inline keyboard. */
          replyMarkup          : Option[InlineKeyboardMarkup]
        } => Method[Either[Boolean, Message]]
      
        /* Edits a story previously posted by the bot on behalf of a managed business 
          account. Requires the can_manage_stories business bot right. Returns Story on 
          success.  */
        def editStory {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* Unique identifier of the story to edit */
          storyId              : Int
          /* Content of the story */
          content              : InputStoryContent
          /* Caption of the story, 0-2048 characters after entities 
          parsing */
          caption              : Option[String]
          /* Mode for parsing entities in the story caption. See 
          formatting options for more details. */
          parseMode            : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the caption, which can be specified instead of parse_mode */
          captionEntities      : List[MessageEntity]
          /* A JSON-serialized list of clickable areas to be shown on 
          the story */
          areas                : List[StoryArea]
        } => Method[Story]
      
        /* Allows the bot to cancel or re-enable extension of a subscription paid in 
          Telegram Stars. Returns True on success.  */
        def editUserStarSubscription {
          /* Identifier of the user whose subscription will be edited */
          userId                  : Long
          /* Telegram payment identifier for the subscription */
          telegramPaymentChargeId : String
          /* Pass True to cancel extension of the user subscription; the 
          subscription must be active up to the end of the current 
          subscription period. Pass False to allow the user to 
          re-enable a subscription that was previously canceled by the 
          bot. */
          isCanceled              : Boolean
        } => Method[Boolean]
      
        /* Use this method to generate a new primary invite link for a chat; any 
          previously generated primary link is revoked. The bot must be an administrator 
          in the chat for this to work and must have the appropriate administrator rights. 
          Returns the new invite link as String on success.  */
        def exportChatInviteLink {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId : ChatId
        } => Method[String]
      
        /* Use this method to forward messages of any kind. Service messages and messages 
          with protected content can't be forwarded. On success, the sent Message is 
          returned.  */
        def forwardMessage {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId              : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId     : Option[Int]
          /* Unique identifier for the chat where the original message 
          was sent (or channel username in the format 
          &#064;channelusername) */
          fromChatId          : ChatId
          /* New start timestamp for the forwarded video in the message */
          videoStartTimestamp : Option[Int]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification : Option[Boolean]
          /* Protects the contents of the forwarded message from 
          forwarding and saving */
          protectContent      : Option[Boolean]
          /* Message identifier in the chat specified in from_chat_id */
          messageId           : Int
        } => Method[Message]
      
        /* Use this method to forward multiple messages of any kind. If some of the 
          specified messages can't be found or forwarded, they are skipped. Service 
          messages and messages with protected content can't be forwarded. Album grouping 
          is kept for forwarded messages. On success, an array of MessageId of the sent 
          messages is returned.  */
        def forwardMessages {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId              : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId     : Option[Int]
          /* Unique identifier for the chat where the original messages 
          were sent (or channel username in the format 
          &#064;channelusername) */
          fromChatId          : ChatId
          /* A JSON-serialized list of 1-100 identifiers of messages in 
          the chat from_chat_id to forward. The identifiers must be 
          specified in a strictly increasing order. */
          messageIds          : List[Int]
          /* Sends the messages silently. Users will receive a 
          notification with no sound. */
          disableNotification : Option[Boolean]
          /* Protects the contents of the forwarded messages from 
          forwarding and saving */
          protectContent      : Option[Boolean]
        } => Method[List[MessageId]]
      
        /* Returns the list of gifts that can be sent by the bot to users and channel 
          chats. Requires no parameters. Returns a Gifts object.  */
        def getAvailableGifts {
      
        } => Method[Gifts]
      
        /* Returns the gifts received and owned by a managed business account. Requires 
          the can_view_gifts_and_stars business bot right. Returns OwnedGifts on success.  */
        def getBusinessAccountGifts {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* Pass True to exclude gifts that aren't saved to the 
          account's profile page */
          excludeUnsaved       : Option[Boolean]
          /* Pass True to exclude gifts that are saved to the account's 
          profile page */
          excludeSaved         : Option[Boolean]
          /* Pass True to exclude gifts that can be purchased an 
          unlimited number of times */
          excludeUnlimited     : Option[Boolean]
          /* Pass True to exclude gifts that can be purchased a limited 
          number of times */
          excludeLimited       : Option[Boolean]
          /* Pass True to exclude unique gifts */
          excludeUnique        : Option[Boolean]
          /* Pass True to sort results by gift price instead of send 
          date. Sorting is applied before pagination. */
          sortByPrice          : Option[Boolean]
          /* Offset of the first entry to return as received from the 
          previous request; use empty string to get the first chunk of 
          results */
          offset               : Option[String]
          /* The maximum number of gifts to be returned; 1-100. Defaults 
          to 100 */
          limit                : Option[Int]
        } => Method[OwnedGifts]
      
        /* Returns the amount of Telegram Stars owned by a managed business account. 
          Requires the can_view_gifts_and_stars business bot right. Returns StarAmount on 
          success.  */
        def getBusinessAccountStarBalance {
          /* Unique identifier of the business connection */
          businessConnectionId : String
        } => Method[StarAmount]
      
        /* Use this method to get information about the connection of the bot with a 
          business account. Returns a BusinessConnection object on success.  */
        def getBusinessConnection {
          /* Unique identifier of the business connection */
          businessConnectionId : String
        } => Method[BusinessConnection]
      
        /* Use this method to get up-to-date information about the chat. Returns a 
          ChatFullInfo object on success.  */
        def getChat {
          /* Unique identifier for the target chat or username of the 
          target supergroup or channel (in the format 
          &#064;channelusername) */
          chatId : ChatId
        } => Method[ChatFullInfo]
      
        /* Use this method to get a list of administrators in a chat, which aren't bots. 
          Returns an Array of ChatMember objects.  */
        def getChatAdministrators {
          /* Unique identifier for the target chat or username of the 
          target supergroup or channel (in the format 
          &#064;channelusername) */
          chatId : ChatId
        } => Method[List[ChatMember]]
      
        /* Use this method to get information about a member of a chat. The method is only 
          guaranteed to work for other users if the bot is an administrator in the chat. 
          Returns a ChatMember object on success.  */
        def getChatMember {
          /* Unique identifier for the target chat or username of the 
          target supergroup or channel (in the format 
          &#064;channelusername) */
          chatId : ChatId
          /* Unique identifier of the target user */
          userId : Long
        } => Method[ChatMember]
      
        /* Use this method to get the number of members in a chat. Returns Int on success.  */
        def getChatMemberCount {
          /* Unique identifier for the target chat or username of the 
          target supergroup or channel (in the format 
          &#064;channelusername) */
          chatId : ChatId
        } => Method[Int]
      
        /* Use this method to get the current value of the bot's menu button in a private 
          chat, or the default menu button. Returns MenuButton on success.  */
        def getChatMenuButton {
          /* Unique identifier for the target private chat. If not 
          specified, default bot's menu button will be returned */
          chatId : Option[Long]
        } => Method[MenuButton]
      
        /* Use this method to get information about custom emoji stickers by their 
          identifiers. Returns an Array of Sticker objects.  */
        def getCustomEmojiStickers {
          /* A JSON-serialized list of custom emoji identifiers. At most 
          200 custom emoji identifiers can be specified. */
          customEmojiIds : List[String]
        } => Method[List[Sticker]]
      
        /* Use this method to get basic information about a file and prepare it for 
          downloading. For the moment, bots can download files of up to 20MB in size. On 
          success, a File object is returned. The file can then be downloaded via the link 
          https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken 
          from the response. It is guaranteed that the link will be valid for at least 1 
          hour. When the link expires, a new one can be requested by calling getFile 
          again.  */
        def getFile {
          /* File identifier to get information about */
          fileId : String
        } => Method[File]
      
        /* Use this method to get custom emoji stickers, which can be used as a forum 
          topic icon by any user. Requires no parameters. Returns an Array of Sticker 
          objects.  */
        def getForumTopicIconStickers {
      
        } => Method[List[Sticker]]
      
        /* Use this method to get data for high score tables. Will return the score of the 
          specified user and several of their neighbors in a game. Returns an Array of 
          GameHighScore objects.  */
        def getGameHighScores {
          /* Target user id */
          userId          : Long
          /* Required if inline_message_id is not specified. Unique 
          identifier for the target chat */
          chatId          : Option[Long]
          /* Required if inline_message_id is not specified. Identifier 
          of the sent message */
          messageId       : Option[Int]
          /* Required if chat_id and message_id are not specified. 
          Identifier of the inline message */
          inlineMessageId : Option[String]
        } => Method[List[GameHighScore]]
      
        /* A simple method for testing your bot's authentication token. Requires no 
          parameters. Returns basic information about the bot in form of a User object.  */
        def getMe {
      
        } => Method[User]
      
        /* Use this method to get the current list of the bot's commands for the given 
          scope and user language. Returns an Array of BotCommand objects. If commands 
          aren't set, an empty list is returned.  */
        def getMyCommands {
          /* A JSON-serialized object, describing scope of users. 
          Defaults to BotCommandScopeDefault. */
          scope        : Option[BotCommandScope]
          /* A two-letter ISO 639-1 language code or an empty string */
          languageCode : Option[String]
        } => Method[List[BotCommand]]
      
        /* Use this method to get the current default administrator rights of the bot. 
          Returns ChatAdministratorRights on success.  */
        def getMyDefaultAdministratorRights {
          /* Pass True to get default administrator rights of the bot in 
          channels. Otherwise, default administrator rights of the bot 
          for groups and supergroups will be returned. */
          forChannels : Option[Boolean]
        } => Method[ChatAdministratorRights]
      
        /* Use this method to get the current bot description for the given user language. 
          Returns BotDescription on success.  */
        def getMyDescription {
          /* A two-letter ISO 639-1 language code or an empty string */
          languageCode : Option[String]
        } => Method[BotDescription]
      
        /* Use this method to get the current bot name for the given user language. 
          Returns BotName on success.  */
        def getMyName {
          /* A two-letter ISO 639-1 language code or an empty string */
          languageCode : Option[String]
        } => Method[BotName]
      
        /* Use this method to get the current bot short description for the given user 
          language. Returns BotShortDescription on success.  */
        def getMyShortDescription {
          /* A two-letter ISO 639-1 language code or an empty string */
          languageCode : Option[String]
        } => Method[BotShortDescription]
      
        /* A method to get the current Telegram Stars balance of the bot. Requires no 
          parameters. On success, returns a StarAmount object.  */
        def getMyStarBalance {
      
        } => Method[StarAmount]
      
        /* Returns the bot's Telegram Star transactions in chronological order. On 
          success, returns a StarTransactions object.  */
        def getStarTransactions {
          /* Number of transactions to skip in the response */
          offset : Option[Int]
          /* The maximum number of transactions to be retrieved. Values 
          between 1-100 are accepted. Defaults to 100. */
          limit  : Option[Int]
        } => Method[StarTransactions]
      
        /* Use this method to get a sticker set. On success, a StickerSet object is 
          returned.  */
        def getStickerSet {
          /* Name of the sticker set */
          name : String
        } => Method[StickerSet]
      
        /* Use this method to receive incoming updates using long polling (wiki). Returns 
          an Array of Update objects.  */
        def getUpdates {
          /* Identifier of the first update to be returned. Must be 
          greater by one than the highest among the identifiers of 
          previously received updates. By default, updates starting 
          with the earliest unconfirmed update are returned. An update 
          is considered confirmed as soon as getUpdates is called with 
          an offset higher than its update_id. The negative offset can 
          be specified to retrieve updates starting from -offset 
          update from the end of the updates queue. All previous 
          updates will be forgotten. */
          offset         : Option[Int]
          /* Limits the number of updates to be retrieved. Values 
          between 1-100 are accepted. Defaults to 100. */
          limit          : Option[Int]
          /* Timeout in seconds for long polling. Defaults to 0, i.e. 
          usual short polling. Should be positive, short polling 
          should be used for testing purposes only. */
          timeout        : Option[Int]
          /* A JSON-serialized list of the update types you want your 
          bot to receive. For example, specify ["message", 
          "edited_channel_post", "callback_query"] to only receive 
          updates of these types. See Update for a complete list of 
          available update types. Specify an empty list to receive all 
          update types except chat_member, message_reaction, and 
          message_reaction_count (default). If not specified, the 
          previous setting will be used. Please note that this 
          parameter doesn't affect updates created before the call to 
          getUpdates, so unwanted updates may be received for a short 
          period of time. */
          allowedUpdates : List[String]
        } => Method[List[Update]]
      
        /* Use this method to get the list of boosts added to a chat by a user. Requires 
          administrator rights in the chat. Returns a UserChatBoosts object.  */
        def getUserChatBoosts {
          /* Unique identifier for the chat or username of the channel 
          (in the format &#064;channelusername) */
          chatId : ChatId
          /* Unique identifier of the target user */
          userId : Long
        } => Method[UserChatBoosts]
      
        /* Use this method to get a list of profile pictures for a user. Returns a 
          UserProfilePhotos object.  */
        def getUserProfilePhotos {
          /* Unique identifier of the target user */
          userId : Long
          /* Sequential number of the first photo to be returned. By 
          default, all photos are returned. */
          offset : Option[Int]
          /* Limits the number of photos to be retrieved. Values between 
          1-100 are accepted. Defaults to 100. */
          limit  : Option[Int]
        } => Method[UserProfilePhotos]
      
        /* Use this method to get current webhook status. Requires no parameters. On 
          success, returns a WebhookInfo object. If the bot is using getUpdates, will 
          return an object with the url field empty.  */
        def getWebhookInfo {
      
        } => Method[WebhookInfo]
      
        /* Gifts a Telegram Premium subscription to the given user. Returns True on 
          success.  */
        def giftPremiumSubscription {
          /* Unique identifier of the target user who will receive a 
          Telegram Premium subscription */
          userId        : Long
          /* Number of months the Telegram Premium subscription will be 
          active for the user; must be one of 3, 6, or 12 */
          monthCount    : Int
          /* Number of Telegram Stars to pay for the Telegram Premium 
          subscription; must be 1000 for 3 months, 1500 for 6 months, 
          and 2500 for 12 months */
          starCount     : Int
          /* Text that will be shown along with the service message 
          about the subscription; 0-128 characters */
          text          : Option[String]
          /* Mode for parsing entities in the text. See formatting 
          options for more details. Entities other than ‚Äúbold‚Äù, 
          ‚Äúitalic‚Äù, ‚Äúunderline‚Äù, ‚Äústrikethrough‚Äù, ‚Äúspoiler‚Äù, and 
          ‚Äúcustom_emoji‚Äù are ignored. */
          textParseMode : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the gift text. It can be specified instead of 
          text_parse_mode. Entities other than ‚Äúbold‚Äù, ‚Äúitalic‚Äù, 
          ‚Äúunderline‚Äù, ‚Äústrikethrough‚Äù, ‚Äúspoiler‚Äù, and ‚Äúcustom_emoji‚Äù 
          are ignored. */
          textEntities  : List[MessageEntity]
        } => Method[Boolean]
      
        /* Use this method to hide the 'General' topic in a forum supergroup chat. The bot 
          must be an administrator in the chat for this to work and must have the 
          can_manage_topics administrator rights. The topic will be automatically closed 
          if it was open. Returns True on success.  */
        def hideGeneralForumTopic {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId : ChatId
        } => Method[Boolean]
      
        /* Use this method for your bot to leave a group, supergroup or channel. Returns 
          True on success.  */
        def leaveChat {
          /* Unique identifier for the target chat or username of the 
          target supergroup or channel (in the format 
          &#064;channelusername) */
          chatId : ChatId
        } => Method[Boolean]
      
        /* Use this method to log out from the cloud Bot API server before launching the 
          bot locally. You must log out the bot before running it locally, otherwise there 
          is no guarantee that the bot will receive updates. After a successful call, you 
          can immediately log in on a local server, but will not be able to log in back to 
          the cloud Bot API server for 10 minutes. Returns True on success. Requires no 
          parameters.  */
        def logOut {
      
        } => Method[Boolean]
      
        /* Use this method to add a message to the list of pinned messages in a chat. If 
          the chat is not a private chat, the bot must be an administrator in the chat for 
          this to work and must have the 'can_pin_messages' administrator right in a 
          supergroup or 'can_edit_messages' administrator right in a channel. Returns True 
          on success.  */
        def pinChatMessage {
          /* Unique identifier of the business connection on behalf of 
          which the message will be pinned */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Identifier of a message to pin */
          messageId            : Int
          /* Pass True if it is not necessary to send a notification to 
          all chat members about the new pinned message. Notifications 
          are always disabled in channels and private chats. */
          disableNotification  : Option[Boolean]
        } => Method[Boolean]
      
        /* Posts a story on behalf of a managed business account. Requires the 
          can_manage_stories business bot right. Returns Story on success.  */
        def postStory {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* Content of the story */
          content              : InputStoryContent
          /* Period after which the story is moved to the archive, in 
          seconds; must be one of 6 * 3600, 12 * 3600, 86400, or 2 * 
          86400 */
          activePeriod         : Int
          /* Caption of the story, 0-2048 characters after entities 
          parsing */
          caption              : Option[String]
          /* Mode for parsing entities in the story caption. See 
          formatting options for more details. */
          parseMode            : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the caption, which can be specified instead of parse_mode */
          captionEntities      : List[MessageEntity]
          /* A JSON-serialized list of clickable areas to be shown on 
          the story */
          areas                : List[StoryArea]
          /* Pass True to keep the story accessible after it expires */
          postToChatPage       : Option[Boolean]
          /* Pass True if the content of the story must be protected 
          from forwarding and screenshotting */
          protectContent       : Option[Boolean]
        } => Method[Story]
      
        /* Use this method to promote or demote a user in a supergroup or a channel. The 
          bot must be an administrator in the chat for this to work and must have the 
          appropriate administrator rights. Pass False for all boolean parameters to 
          demote a user. Returns True on success.  */
        def promoteChatMember {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId              : ChatId
          /* Unique identifier of the target user */
          userId              : Long
          /* Pass True if the administrator's presence in the chat is 
          hidden */
          isAnonymous         : Option[Boolean]
          /* Pass True if the administrator can access the chat event 
          log, get boost list, see hidden supergroup and channel 
          members, report spam messages, ignore slow mode, and send 
          messages to the chat without paying Telegram Stars. Implied 
          by any other administrator privilege. */
          canManageChat       : Option[Boolean]
          /* Pass True if the administrator can delete messages of other 
          users */
          canDeleteMessages   : Option[Boolean]
          /* Pass True if the administrator can manage video chats */
          canManageVideoChats : Option[Boolean]
          /* Pass True if the administrator can restrict, ban or unban 
          chat members, or access supergroup statistics */
          canRestrictMembers  : Option[Boolean]
          /* Pass True if the administrator can add new administrators 
          with a subset of their own privileges or demote 
          administrators that they have promoted, directly or 
          indirectly (promoted by administrators that were appointed 
          by him) */
          canPromoteMembers   : Option[Boolean]
          /* Pass True if the administrator can change chat title, photo 
          and other settings */
          canChangeInfo       : Option[Boolean]
          /* Pass True if the administrator can invite new users to the 
          chat */
          canInviteUsers      : Option[Boolean]
          /* Pass True if the administrator can post stories to the chat */
          canPostStories      : Option[Boolean]
          /* Pass True if the administrator can edit stories posted by 
          other users, post stories to the chat page, pin chat 
          stories, and access the chat's story archive */
          canEditStories      : Option[Boolean]
          /* Pass True if the administrator can delete stories posted by 
          other users */
          canDeleteStories    : Option[Boolean]
          /* Pass True if the administrator can post messages in the 
          channel, approve suggested posts, or access channel 
          statistics; for channels only */
          canPostMessages     : Option[Boolean]
          /* Pass True if the administrator can edit messages of other 
          users and can pin messages; for channels only */
          canEditMessages     : Option[Boolean]
          /* Pass True if the administrator can pin messages; for 
          supergroups only */
          canPinMessages      : Option[Boolean]
          /* Pass True if the user is allowed to create, rename, close, 
          and reopen forum topics; for supergroups only */
          canManageTopics     : Option[Boolean]
        } => Method[Boolean]
      
        /* Marks incoming message as read on behalf of a business account. Requires the 
          can_read_messages business bot right. Returns True on success.  */
        def readBusinessMessage {
          /* Unique identifier of the business connection on behalf of 
          which to read the message */
          businessConnectionId : String
          /* Unique identifier of the chat in which the message was 
          received. The chat must have been active in the last 24 
          hours. */
          chatId               : Long
          /* Unique identifier of the message to mark as read */
          messageId            : Int
        } => Method[Boolean]
      
        /* Refunds a successful payment in Telegram Stars. Returns True on success.  */
        def refundStarPayment {
          /* Identifier of the user whose payment will be refunded */
          userId                  : Long
          /* Telegram payment identifier */
          telegramPaymentChargeId : String
        } => Method[Boolean]
      
        /* Removes the current profile photo of a managed business account. Requires the 
          can_edit_profile_photo business bot right. Returns True on success.  */
        def removeBusinessAccountProfilePhoto {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* Pass True to remove the public photo, which is visible even 
          if the main photo is hidden by the business account's 
          privacy settings. After the main photo is removed, the 
          previous profile photo (if present) becomes the main photo. */
          isPublic             : Option[Boolean]
        } => Method[Boolean]
      
        /* Removes verification from a chat that is currently verified on behalf of the 
          organization represented by the bot. Returns True on success.  */
        def removeChatVerification {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId : ChatId
        } => Method[Boolean]
      
        /* Removes verification from a user who is currently verified on behalf of the 
          organization represented by the bot. Returns True on success.  */
        def removeUserVerification {
          /* Unique identifier of the target user */
          userId : Long
        } => Method[Boolean]
      
        /* Use this method to reopen a closed topic in a forum supergroup chat. The bot 
          must be an administrator in the chat for this to work and must have the 
          can_manage_topics administrator rights, unless it is the creator of the topic. 
          Returns True on success.  */
        def reopenForumTopic {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId          : ChatId
          /* Unique identifier for the target message thread of the 
          forum topic */
          messageThreadId : Int
        } => Method[Boolean]
      
        /* Use this method to reopen a closed 'General' topic in a forum supergroup chat. 
          The bot must be an administrator in the chat for this to work and must have the 
          can_manage_topics administrator rights. The topic will be automatically unhidden 
          if it was hidden. Returns True on success.  */
        def reopenGeneralForumTopic {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId : ChatId
        } => Method[Boolean]
      
        /* Use this method to replace an existing sticker in a sticker set with a new one. 
          The method is equivalent to calling deleteStickerFromSet, then addStickerToSet, 
          then setStickerPositionInSet. Returns True on success.  */
        def replaceStickerInSet {
          /* User identifier of the sticker set owner */
          userId     : Long
          /* Sticker set name */
          name       : String
          /* File identifier of the replaced sticker */
          oldSticker : String
          /* A JSON-serialized object with information about the added 
          sticker. If exactly the same sticker had already been added 
          to the set, then the set remains unchanged. */
          sticker    : InputSticker
        } => Method[Boolean]
      
        /* Use this method to restrict a user in a supergroup. The bot must be an 
          administrator in the supergroup for this to work and must have the appropriate 
          administrator rights. Pass True for all permissions to lift restrictions from a 
          user. Returns True on success.  */
        def restrictChatMember {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId                        : ChatId
          /* Unique identifier of the target user */
          userId                        : Long
          /* A JSON-serialized object for new user permissions */
          permissions                   : ChatPermissions
          /* Pass True if chat permissions are set independently. 
          Otherwise, the can_send_other_messages and 
          can_add_web_page_previews permissions will imply the 
          can_send_messages, can_send_audios, can_send_documents, 
          can_send_photos, can_send_videos, can_send_video_notes, and 
          can_send_voice_notes permissions; the can_send_polls 
          permission will imply the can_send_messages permission. */
          useIndependentChatPermissions : Option[Boolean]
          /* Date when restrictions will be lifted for the user; Unix 
          time. If user is restricted for more than 366 days or less 
          than 30 seconds from the current time, they are considered 
          to be restricted forever */
          untilDate                     : Option[Int]
        } => Method[Boolean]
      
        /* Use this method to revoke an invite link created by the bot. If the primary 
          link is revoked, a new link is automatically generated. The bot must be an 
          administrator in the chat for this to work and must have the appropriate 
          administrator rights. Returns the revoked invite link as ChatInviteLink object.  */
        def revokeChatInviteLink {
          /* Unique identifier of the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId     : ChatId
          /* The invite link to revoke */
          inviteLink : String
        } => Method[ChatInviteLink]
      
        /* Stores a message that can be sent by a user of a Mini App. Returns a 
          PreparedInlineMessage object.  */
        def savePreparedInlineMessage {
          /* Unique identifier of the target user that can use the 
          prepared message */
          userId            : Long
          /* A JSON-serialized object describing the message to be sent */
          result            : InlineQueryResult
          /* Pass True if the message can be sent to private chats with 
          users */
          allowUserChats    : Option[Boolean]
          /* Pass True if the message can be sent to private chats with 
          bots */
          allowBotChats     : Option[Boolean]
          /* Pass True if the message can be sent to group and 
          supergroup chats */
          allowGroupChats   : Option[Boolean]
          /* Pass True if the message can be sent to channel chats */
          allowChannelChats : Option[Boolean]
        } => Method[PreparedInlineMessage]
      
        /* Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without 
          sound). On success, the sent Message is returned. Bots can currently send 
          animation files of up to 50 MB in size, this limit may be changed in the future.  */
        def sendAnimation {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId  : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId                : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId       : Option[Int]
          /* Animation to send. Pass a file_id as String to send an 
          animation that exists on the Telegram servers (recommended), 
          pass an HTTP URL as a String for Telegram to get an 
          animation from the Internet, or upload a new animation using 
          multipart/form-data. */
          animation             : (file) IFile
          /* Duration of sent animation in seconds */
          duration              : Option[Int]
          /* Animation width */
          width                 : Option[Int]
          /* Animation height */
          height                : Option[Int]
          /* Thumbnail of the file sent; can be ignored if thumbnail 
          generation for the file is supported server-side. The 
          thumbnail should be in JPEG format and less than 200 kB in 
          size. A thumbnail's width and height should not exceed 320. 
          Ignored if the file is not uploaded using 
          multipart/form-data. Thumbnails can't be reused and can be 
          only uploaded as a new file, so you can pass 
          ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded 
          using multipart/form-data under <file_attach_name>. */
          thumbnail             : (file) Option[IFile]
          /* Animation caption (may also be used when resending 
          animation by file_id), 0-1024 characters after entities 
          parsing */
          caption               : Option[String]
          /* Mode for parsing entities in the animation caption. See 
          formatting options for more details. */
          parseMode             : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the caption, which can be specified instead of parse_mode */
          captionEntities       : List[MessageEntity]
          /* Pass True, if the caption must be shown above the message 
          media */
          showCaptionAboveMedia : Option[Boolean]
          /* Pass True if the animation needs to be covered with a 
          spoiler animation */
          hasSpoiler            : Option[Boolean]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification   : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent        : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast    : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId       : Option[String]
          /* Description of the message to reply to */
          replyParameters       : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup           : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send audio files, if you want Telegram clients to display 
          them in the music player. Your audio must be in the .MP3 or .M4A format. On 
          success, the sent Message is returned. Bots can currently send audio files of up 
          to 50 MB in size, this limit may be changed in the future. For sending voice 
          messages, use the sendVoice method instead.  */
        def sendAudio {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId      : Option[Int]
          /* Audio file to send. Pass a file_id as String to send an 
          audio file that exists on the Telegram servers 
          (recommended), pass an HTTP URL as a String for Telegram to 
          get an audio file from the Internet, or upload a new one 
          using multipart/form-data. */
          audio                : (file) IFile
          /* Audio caption, 0-1024 characters after entities parsing */
          caption              : Option[String]
          /* Mode for parsing entities in the audio caption. See 
          formatting options for more details. */
          parseMode            : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the caption, which can be specified instead of parse_mode */
          captionEntities      : List[MessageEntity]
          /* Duration of the audio in seconds */
          duration             : Option[Int]
          /* Performer */
          performer            : Option[String]
          /* Track name */
          title                : Option[String]
          /* Thumbnail of the file sent; can be ignored if thumbnail 
          generation for the file is supported server-side. The 
          thumbnail should be in JPEG format and less than 200 kB in 
          size. A thumbnail's width and height should not exceed 320. 
          Ignored if the file is not uploaded using 
          multipart/form-data. Thumbnails can't be reused and can be 
          only uploaded as a new file, so you can pass 
          ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded 
          using multipart/form-data under <file_attach_name>. */
          thumbnail            : (file) Option[IFile]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent       : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast   : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId      : Option[String]
          /* Description of the message to reply to */
          replyParameters      : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup          : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method when you need to tell the user that something is happening on 
          the bot's side. The status is set for 5 seconds or less (when a message arrives 
          from your bot, Telegram clients clear its typing status). Returns True on 
          success. We only recommend using this method when a response from the bot will 
          take a noticeable amount of time to arrive.  */
        def sendChatAction {
          /* Unique identifier of the business connection on behalf of 
          which the action will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Unique identifier for the target message thread; for 
          supergroups only */
          messageThreadId      : Option[Int]
          /* Type of action to broadcast. Choose one, depending on what 
          the user is about to receive: typing for text messages, 
          upload_photo for photos, record_video or upload_video for 
          videos, record_voice or upload_voice for voice notes, 
          upload_document for general files, choose_sticker for 
          stickers, find_location for location data, record_video_note 
          or upload_video_note for video notes. */
          action               : String
        } => Method[Boolean]
      
        /* Use this method to send a checklist on behalf of a connected business account. 
          On success, the sent Message is returned.  */
        def sendChecklist {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : String
          /* Unique identifier for the target chat */
          chatId               : Long
          /* A JSON-serialized object for the checklist to send */
          checklist            : InputChecklist
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent       : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message */
          messageEffectId      : Option[String]
          /* A JSON-serialized object for description of the message to 
          reply to */
          replyParameters      : Option[ReplyParameters]
          /* A JSON-serialized object for an inline keyboard */
          replyMarkup          : Option[InlineKeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send phone contacts. On success, the sent Message is 
          returned.  */
        def sendContact {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId      : Option[Int]
          /* Contact's phone number */
          phoneNumber          : String
          /* Contact's first name */
          firstName            : String
          /* Contact's last name */
          lastName             : Option[String]
          /* Additional data about the contact in the form of a vCard, 
          0-2048 bytes */
          vcard                : Option[String]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent       : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast   : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId      : Option[String]
          /* Description of the message to reply to */
          replyParameters      : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup          : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send an animated emoji that will display a random value. On 
          success, the sent Message is returned.  */
        def sendDice {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId      : Option[Int]
          /* Emoji on which the dice throw animation is based. 
          Currently, must be one of ‚Äúüé≤‚Äù, ‚ÄúüéØ‚Äù, ‚ÄúüèÄ‚Äù, ‚Äú‚öΩ‚Äù, ‚Äúüé≥‚Äù, or 
          ‚Äúüé∞‚Äù. Dice can have values 1-6 for ‚Äúüé≤‚Äù, ‚ÄúüéØ‚Äù and ‚Äúüé≥‚Äù, 
          values 1-5 for ‚ÄúüèÄ‚Äù and ‚Äú‚öΩ‚Äù, and values 1-64 for ‚Äúüé∞‚Äù. 
          Defaults to ‚Äúüé≤‚Äù */
          emoji                : Option[String]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent message from forwarding */
          protectContent       : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast   : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId      : Option[String]
          /* Description of the message to reply to */
          replyParameters      : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup          : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send general files. On success, the sent Message is 
          returned. Bots can currently send files of any type of up to 50 MB in size, this 
          limit may be changed in the future.  */
        def sendDocument {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId        : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId                      : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId             : Option[Int]
          /* File to send. Pass a file_id as String to send a file that 
          exists on the Telegram servers (recommended), pass an HTTP 
          URL as a String for Telegram to get a file from the 
          Internet, or upload a new one using multipart/form-data. */
          document                    : (file) IFile
          /* Thumbnail of the file sent; can be ignored if thumbnail 
          generation for the file is supported server-side. The 
          thumbnail should be in JPEG format and less than 200 kB in 
          size. A thumbnail's width and height should not exceed 320. 
          Ignored if the file is not uploaded using 
          multipart/form-data. Thumbnails can't be reused and can be 
          only uploaded as a new file, so you can pass 
          ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded 
          using multipart/form-data under <file_attach_name>. */
          thumbnail                   : (file) Option[IFile]
          /* Document caption (may also be used when resending documents 
          by file_id), 0-1024 characters after entities parsing */
          caption                     : Option[String]
          /* Mode for parsing entities in the document caption. See 
          formatting options for more details. */
          parseMode                   : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the caption, which can be specified instead of parse_mode */
          captionEntities             : List[MessageEntity]
          /* Disables automatic server-side content type detection for 
          files uploaded using multipart/form-data */
          disableContentTypeDetection : Option[Boolean]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification         : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent              : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast          : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId             : Option[String]
          /* Description of the message to reply to */
          replyParameters             : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup                 : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send a game. On success, the sent Message is returned.  */
        def sendGame {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat */
          chatId               : Long
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId      : Option[Int]
          /* Short name of the game, serves as the unique identifier for 
          the game. Set up your games via &#064;BotFather. */
          gameShortName        : String
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent       : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast   : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId      : Option[String]
          /* Description of the message to reply to */
          replyParameters      : Option[ReplyParameters]
          /* A JSON-serialized object for an inline keyboard. If empty, 
          one 'Play game_title' button will be shown. If not empty, 
          the first button must launch the game. */
          replyMarkup          : Option[InlineKeyboardMarkup]
        } => Method[Message]
      
        /* Sends a gift to the given user or channel chat. The gift can't be converted to 
          Telegram Stars by the receiver. Returns True on success.  */
        def sendGift {
          /* Required if chat_id is not specified. Unique identifier of 
          the target user who will receive the gift. */
          userId        : Option[Long]
          /* Required if user_id is not specified. Unique identifier for 
          the chat or username of the channel (in the format 
          &#064;channelusername) that will receive the gift. */
          chatId        : Option[ChatId]
          /* Identifier of the gift */
          giftId        : String
          /* Pass True to pay for the gift upgrade from the bot's 
          balance, thereby making the upgrade free for the receiver */
          payForUpgrade : Option[Boolean]
          /* Text that will be shown along with the gift; 0-128 
          characters */
          text          : Option[String]
          /* Mode for parsing entities in the text. See formatting 
          options for more details. Entities other than ‚Äúbold‚Äù, 
          ‚Äúitalic‚Äù, ‚Äúunderline‚Äù, ‚Äústrikethrough‚Äù, ‚Äúspoiler‚Äù, and 
          ‚Äúcustom_emoji‚Äù are ignored. */
          textParseMode : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the gift text. It can be specified instead of 
          text_parse_mode. Entities other than ‚Äúbold‚Äù, ‚Äúitalic‚Äù, 
          ‚Äúunderline‚Äù, ‚Äústrikethrough‚Äù, ‚Äúspoiler‚Äù, and ‚Äúcustom_emoji‚Äù 
          are ignored. */
          textEntities  : List[MessageEntity]
        } => Method[Boolean]
      
        /* Use this method to send invoices. On success, the sent Message is returned.  */
        def sendInvoice {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId                    : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId           : Option[Int]
          /* Product name, 1-32 characters */
          title                     : String
          /* Product description, 1-255 characters */
          description               : String
          /* Bot-defined invoice payload, 1-128 bytes. This will not be 
          displayed to the user, use it for your internal processes. */
          payload                   : String
          /* Payment provider token, obtained via &#064;BotFather. Pass 
          an empty string for payments in Telegram Stars. */
          providerToken             : Option[String]
          /* Three-letter ISO 4217 currency code, see more on 
          currencies. Pass ‚ÄúXTR‚Äù for payments in Telegram Stars. */
          currency                  : String
          /* Price breakdown, a JSON-serialized list of components (e.g. 
          product price, tax, discount, delivery cost, delivery tax, 
          bonus, etc.). Must contain exactly one item for payments in 
          Telegram Stars. */
          prices                    : List[LabeledPrice]
          /* The maximum accepted amount for tips in the smallest units 
          of the currency (integer, not float/double). For example, 
          for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See 
          the exp parameter in currencies.json, it shows the number of 
          digits past the decimal point for each currency (2 for the 
          majority of currencies). Defaults to 0. Not supported for 
          payments in Telegram Stars. */
          maxTipAmount              : Option[Int]
          /* A JSON-serialized array of suggested amounts of tips in the 
          smallest units of the currency (integer, not float/double). 
          At most 4 suggested tip amounts can be specified. The 
          suggested tip amounts must be positive, passed in a strictly 
          increased order and must not exceed max_tip_amount. */
          suggestedTipAmounts       : List[Int]
          /* Unique deep-linking parameter. If left empty, forwarded 
          copies of the sent message will have a Pay button, allowing 
          multiple users to pay directly from the forwarded message, 
          using the same invoice. If non-empty, forwarded copies of 
          the sent message will have a URL button with a deep link to 
          the bot (instead of a Pay button), with the value used as 
          the start parameter */
          startParameter            : Option[String]
          /* JSON-serialized data about the invoice, which will be 
          shared with the payment provider. A detailed description of 
          required fields should be provided by the payment provider. */
          providerData              : Option[String]
          /* URL of the product photo for the invoice. Can be a photo of 
          the goods or a marketing image for a service. People like it 
          better when they see what they are paying for. */
          photoUrl                  : Option[String]
          /* Photo size in bytes */
          photoSize                 : Option[Long]
          /* Photo width */
          photoWidth                : Option[Int]
          /* Photo height */
          photoHeight               : Option[Int]
          /* Pass True if you require the user's full name to complete 
          the order. Ignored for payments in Telegram Stars. */
          needName                  : Option[Boolean]
          /* Pass True if you require the user's phone number to 
          complete the order. Ignored for payments in Telegram Stars. */
          needPhoneNumber           : Option[Boolean]
          /* Pass True if you require the user's email address to 
          complete the order. Ignored for payments in Telegram Stars. */
          needEmail                 : Option[Boolean]
          /* Pass True if you require the user's shipping address to 
          complete the order. Ignored for payments in Telegram Stars. */
          needShippingAddress       : Option[Boolean]
          /* Pass True if the user's phone number should be sent to the 
          provider. Ignored for payments in Telegram Stars. */
          sendPhoneNumberToProvider : Option[Boolean]
          /* Pass True if the user's email address should be sent to the 
          provider. Ignored for payments in Telegram Stars. */
          sendEmailToProvider       : Option[Boolean]
          /* Pass True if the final price depends on the shipping 
          method. Ignored for payments in Telegram Stars. */
          isFlexible                : Option[Boolean]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification       : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent            : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast        : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId           : Option[String]
          /* Description of the message to reply to */
          replyParameters           : Option[ReplyParameters]
          /* A JSON-serialized object for an inline keyboard. If empty, 
          one 'Pay total price' button will be shown. If not empty, 
          the first button must be a Pay button. */
          replyMarkup               : Option[InlineKeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send point on the map. On success, the sent Message is 
          returned.  */
        def sendLocation {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId      : Option[Int]
          /* Latitude of the location */
          latitude             : Float
          /* Longitude of the location */
          longitude            : Float
          /* The radius of uncertainty for the location, measured in 
          meters; 0-1500 */
          horizontalAccuracy   : Option[Float]
          /* Period in seconds during which the location will be updated 
          (see Live Locations, should be between 60 and 86400, or 
          0x7FFFFFFF for live locations that can be edited 
          indefinitely. */
          livePeriod           : Option[Int]
          /* For live locations, a direction in which the user is 
          moving, in degrees. Must be between 1 and 360 if specified. */
          heading              : Option[Int]
          /* For live locations, a maximum distance for proximity alerts 
          about approaching another chat member, in meters. Must be 
          between 1 and 100000 if specified. */
          proximityAlertRadius : Option[Int]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent       : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast   : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId      : Option[String]
          /* Description of the message to reply to */
          replyParameters      : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup          : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send a group of photos, videos, documents or audios as an 
          album. Documents and audio files can be only grouped in an album with messages 
          of the same type. On success, an array of Messages that were sent is returned.  */
        def sendMediaGroup {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId      : Option[Int]
          /* A JSON-serialized array describing messages to be sent, 
          must include 2-10 items */
          media                : List[InputMedia]
          /* Sends messages silently. Users will receive a notification 
          with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent messages from forwarding 
          and saving */
          protectContent       : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast   : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId      : Option[String]
          /* Description of the message to reply to */
          replyParameters      : Option[ReplyParameters]
        } => Method[List[Message]]
      
        /* Use this method to send text messages. On success, the sent Message is 
          returned.  */
        def sendMessage {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId      : Option[Int]
          /* Text of the message to be sent, 1-4096 characters after 
          entities parsing */
          text                 : String
          /* Mode for parsing entities in the message text. See 
          formatting options for more details. */
          parseMode            : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          message text, which can be specified instead of parse_mode */
          entities             : List[MessageEntity]
          /* Link preview generation options for the message */
          linkPreviewOptions   : Option[LinkPreviewOptions]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent       : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast   : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId      : Option[String]
          /* Description of the message to reply to */
          replyParameters      : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup          : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send paid media. On success, the sent Message is returned.  */
        def sendPaidMedia {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId  : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername). If the 
          chat is a channel, all Telegram Star proceeds from this 
          media will be credited to the chat's balance. Otherwise, 
          they will be credited to the bot's balance. */
          chatId                : ChatId
          /* The number of Telegram Stars that must be paid to buy 
          access to the media; 1-10000 */
          starCount             : Int
          /* A JSON-serialized array describing the media to be sent; up 
          to 10 items */
          media                 : List[InputPaidMedia]
          /* Bot-defined paid media payload, 0-128 bytes. This will not 
          be displayed to the user, use it for your internal 
          processes. */
          payload               : Option[String]
          /* Media caption, 0-1024 characters after entities parsing */
          caption               : Option[String]
          /* Mode for parsing entities in the media caption. See 
          formatting options for more details. */
          parseMode             : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the caption, which can be specified instead of parse_mode */
          captionEntities       : List[MessageEntity]
          /* Pass True, if the caption must be shown above the message 
          media */
          showCaptionAboveMedia : Option[Boolean]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification   : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent        : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast    : Option[Boolean]
          /* Description of the message to reply to */
          replyParameters       : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup           : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send photos. On success, the sent Message is returned.  */
        def sendPhoto {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId  : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId                : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId       : Option[Int]
          /* Photo to send. Pass a file_id as String to send a photo 
          that exists on the Telegram servers (recommended), pass an 
          HTTP URL as a String for Telegram to get a photo from the 
          Internet, or upload a new photo using multipart/form-data. 
          The photo must be at most 10 MB in size. The photo's width 
          and height must not exceed 10000 in total. Width and height 
          ratio must be at most 20. */
          photo                 : (file) IFile
          /* Photo caption (may also be used when resending photos by 
          file_id), 0-1024 characters after entities parsing */
          caption               : Option[String]
          /* Mode for parsing entities in the photo caption. See 
          formatting options for more details. */
          parseMode             : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the caption, which can be specified instead of parse_mode */
          captionEntities       : List[MessageEntity]
          /* Pass True, if the caption must be shown above the message 
          media */
          showCaptionAboveMedia : Option[Boolean]
          /* Pass True if the photo needs to be covered with a spoiler 
          animation */
          hasSpoiler            : Option[Boolean]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification   : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent        : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast    : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId       : Option[String]
          /* Description of the message to reply to */
          replyParameters       : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup           : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send a native poll. On success, the sent Message is 
          returned.  */
        def sendPoll {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId  : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId                : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId       : Option[Int]
          /* Poll question, 1-300 characters */
          question              : String
          /* Mode for parsing entities in the question. See formatting 
          options for more details. Currently, only custom emoji 
          entities are allowed */
          questionParseMode     : Option[String]
          /* A JSON-serialized list of special entities that appear in 
          the poll question. It can be specified instead of 
          question_parse_mode */
          questionEntities      : List[MessageEntity]
          /* A JSON-serialized list of 2-12 answer options */
          options               : List[InputPollOption]
          /* True, if the poll needs to be anonymous, defaults to True */
          isAnonymous           : Option[Boolean]
          /* Poll type, ‚Äúquiz‚Äù or ‚Äúregular‚Äù, defaults to ‚Äúregular‚Äù */
          type                  : Option[String]
          /* True, if the poll allows multiple answers, ignored for 
          polls in quiz mode, defaults to False */
          allowsMultipleAnswers : Option[Boolean]
          /* 0-based identifier of the correct answer option, required 
          for polls in quiz mode */
          correctOptionId       : Option[Int]
          /* Text that is shown when a user chooses an incorrect answer 
          or taps on the lamp icon in a quiz-style poll, 0-200 
          characters with at most 2 line feeds after entities parsing */
          explanation           : Option[String]
          /* Mode for parsing entities in the explanation. See 
          formatting options for more details. */
          explanationParseMode  : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the poll explanation. It can be specified instead of 
          explanation_parse_mode */
          explanationEntities   : List[MessageEntity]
          /* Amount of time in seconds the poll will be active after 
          creation, 5-600. Can't be used together with close_date. */
          openPeriod            : Option[Int]
          /* Point in time (Unix timestamp) when the poll will be 
          automatically closed. Must be at least 5 and no more than 
          600 seconds in the future. Can't be used together with 
          open_period. */
          closeDate             : Option[Int]
          /* Pass True if the poll needs to be immediately closed. This 
          can be useful for poll preview. */
          isClosed              : Option[Boolean]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification   : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent        : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast    : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId       : Option[String]
          /* Description of the message to reply to */
          replyParameters       : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup           : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. 
          On success, the sent Message is returned.  */
        def sendSticker {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId      : Option[Int]
          /* Sticker to send. Pass a file_id as String to send a file 
          that exists on the Telegram servers (recommended), pass an 
          HTTP URL as a String for Telegram to get a .WEBP sticker 
          from the Internet, or upload a new .WEBP, .TGS, or .WEBM 
          sticker using multipart/form-data. Video and animated 
          stickers can't be sent via an HTTP URL. */
          sticker              : (file) IFile
          /* Emoji associated with the sticker; only for just uploaded 
          stickers */
          emoji                : Option[String]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent       : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast   : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId      : Option[String]
          /* Description of the message to reply to */
          replyParameters      : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup          : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send information about a venue. On success, the sent Message 
          is returned.  */
        def sendVenue {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId      : Option[Int]
          /* Latitude of the venue */
          latitude             : Float
          /* Longitude of the venue */
          longitude            : Float
          /* Name of the venue */
          title                : String
          /* Address of the venue */
          address              : String
          /* Foursquare identifier of the venue */
          foursquareId         : Option[String]
          /* Foursquare type of the venue, if known. (For example, 
          ‚Äúarts_entertainment/default‚Äù, ‚Äúarts_entertainment/aquarium‚Äù 
          or ‚Äúfood/icecream‚Äù.) */
          foursquareType       : Option[String]
          /* Google Places identifier of the venue */
          googlePlaceId        : Option[String]
          /* Google Places type of the venue. (See supported types.) */
          googlePlaceType      : Option[String]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent       : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast   : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId      : Option[String]
          /* Description of the message to reply to */
          replyParameters      : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup          : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send video files, Telegram clients support MPEG4 videos 
          (other formats may be sent as Document). On success, the sent Message is 
          returned. Bots can currently send video files of up to 50 MB in size, this limit 
          may be changed in the future.  */
        def sendVideo {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId  : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId                : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId       : Option[Int]
          /* Video to send. Pass a file_id as String to send a video 
          that exists on the Telegram servers (recommended), pass an 
          HTTP URL as a String for Telegram to get a video from the 
          Internet, or upload a new video using multipart/form-data. */
          video                 : (file) IFile
          /* Duration of sent video in seconds */
          duration              : Option[Int]
          /* Video width */
          width                 : Option[Int]
          /* Video height */
          height                : Option[Int]
          /* Thumbnail of the file sent; can be ignored if thumbnail 
          generation for the file is supported server-side. The 
          thumbnail should be in JPEG format and less than 200 kB in 
          size. A thumbnail's width and height should not exceed 320. 
          Ignored if the file is not uploaded using 
          multipart/form-data. Thumbnails can't be reused and can be 
          only uploaded as a new file, so you can pass 
          ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded 
          using multipart/form-data under <file_attach_name>. */
          thumbnail             : (file) Option[IFile]
          /* Cover for the video in the message. Pass a file_id to send 
          a file that exists on the Telegram servers (recommended), 
          pass an HTTP URL for Telegram to get a file from the 
          Internet, or pass ‚Äúattach://<file_attach_name>‚Äù to upload a 
          new one using multipart/form-data under <file_attach_name> 
          name. */
          cover                 : (file) Option[IFile]
          /* Start timestamp for the video in the message */
          startTimestamp        : Option[Int]
          /* Video caption (may also be used when resending videos by 
          file_id), 0-1024 characters after entities parsing */
          caption               : Option[String]
          /* Mode for parsing entities in the video caption. See 
          formatting options for more details. */
          parseMode             : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the caption, which can be specified instead of parse_mode */
          captionEntities       : List[MessageEntity]
          /* Pass True, if the caption must be shown above the message 
          media */
          showCaptionAboveMedia : Option[Boolean]
          /* Pass True if the video needs to be covered with a spoiler 
          animation */
          hasSpoiler            : Option[Boolean]
          /* Pass True if the uploaded video is suitable for streaming */
          supportsStreaming     : Option[Boolean]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification   : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent        : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast    : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId       : Option[String]
          /* Description of the message to reply to */
          replyParameters       : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup           : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 
          minute long. Use this method to send video messages. On success, the sent 
          Message is returned.  */
        def sendVideoNote {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId      : Option[Int]
          /* Video note to send. Pass a file_id as String to send a 
          video note that exists on the Telegram servers (recommended) 
          or upload a new video using multipart/form-data. Sending 
          video notes by a URL is currently unsupported */
          videoNote            : (file) IFile
          /* Duration of sent video in seconds */
          duration             : Option[Int]
          /* Video width and height, i.e. diameter of the video message */
          length               : Option[Int]
          /* Thumbnail of the file sent; can be ignored if thumbnail 
          generation for the file is supported server-side. The 
          thumbnail should be in JPEG format and less than 200 kB in 
          size. A thumbnail's width and height should not exceed 320. 
          Ignored if the file is not uploaded using 
          multipart/form-data. Thumbnails can't be reused and can be 
          only uploaded as a new file, so you can pass 
          ‚Äúattach://<file_attach_name>‚Äù if the thumbnail was uploaded 
          using multipart/form-data under <file_attach_name>. */
          thumbnail            : (file) Option[IFile]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent       : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast   : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId      : Option[String]
          /* Description of the message to reply to */
          replyParameters      : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup          : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Use this method to send audio files, if you want Telegram clients to display 
          the file as a playable voice message. For this to work, your audio must be in an 
          .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats 
          may be sent as Audio or Document). On success, the sent Message is returned. 
          Bots can currently send voice messages of up to 50 MB in size, this limit may be 
          changed in the future.  */
        def sendVoice {
          /* Unique identifier of the business connection on behalf of 
          which the message will be sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Unique identifier for the target message thread (topic) of 
          the forum; for forum supergroups only */
          messageThreadId      : Option[Int]
          /* Audio file to send. Pass a file_id as String to send a file 
          that exists on the Telegram servers (recommended), pass an 
          HTTP URL as a String for Telegram to get a file from the 
          Internet, or upload a new one using multipart/form-data. */
          voice                : (file) IFile
          /* Voice message caption, 0-1024 characters after entities 
          parsing */
          caption              : Option[String]
          /* Mode for parsing entities in the voice message caption. See 
          formatting options for more details. */
          parseMode            : Option[ParseMode]
          /* A JSON-serialized list of special entities that appear in 
          the caption, which can be specified instead of parse_mode */
          captionEntities      : List[MessageEntity]
          /* Duration of the voice message in seconds */
          duration             : Option[Int]
          /* Sends the message silently. Users will receive a 
          notification with no sound. */
          disableNotification  : Option[Boolean]
          /* Protects the contents of the sent message from forwarding 
          and saving */
          protectContent       : Option[Boolean]
          /* Pass True to allow up to 1000 messages per second, ignoring 
          broadcasting limits for a fee of 0.1 Telegram Stars per 
          message. The relevant Stars will be withdrawn from the bot's 
          balance */
          allowPaidBroadcast   : Option[Boolean]
          /* Unique identifier of the message effect to be added to the 
          message; for private chats only */
          messageEffectId      : Option[String]
          /* Description of the message to reply to */
          replyParameters      : Option[ReplyParameters]
          /* Additional interface options. A JSON-serialized object for 
          an inline keyboard, custom reply keyboard, instructions to 
          remove a reply keyboard or to force a reply from the user */
          replyMarkup          : Option[KeyboardMarkup]
        } => Method[Message]
      
        /* Changes the bio of a managed business account. Requires the can_change_bio 
          business bot right. Returns True on success.  */
        def setBusinessAccountBio {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* The new value of the bio for the business account; 0-140 
          characters */
          bio                  : Option[String]
        } => Method[Boolean]
      
        /* Changes the privacy settings pertaining to incoming gifts in a managed business 
          account. Requires the can_change_gift_settings business bot right. Returns True 
          on success.  */
        def setBusinessAccountGiftSettings {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* Pass True, if a button for sending a gift to the user or by 
          the business account must always be shown in the input field */
          showGiftButton       : Boolean
          /* Types of gifts accepted by the business account */
          acceptedGiftTypes    : AcceptedGiftTypes
        } => Method[Boolean]
      
        /* Changes the first and last name of a managed business account. Requires the 
          can_change_name business bot right. Returns True on success.  */
        def setBusinessAccountName {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* The new value of the first name for the business account; 
          1-64 characters */
          firstName            : String
          /* The new value of the last name for the business account; 
          0-64 characters */
          lastName             : Option[String]
        } => Method[Boolean]
      
        /* Changes the profile photo of a managed business account. Requires the 
          can_edit_profile_photo business bot right. Returns True on success.  */
        def setBusinessAccountProfilePhoto {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* The new profile photo to set */
          photo                : InputProfilePhoto
          /* Pass True to set the public photo, which will be visible 
          even if the main photo is hidden by the business account's 
          privacy settings. An account can have only one public photo. */
          isPublic             : Option[Boolean]
        } => Method[Boolean]
      
        /* Changes the username of a managed business account. Requires the 
          can_change_username business bot right. Returns True on success.  */
        def setBusinessAccountUsername {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* The new value of the username for the business account; 
          0-32 characters */
          username             : Option[String]
        } => Method[Boolean]
      
        /* Use this method to set a custom title for an administrator in a supergroup 
          promoted by the bot. Returns True on success.  */
        def setChatAdministratorCustomTitle {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId      : ChatId
          /* Unique identifier of the target user */
          userId      : Long
          /* New custom title for the administrator; 0-16 characters, 
          emoji are not allowed */
          customTitle : String
        } => Method[Boolean]
      
        /* Use this method to change the description of a group, a supergroup or a 
          channel. The bot must be an administrator in the chat for this to work and must 
          have the appropriate administrator rights. Returns True on success.  */
        def setChatDescription {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId      : ChatId
          /* New chat description, 0-255 characters */
          description : Option[String]
        } => Method[Boolean]
      
        /* Use this method to change the bot's menu button in a private chat, or the 
          default menu button. Returns True on success.  */
        def setChatMenuButton {
          /* Unique identifier for the target private chat. If not 
          specified, default bot's menu button will be changed */
          chatId     : Option[Long]
          /* A JSON-serialized object for the bot's new menu button. 
          Defaults to MenuButtonDefault */
          menuButton : Option[MenuButton]
        } => Method[Boolean]
      
        /* Use this method to set default chat permissions for all members. The bot must 
          be an administrator in the group or a supergroup for this to work and must have 
          the can_restrict_members administrator rights. Returns True on success.  */
        def setChatPermissions {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId                        : ChatId
          /* A JSON-serialized object for new default chat permissions */
          permissions                   : ChatPermissions
          /* Pass True if chat permissions are set independently. 
          Otherwise, the can_send_other_messages and 
          can_add_web_page_previews permissions will imply the 
          can_send_messages, can_send_audios, can_send_documents, 
          can_send_photos, can_send_videos, can_send_video_notes, and 
          can_send_voice_notes permissions; the can_send_polls 
          permission will imply the can_send_messages permission. */
          useIndependentChatPermissions : Option[Boolean]
        } => Method[Boolean]
      
        /* Use this method to set a new profile photo for the chat. Photos can't be 
          changed for private chats. The bot must be an administrator in the chat for this 
          to work and must have the appropriate administrator rights. Returns True on 
          success.  */
        def setChatPhoto {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId : ChatId
          /* New chat photo, uploaded using multipart/form-data */
          photo  : (file) IFile
        } => Method[Boolean]
      
        /* Use this method to set a new group sticker set for a supergroup. The bot must 
          be an administrator in the chat for this to work and must have the appropriate 
          administrator rights. Use the field can_set_sticker_set optionally returned in 
          getChat requests to check if the bot can use this method. Returns True on 
          success.  */
        def setChatStickerSet {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId         : ChatId
          /* Name of the sticker set to be set as the group sticker set */
          stickerSetName : String
        } => Method[Boolean]
      
        /* Use this method to change the title of a chat. Titles can't be changed for 
          private chats. The bot must be an administrator in the chat for this to work and 
          must have the appropriate administrator rights. Returns True on success.  */
        def setChatTitle {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId : ChatId
          /* New chat title, 1-128 characters */
          title  : String
        } => Method[Boolean]
      
        /* Use this method to set the thumbnail of a custom emoji sticker set. Returns 
          True on success.  */
        def setCustomEmojiStickerSetThumbnail {
          /* Sticker set name */
          name          : String
          /* Custom emoji identifier of a sticker from the sticker set; 
          pass an empty string to drop the thumbnail and use the first 
          sticker as the thumbnail. */
          customEmojiId : Option[String]
        } => Method[Boolean]
      
        /* Use this method to set the score of the specified user in a game message. On 
          success, if the message is not an inline message, the Message is returned, 
          otherwise True is returned. Returns an error, if the new score is not greater 
          than the user's current score in the chat and force is False.  */
        def setGameScore {
          /* User identifier */
          userId             : Long
          /* New score, must be non-negative */
          score              : Int
          /* Pass True if the high score is allowed to decrease. This 
          can be useful when fixing mistakes or banning cheaters */
          force              : Option[Boolean]
          /* Pass True if the game message should not be automatically 
          edited to include the current scoreboard */
          disableEditMessage : Option[Boolean]
          /* Required if inline_message_id is not specified. Unique 
          identifier for the target chat */
          chatId             : Option[Long]
          /* Required if inline_message_id is not specified. Identifier 
          of the sent message */
          messageId          : Option[Int]
          /* Required if chat_id and message_id are not specified. 
          Identifier of the inline message */
          inlineMessageId    : Option[String]
        } => Method[Either[Boolean, Message]]
      
        /* Use this method to change the chosen reactions on a message. Service messages 
          of some types can't be reacted to. Automatically forwarded messages from a 
          channel to its discussion group have the same available reactions as messages in 
          the channel. Bots can't use paid reactions. Returns True on success.  */
        def setMessageReaction {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId    : ChatId
          /* Identifier of the target message. If the message belongs to 
          a media group, the reaction is set to the first non-deleted 
          message in the group instead. */
          messageId : Int
          /* A JSON-serialized list of reaction types to set on the 
          message. Currently, as non-premium users, bots can set up to 
          one reaction per message. A custom emoji reaction can be 
          used if it is either already present on the message or 
          explicitly allowed by chat administrators. Paid reactions 
          can't be used by bots. */
          reaction  : List[ReactionType]
          /* Pass True to set the reaction with a big animation */
          isBig     : Option[Boolean]
        } => Method[Boolean]
      
        /* Use this method to change the list of the bot's commands. See this manual for 
          more details about bot commands. Returns True on success.  */
        def setMyCommands {
          /* A JSON-serialized list of bot commands to be set as the 
          list of the bot's commands. At most 100 commands can be 
          specified. */
          commands     : List[BotCommand]
          /* A JSON-serialized object, describing scope of users for 
          which the commands are relevant. Defaults to 
          BotCommandScopeDefault. */
          scope        : Option[BotCommandScope]
          /* A two-letter ISO 639-1 language code. If empty, commands 
          will be applied to all users from the given scope, for whose 
          language there are no dedicated commands */
          languageCode : Option[String]
        } => Method[Boolean]
      
        /* Use this method to change the default administrator rights requested by the bot 
          when it's added as an administrator to groups or channels. These rights will be 
          suggested to users, but they are free to modify the list before adding the bot. 
          Returns True on success.  */
        def setMyDefaultAdministratorRights {
          /* A JSON-serialized object describing new default 
          administrator rights. If not specified, the default 
          administrator rights will be cleared. */
          rights      : Option[ChatAdministratorRights]
          /* Pass True to change the default administrator rights of the 
          bot in channels. Otherwise, the default administrator rights 
          of the bot for groups and supergroups will be changed. */
          forChannels : Option[Boolean]
        } => Method[Boolean]
      
        /* Use this method to change the bot's description, which is shown in the chat 
          with the bot if the chat is empty. Returns True on success.  */
        def setMyDescription {
          /* New bot description; 0-512 characters. Pass an empty string 
          to remove the dedicated description for the given language. */
          description  : Option[String]
          /* A two-letter ISO 639-1 language code. If empty, the 
          description will be applied to all users for whose language 
          there is no dedicated description. */
          languageCode : Option[String]
        } => Method[Boolean]
      
        /* Use this method to change the bot's name. Returns True on success.  */
        def setMyName {
          /* New bot name; 0-64 characters. Pass an empty string to 
          remove the dedicated name for the given language. */
          name         : Option[String]
          /* A two-letter ISO 639-1 language code. If empty, the name 
          will be shown to all users for whose language there is no 
          dedicated name. */
          languageCode : Option[String]
        } => Method[Boolean]
      
        /* Use this method to change the bot's short description, which is shown on the 
          bot's profile page and is sent together with the link when users share the bot. 
          Returns True on success.  */
        def setMyShortDescription {
          /* New short description for the bot; 0-120 characters. Pass 
          an empty string to remove the dedicated short description 
          for the given language. */
          shortDescription : Option[String]
          /* A two-letter ISO 639-1 language code. If empty, the short 
          description will be applied to all users for whose language 
          there is no dedicated short description. */
          languageCode     : Option[String]
        } => Method[Boolean]
      
        /* Informs a user that some of the Telegram Passport elements they provided 
          contains errors. The user will not be able to re-submit their Passport to you 
          until the errors are fixed (the contents of the field for which you returned the 
          error must change). Returns True on success. Use this if the data submitted by 
          the user doesn't satisfy the standards your service requires for any reason. For 
          example, if a birthday date seems invalid, a submitted document is blurry, a 
          scan shows evidence of tampering, etc. Supply some details in the error message 
          to make sure the user knows how to correct the issues.  */
        def setPassportDataErrors {
          /* User identifier */
          userId : Long
          /* A JSON-serialized array describing the errors */
          errors : List[PassportElementError]
        } => Method[Boolean]
      
        /* Use this method to change the list of emoji assigned to a regular or custom 
          emoji sticker. The sticker must belong to a sticker set created by the bot. 
          Returns True on success.  */
        def setStickerEmojiList {
          /* File identifier of the sticker */
          sticker   : String
          /* A JSON-serialized list of 1-20 emoji associated with the 
          sticker */
          emojiList : List[String]
        } => Method[Boolean]
      
        /* Use this method to change search keywords assigned to a regular or custom emoji 
          sticker. The sticker must belong to a sticker set created by the bot. Returns 
          True on success.  */
        def setStickerKeywords {
          /* File identifier of the sticker */
          sticker  : String
          /* A JSON-serialized list of 0-20 search keywords for the 
          sticker with total length of up to 64 characters */
          keywords : List[String]
        } => Method[Boolean]
      
        /* Use this method to change the mask position of a mask sticker. The sticker must 
          belong to a sticker set that was created by the bot. Returns True on success.  */
        def setStickerMaskPosition {
          /* File identifier of the sticker */
          sticker      : String
          /* A JSON-serialized object with the position where the mask 
          should be placed on faces. Omit the parameter to remove the 
          mask position. */
          maskPosition : Option[MaskPosition]
        } => Method[Boolean]
      
        /* Use this method to move a sticker in a set created by the bot to a specific 
          position. Returns True on success.  */
        def setStickerPositionInSet {
          /* File identifier of the sticker */
          sticker  : String
          /* New sticker position in the set, zero-based */
          position : Int
        } => Method[Boolean]
      
        /* Use this method to set the thumbnail of a regular or mask sticker set. The 
          format of the thumbnail file must match the format of the stickers in the set. 
          Returns True on success.  */
        def setStickerSetThumbnail {
          /* Sticker set name */
          name      : String
          /* User identifier of the sticker set owner */
          userId    : Long
          /* A .WEBP or .PNG image with the thumbnail, must be up to 128 
          kilobytes in size and have a width and height of exactly 
          100px, or a .TGS animation with a thumbnail up to 32 
          kilobytes in size (see 
          https://core.telegram.org/stickers#animation-requirements 
          for animated sticker technical requirements), or a .WEBM 
          video with the thumbnail up to 32 kilobytes in size; see 
          https://core.telegram.org/stickers#video-requirements for 
          video sticker technical requirements. Pass a file_id as a 
          String to send a file that already exists on the Telegram 
          servers, pass an HTTP URL as a String for Telegram to get a 
          file from the Internet, or upload a new one using 
          multipart/form-data. Animated and video sticker set 
          thumbnails can't be uploaded via HTTP URL. If omitted, then 
          the thumbnail is dropped and the first sticker is used as 
          the thumbnail. */
          thumbnail : (file) Option[IFile]
          /* Format of the thumbnail, must be one of ‚Äústatic‚Äù for a 
          .WEBP or .PNG image, ‚Äúanimated‚Äù for a .TGS animation, or 
          ‚Äúvideo‚Äù for a .WEBM video */
          format    : String
        } => Method[Boolean]
      
        /* Use this method to set the title of a created sticker set. Returns True on 
          success.  */
        def setStickerSetTitle {
          /* Sticker set name */
          name  : String
          /* Sticker set title, 1-64 characters */
          title : String
        } => Method[Boolean]
      
        /* Changes the emoji status for a given user that previously allowed the bot to 
          manage their emoji status via the Mini App method requestEmojiStatusAccess. 
          Returns True on success.  */
        def setUserEmojiStatus {
          /* Unique identifier of the target user */
          userId                    : Long
          /* Custom emoji identifier of the emoji status to set. Pass an 
          empty string to remove the status. */
          emojiStatusCustomEmojiId  : Option[String]
          /* Expiration date of the emoji status, if any */
          emojiStatusExpirationDate : Option[Int]
        } => Method[Boolean]
      
        /* Use this method to specify a URL and receive incoming updates via an outgoing 
          webhook. Whenever there is an update for the bot, we will send an HTTPS POST 
          request to the specified URL, containing a JSON-serialized Update. In case of an 
          unsuccessful request (a request with response HTTP status code different from 
          2XY), we will repeat the request and give up after a reasonable amount of 
          attempts. Returns True on success. If you'd like to make sure that the webhook 
          was set by you, you can specify secret data in the parameter secret_token. If 
          specified, the request will contain a header ‚ÄúX-Telegram-Bot-Api-Secret-Token‚Äù 
          with the secret token as content.  */
        def setWebhook {
          /* HTTPS URL to send updates to. Use an empty string to remove 
          webhook integration */
          url                : String
          /* Upload your public key certificate so that the root 
          certificate in use can be checked. See our self-signed guide 
          for details. */
          certificate        : (file) Option[IFile]
          /* The fixed IP address which will be used to send webhook 
          requests instead of the IP address resolved through DNS */
          ipAddress          : Option[String]
          /* The maximum allowed number of simultaneous HTTPS 
          connections to the webhook for update delivery, 1-100. 
          Defaults to 40. Use lower values to limit the load on your 
          bot's server, and higher values to increase your bot's 
          throughput. */
          maxConnections     : Option[Int]
          /* A JSON-serialized list of the update types you want your 
          bot to receive. For example, specify ["message", 
          "edited_channel_post", "callback_query"] to only receive 
          updates of these types. See Update for a complete list of 
          available update types. Specify an empty list to receive all 
          update types except chat_member, message_reaction, and 
          message_reaction_count (default). If not specified, the 
          previous setting will be used. Please note that this 
          parameter doesn't affect updates created before the call to 
          the setWebhook, so unwanted updates may be received for a 
          short period of time. */
          allowedUpdates     : List[String]
          /* Pass True to drop all pending updates */
          dropPendingUpdates : Option[Boolean]
          /* A secret token to be sent in a header 
          ‚ÄúX-Telegram-Bot-Api-Secret-Token‚Äù in every webhook request, 
          1-256 characters. Only characters A-Z, a-z, 0-9, _ and - are 
          allowed. The header is useful to ensure that the request 
          comes from a webhook set by you. */
          secretToken        : Option[String]
        } => Method[Boolean]
      
        /* Use this method to stop updating a live location message before live_period 
          expires. On success, if the message is not an inline message, the edited Message 
          is returned, otherwise True is returned.  */
        def stopMessageLiveLocation {
          /* Unique identifier of the business connection on behalf of 
          which the message to be edited was sent */
          businessConnectionId : Option[String]
          /* Required if inline_message_id is not specified. Unique 
          identifier for the target chat or username of the target 
          channel (in the format &#064;channelusername) */
          chatId               : Option[ChatId]
          /* Required if inline_message_id is not specified. Identifier 
          of the message with live location to stop */
          messageId            : Option[Int]
          /* Required if chat_id and message_id are not specified. 
          Identifier of the inline message */
          inlineMessageId      : Option[String]
          /* A JSON-serialized object for a new inline keyboard. */
          replyMarkup          : Option[InlineKeyboardMarkup]
        } => Method[Either[Boolean, Message]]
      
        /* Use this method to stop a poll which was sent by the bot. On success, the 
          stopped Poll is returned.  */
        def stopPoll {
          /* Unique identifier of the business connection on behalf of 
          which the message to be edited was sent */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Identifier of the original message with the poll */
          messageId            : Int
          /* A JSON-serialized object for a new message inline keyboard. */
          replyMarkup          : Option[InlineKeyboardMarkup]
        } => Method[Poll]
      
        /* Transfers Telegram Stars from the business account balance to the bot's 
          balance. Requires the can_transfer_stars business bot right. Returns True on 
          success.  */
        def transferBusinessAccountStars {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* Number of Telegram Stars to transfer; 1-10000 */
          starCount            : Int
        } => Method[Boolean]
      
        /* Transfers an owned unique gift to another user. Requires the 
          can_transfer_and_upgrade_gifts business bot right. Requires can_transfer_stars 
          business bot right if the transfer is paid. Returns True on success.  */
        def transferGift {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* Unique identifier of the regular gift that should be 
          transferred */
          ownedGiftId          : String
          /* Unique identifier of the chat which will own the gift. The 
          chat must be active in the last 24 hours. */
          newOwnerChatId       : Long
          /* The amount of Telegram Stars that will be paid for the 
          transfer from the business account balance. If positive, 
          then the can_transfer_stars business bot right is required. */
          starCount            : Option[Int]
        } => Method[Boolean]
      
        /* Use this method to unban a previously banned user in a supergroup or channel. 
          The user will not return to the group or channel automatically, but will be able 
          to join via link, etc. The bot must be an administrator for this to work. By 
          default, this method guarantees that after the call the user is not a member of 
          the chat, but will be able to join it. So if the user is a member of the chat 
          they will also be removed from the chat. If you don't want this, use the 
          parameter only_if_banned. Returns True on success.  */
        def unbanChatMember {
          /* Unique identifier for the target group or username of the 
          target supergroup or channel (in the format 
          &#064;channelusername) */
          chatId       : ChatId
          /* Unique identifier of the target user */
          userId       : Long
          /* Do nothing if the user is not banned */
          onlyIfBanned : Option[Boolean]
        } => Method[Boolean]
      
        /* Use this method to unban a previously banned channel chat in a supergroup or 
          channel. The bot must be an administrator for this to work and must have the 
          appropriate administrator rights. Returns True on success.  */
        def unbanChatSenderChat {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId       : ChatId
          /* Unique identifier of the target sender chat */
          senderChatId : Long
        } => Method[Boolean]
      
        /* Use this method to unhide the 'General' topic in a forum supergroup chat. The 
          bot must be an administrator in the chat for this to work and must have the 
          can_manage_topics administrator rights. Returns True on success.  */
        def unhideGeneralForumTopic {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId : ChatId
        } => Method[Boolean]
      
        /* Use this method to clear the list of pinned messages in a chat. If the chat is 
          not a private chat, the bot must be an administrator in the chat for this to 
          work and must have the 'can_pin_messages' administrator right in a supergroup or 
          'can_edit_messages' administrator right in a channel. Returns True on success.  */
        def unpinAllChatMessages {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId : ChatId
        } => Method[Boolean]
      
        /* Use this method to clear the list of pinned messages in a forum topic. The bot 
          must be an administrator in the chat for this to work and must have the 
          can_pin_messages administrator right in the supergroup. Returns True on success.  */
        def unpinAllForumTopicMessages {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId          : ChatId
          /* Unique identifier for the target message thread of the 
          forum topic */
          messageThreadId : Int
        } => Method[Boolean]
      
        /* Use this method to clear the list of pinned messages in a General forum topic. 
          The bot must be an administrator in the chat for this to work and must have the 
          can_pin_messages administrator right in the supergroup. Returns True on success.  */
        def unpinAllGeneralForumTopicMessages {
          /* Unique identifier for the target chat or username of the 
          target supergroup (in the format &#064;supergroupusername) */
          chatId : ChatId
        } => Method[Boolean]
      
        /* Use this method to remove a message from the list of pinned messages in a chat. 
          If the chat is not a private chat, the bot must be an administrator in the chat 
          for this to work and must have the 'can_pin_messages' administrator right in a 
          supergroup or 'can_edit_messages' administrator right in a channel. Returns True 
          on success.  */
        def unpinChatMessage {
          /* Unique identifier of the business connection on behalf of 
          which the message will be unpinned */
          businessConnectionId : Option[String]
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId               : ChatId
          /* Identifier of the message to unpin. Required if 
          business_connection_id is specified. If not specified, the 
          most recent pinned message (by sending date) will be 
          unpinned. */
          messageId            : Option[Int]
        } => Method[Boolean]
      
        /* Upgrades a given regular gift to a unique gift. Requires the 
          can_transfer_and_upgrade_gifts business bot right. Additionally requires the 
          can_transfer_stars business bot right if the upgrade is paid. Returns True on 
          success.  */
        def upgradeGift {
          /* Unique identifier of the business connection */
          businessConnectionId : String
          /* Unique identifier of the regular gift that should be 
          upgraded to a unique one */
          ownedGiftId          : String
          /* Pass True to keep the original gift text, sender and 
          receiver in the upgraded gift */
          keepOriginalDetails  : Option[Boolean]
          /* The amount of Telegram Stars that will be paid for the 
          upgrade from the business account balance. If 
          gift.prepaid_upgrade_star_count > 0, then pass 0, otherwise, 
          the can_transfer_stars business bot right is required and 
          gift.upgrade_star_count must be passed. */
          starCount            : Option[Int]
        } => Method[Boolean]
      
        /* Use this method to upload a file with a sticker for later use in the 
          createNewStickerSet, addStickerToSet, or replaceStickerInSet methods (the file 
          can be used multiple times). Returns the uploaded File on success.  */
        def uploadStickerFile {
          /* User identifier of sticker file owner */
          userId        : Long
          /* A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM 
          format. See https://core.telegram.org/stickers for technical 
          requirements. */
          sticker       : (file) IFile
          /* Format of the sticker, must be one of ‚Äústatic‚Äù, ‚Äúanimated‚Äù, 
          ‚Äúvideo‚Äù */
          stickerFormat : String
        } => Method[File]
      
        /* Verifies a chat on behalf of the organization which is represented by the bot. 
          Returns True on success.  */
        def verifyChat {
          /* Unique identifier for the target chat or username of the 
          target channel (in the format &#064;channelusername) */
          chatId            : ChatId
          /* Custom description for the verification; 0-70 characters. 
          Must be empty if the organization isn't allowed to provide a 
          custom verification description. */
          customDescription : Option[String]
        } => Method[Boolean]
      
        /* Verifies a user on behalf of the organization which is represented by the bot. 
          Returns True on success.  */
        def verifyUser {
          /* Unique identifier of the target user */
          userId            : Long
          /* Custom description for the verification; 0-70 characters. 
          Must be empty if the organization isn't allowed to provide a 
          custom verification description. */
          customDescription : Option[String]
        } => Method[Boolean]
      }
    }
  }
}
     