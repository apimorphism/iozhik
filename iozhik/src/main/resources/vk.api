namespace iozhik {

  namespace vk {

    enum Event {
      groupId : Int

      EventMessageNew {
        type   : "message_new"
        object : Message
      }

      EventMessageReply {
        type   : "message_reply"
        object : Message
      }

      EventMessageEdit {
        type   : "message_edit"
        object : Message
      }

      EventMessageAllow {
        type   : "message_allow"
        object : (flatten) {
          userId : Int
          key    : String
        }
      }

      EventMessageDeny {
        type   : "message_deny"
        object : (flatten) {
          userId : Int
        }
      }

      EventPhotoNew {
        type   : "photo_new"
        object : Photo
      }

      EventPhotoCommentNew {
        type   : "photo_comment_new"
        object : (flatten) {
          use Comment
          photoId      : Int
          photoOwnerId : Int
        }
      }

      EventPhotoCommentEdit {
        type   : "photo_comment_edit"
        object : (flatten) {
          use Comment
          photoId      : Int
          photoOwnerId : Int
        }
      }

      EventPhotoCommentRestore {
        type   : "photo_comment_restore"
        object : (flatten) {
          use Comment
          photoId      : Int
          photoOwnerId : Int
        }
      }

      EventPhotoCommentDelete {
        type   : "photo_comment_delete"
        object : (flatten) {
          ownerId   : Int
          id        : Int
          userId    : Int
          deleterId : Int
          photoId   : Int
        }
      }
    }

    SizedPhoto {
      src    : String
      width  : Int
      height : Int
      type   : String
    }

    Photo {
      id      : Int
      albumId : Int
      ownerId : Int
      userId  : Int
      text    : String
      date    : (useDateTime) Long
      sizes   : Vector[SizedPhoto]
      width   : Option[Integer]
      height  : Option[Integer]
    }

    Video {
      id             : Int
      ownerId        : Int
      title          : String
      description    : String
      duration       : Int
      photo130       : String
      photo320       : String
      photo640       : String
      photo800       : String
      photo1280      : String
      firstFrame130  : String
      firstFrame320  : String
      firstFrame640  : String
      firstFrame800  : String
      firstFrame1280 : String
      date           : (useDateTime) Long
      addingDate     : (useDateTime) Long
      views          : Int
      comments       : Int
      player         : String
      platform       : String
      canEdit        : Option[Int]
      canAdd         : Int
      isPrivate      : Option[Int]
      processing     : Option[Int]
      live           : Option[Int]
      upcoming       : String
      isFavorite     : Boolean
    }

    enum Attachment {
      AttachmentPhoto {
        type: "photo"
        photo: Photo
      }

      AttachmentVideo {
        type: "video"
        video: Video
      }
    }

    Place {
      id        : Int
      title     : String
      latitude  : BigDecimal
      longitude : BigDecimal
      created   : Int
      icon      : String
      country   : String
      city      : String
    }

    Coordinate {
      latitude  : Float
      longitude : Float
    }

    Geo {
      type        : String
      coordinates : Coordinate
      place       : Place
    }

    CommentsThread {
      count           : Int
      items           : Vector[Comment]
      canPost         : Boolean
      showReplyButton : Boolean
      groupsCanPost   : Boolean
    }

    Comment {
      id             : Int
      userId         : Int
      date           : (useDateTime) Long
      text           : String
      replyToUser    : Int
      replyToComment : Int
      attachments    : Vector[Attachment]
      parentsStack   : Vector[Int]
      thread         : CommentsThread
    }

    Message {
      id           : Int
      date         : (useDateTime) Long
      peerId       : Int
      fromId       : Int
      text         : String
      randomId     : Int
      ref          : String
      refSource    : String
      attachments  : Vector[Attachment]
      important    : Boolean
      geo          : Geo
      payload      : String
      fwdMessages  : Vector[Message]
      replyMessage : Vector[Message]
    }

    Vk[F[_]] {
      def onEvent(ev: Event): String
    }
  }
}

